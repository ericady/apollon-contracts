{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [],
      "name": "ExcessiveInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdenticalAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerOperations",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtTokenManager",
          "type": "address"
        }
      ],
      "name": "SwapOperationsInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stableToMintIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "openLongPosition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtToMintIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "openShortPosition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe107ddbc99be8a00c161807d12f273224c6d06a32cb992533b784f9442697a9a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "4276462",
    "logsBloom": "0x
    "blockHash": "0xb6ae6c953982e6e83575ee4d0a77b21a97d8c41bd437ebc42d935ec43f22f8d2",
    "transactionHash": "0xe107ddbc99be8a00c161807d12f273224c6d06a32cb992533b784f9442697a9a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xe107ddbc99be8a00c161807d12f273224c6d06a32cb992533b784f9442697a9a",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb6ae6c953982e6e83575ee4d0a77b21a97d8c41bd437ebc42d935ec43f22f8d2"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "4276462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a1ba766827c404575f799519d1eb71c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerOperations\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtTokenManager\",\"type\":\"address\"}],\"name\":\"SwapOperationsInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableToMintIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"openLongPosition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtToMintIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"openShortPosition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapOperations.sol\":\"SwapOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 3e3; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0xd635d362aeae2f89023daba55875e04566f4e35fdac4bd3895ea4969cffc1308\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n   *\\n   * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n   * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n   *\\n   * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n   * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n   *\\n   */\\n  uint internal constant NICR_PRECISION = 1e20;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) {\\n      return (_coll * NICR_PRECISION) / _debt;\\n    }\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    else {\\n      // if (_debt == 0)\\n      return 2 ** 256 - 1;\\n    }\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5234c90c541302a3eda2b75f02ae3945837771ccc5bb19e2af1839602ba35f9b\",\"license\":\"MIT\"},\"contracts/Dependencies/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n  uint224 constant Q112 = 2 ** 112;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\",\"keccak256\":\"0x3f1c23c3f32d47e163112e14800b8418b3c25111f3a4ecd214060b212675e284\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x85f943dcc809f64cc30144f14495c5cdb556371a835f0d6022c7409a7d867fef\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations is IBBase {\\n  // --- Events ---\\n\\n  event BorrowerOperationsInitialized(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _stabilityPoolAddress,\\n    address _reservePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _swapOperationsAddress\\n  );\\n  event TroveCreated(address _borrower, uint arrayIndex);\\n  event SentBorrowingFeesToReserve(address indexed _borrower, uint amount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromStabilityPool();\\n  error NotFromSwapOps();\\n  error CollWithdrawPermittedInRM();\\n  error ICR_lt_MCR();\\n  error ICR_lt_CCR();\\n  error TCR_lt_CCR();\\n  error ICRDecreasedInRM();\\n  error MaxFee_gt_100_InRM();\\n  error MaxFee_out_Range();\\n  error Repaid_gt_CurrentDebt();\\n  error TroveClosedOrNotExist();\\n  error ActiveTrove();\\n  error NotAllowedInRecoveryMode();\\n  error NotBorrower();\\n  error WithdrawAmount_gt_Coll();\\n  error ZeroDebtChange();\\n  error InsufficientDebtToRepay();\\n\\n  // --- Functions ---\\n\\n  function openTrove(TokenAmount[] memory _colls) external;\\n\\n  function addColl(TokenAmount[] memory _colls) external;\\n\\n  function withdrawColl(TokenAmount[] memory _colls) external;\\n\\n  function increaseDebt(address _borrower, address _to, TokenAmount[] memory _debts, uint _maxFeePercentage) external;\\n\\n  function repayDebt(TokenAmount[] memory _debts) external;\\n\\n  function repayDebtFromPoolBurn(address borrower, TokenAmount[] memory _debts) external;\\n\\n  function closeTrove() external;\\n\\n  function getCompositeDebt(DebtTokenAmount[] memory _debts) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2b60cd43029db162ff3f063834ea034723ad669603fda7d48451a3434bab8bf3\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSP();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4da05b4ce909788d8e8f3129c3bb4a4da599ac75935faefb66c3b78cdecd23aa\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x9b263476d765d2c26c970271959c453c2e4607bcf2c58cea71c621d8dc714bb5\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISwapCallee {\\n  function swapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf1bb45b6dde65533116206f2b5a0aab8263183586e904629267083e7c2c1d439\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISwapERC20 {\\n  error PermitExpired();\\n  error InvalidSignature();\\n\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x869d47bf84c81107b9d0b5450789c6b662ef55a9404d5ecff2bbf6eaa6723524\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface ISwapOperations is IBBase {\\n  error Forbidden();\\n  error IdenticalAddresses();\\n  error PairExists();\\n  error Expired();\\n  error PairDoesNotExist();\\n  error InsufficientAAmount();\\n  error InsufficientBAmount();\\n  error InsufficientInputAmount();\\n  error InsufficientOutputAmount();\\n  error ExcessiveInputAmount();\\n  error InsufficientLiquidity();\\n  error InsufficientAmount();\\n  error InvalidPath();\\n  error TransferFromFailed();\\n\\n  event SwapOperationsInitialized(\\n    address borrowerOperations,\\n    address troveManager,\\n    address priceFeed,\\n    address debtTokenManager\\n  );\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  // **** GETTER ****\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  // **** OPERATIONS ****\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  // automatically repays any related open loans from the borrower (msg.sender)\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function openLongPosition(\\n    uint stableToMintIn,\\n    uint debtOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function openShortPosition(\\n    uint debtToMintIn,\\n    uint stableOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xeb0b2735fe9327cc54bf8e9cd3a4602aeb30ca2b0bf9c56330198538968141cc\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './ISwapERC20.sol';\\n\\ninterface ISwapPair is ISwapERC20 {\\n  error Locked();\\n  error TransferFailed();\\n  error Forbidden();\\n  error Overflow();\\n  error InsufficientLiquidityMinted();\\n  error InsufficientLiquidityBurned();\\n  error InsufficientInputAmount();\\n  error InsufficientOutputAmount();\\n  error InsufficientLiquidity();\\n  error InvalidTo();\\n  error K();\\n  error NotFromSwapOperations();\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    uint32 currentSwapFee,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  // **** GETTER ****\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function getSwapFee() external view returns (uint32 swapFee);\\n\\n  // **** OPERATIONS ****\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(\\n    address to,\\n    uint liquidity,\\n    uint debt0,\\n    uint debt1\\n  ) external returns (uint amount0, uint amount1, uint burned0, uint burned1);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address, address, address) external;\\n}\\n\",\"keccak256\":\"0x6514dd777338282469e3e766f3e9d8eb5868ce7c6cc32f3af8b1e11932b942df\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event BaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error ExceedDebtBalance();\\n  error OnlyOneTrove();\\n  error ZeroAmount();\\n  error LessThanMCR();\\n  error InvalidMaxFeePercent();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getNominalICR(address _borrower) external returns (uint);\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate() external view returns (uint);\\n\\n  function getBorrowingRateWithDecay() external view returns (uint);\\n\\n  function getBorrowingFee(uint LUSDDebt) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\\n\\n  function decayBaseRateFromBorrowing() external;\\n\\n  function updateBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc91fe5746ad02a514565adf54bb16d28d1c60110001b1c9f9bac9966757f0ea5\",\"license\":\"MIT\"},\"contracts/SwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './Interfaces/ISwapERC20.sol';\\n\\ncontract SwapERC20 is ISwapERC20 {\\n  string public constant name = 'Swap';\\n  string public constant symbol = 'SWAP';\\n  uint8 public constant decimals = 18;\\n  uint public totalSupply;\\n  mapping(address => uint) public balanceOf;\\n  mapping(address => mapping(address => uint)) public allowance;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint) public nonces;\\n\\n  constructor() {\\n    uint chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256(bytes(name)),\\n        keccak256(bytes('1')),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _mint(address to, uint value) internal {\\n    totalSupply += value;\\n    balanceOf[to] += value;\\n    emit Transfer(address(0), to, value);\\n  }\\n\\n  function _burn(address from, uint value) internal {\\n    balanceOf[from] -= value;\\n    totalSupply -= value;\\n    emit Transfer(from, address(0), value);\\n  }\\n}\\n\",\"keccak256\":\"0xd13454b818b8b5f5b550f5c71be45e8396d0cf0bd4582a069b3f2a03ea00d077\",\"license\":\"MIT\"},\"contracts/SwapOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './SwapPair.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Interfaces/ISwapOperations.sol';\\nimport './Interfaces/IBorrowerOperations.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/ITroveManager.sol';\\n\\ncontract SwapOperations is ISwapOperations, Ownable(msg.sender), CheckContract, LiquityBase {\\n  ITroveManager public troveManager;\\n  IBorrowerOperations public borrowerOperations;\\n  address public priceFeedAddress;\\n  IDebtTokenManager public debtTokenManager;\\n\\n  mapping(address => mapping(address => address)) public getPair;\\n  address[] public allPairs;\\n\\n  function setAddresses(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManager\\n  ) external onlyOwner {\\n    checkContract(_borrowerOperationsAddress);\\n    checkContract(_troveManagerAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManager);\\n\\n    borrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    priceFeedAddress = _priceFeedAddress;\\n    debtTokenManager = IDebtTokenManager(_debtTokenManager);\\n\\n    emit SwapOperationsInitialized(\\n      _borrowerOperationsAddress,\\n      _troveManagerAddress,\\n      _priceFeedAddress,\\n      _debtTokenManager\\n    );\\n\\n    // Disabled to create pairs later\\n    // renounceOwnership();\\n  }\\n\\n  modifier ensure(uint deadline) {\\n    if (deadline < block.timestamp) revert Expired();\\n    _;\\n  }\\n\\n  // **** PAIR MANAGEMENT ****\\n\\n  function allPairsLength() external view returns (uint) {\\n    return allPairs.length;\\n  }\\n\\n  function createPair(address tokenA, address tokenB) external onlyOwner returns (address pair) {\\n    if (tokenA == tokenB) revert IdenticalAddresses();\\n\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    if (token0 == address(0)) revert ZeroAddress();\\n    if (getPair[token0][token1] != address(0)) revert PairExists(); // single check is sufficient\\n\\n    bytes memory bytecode = type(SwapPair).creationCode;\\n    bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n    assembly {\\n      pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n    }\\n\\n    ISwapPair(pair).initialize(token0, token1, address(debtTokenManager), priceFeedAddress);\\n    getPair[token0][token1] = pair;\\n    getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n    allPairs.push(pair);\\n\\n    emit PairCreated(token0, token1, pair, allPairs.length);\\n  }\\n\\n  // **** GETTER FUNCTIONS ****\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\n    if (amountA == 0) revert InsufficientAmount();\\n    if (reserveA == 0 || reserveB == 0) revert InsufficientLiquidity();\\n\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) public pure virtual override returns (uint amountOut) {\\n    if (amountIn == 0) revert InsufficientInputAmount();\\n    if (reserveIn == 0 || reserveOut == 0) revert InsufficientLiquidity();\\n\\n    uint amountInWithFee = amountIn * (SWAP_FEE_PRECISION - swapFee);\\n    uint numerator = amountInWithFee * reserveOut;\\n    uint denominator = reserveIn * SWAP_FEE_PRECISION + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) public pure virtual override returns (uint amountIn) {\\n    if (amountOut == 0) revert InsufficientOutputAmount();\\n    if (reserveIn == 0 || reserveOut == 0) revert InsufficientLiquidity();\\n\\n    uint numerator = reserveIn * amountOut * SWAP_FEE_PRECISION;\\n    uint denominator = (reserveOut - amountOut) * (SWAP_FEE_PRECISION - swapFee);\\n    amountIn = (numerator / denominator) + 1;\\n  }\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] memory path\\n  ) public view virtual override returns (uint[] memory amounts) {\\n    if (path.length < 2) revert InvalidPath();\\n\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n      (uint reserveIn, uint reserveOut, uint32 swapFee) = getReserves(path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, swapFee);\\n    }\\n  }\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] memory path\\n  ) public view virtual override returns (uint[] memory amounts) {\\n    if (path.length < 2) revert InvalidPath();\\n\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n      (uint reserveIn, uint reserveOut, uint32 swapFee) = getReserves(path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, swapFee);\\n    }\\n  }\\n\\n  // **** LIQUIDITY FUNCTIONS ****\\n\\n  struct ProvidingVars {\\n    address pair;\\n    uint senderBalanceA;\\n    uint senderBalanceB;\\n    uint fromBalanceA;\\n    uint fromBalanceB;\\n    uint fromMintA;\\n    uint fromMintB;\\n  }\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n    ProvidingVars memory vars;\\n    vars.pair = getPair[tokenA][tokenB];\\n    if (vars.pair == address(0)) revert PairDoesNotExist();\\n\\n    {\\n      (uint reserveA, uint reserveB, ) = getReserves(tokenA, tokenB);\\n      if (reserveA == 0 && reserveB == 0) {\\n        (amountA, amountB) = (amountADesired, amountBDesired);\\n      } else {\\n        uint amountBOptimal = quote(amountADesired, reserveA, reserveB);\\n        if (amountBOptimal <= amountBDesired) {\\n          if (amountBOptimal < amountBMin) revert InsufficientBAmount();\\n          (amountA, amountB) = (amountADesired, amountBOptimal);\\n        } else {\\n          uint amountAOptimal = quote(amountBDesired, reserveB, reserveA);\\n          assert(amountAOptimal <= amountADesired);\\n          if (amountAOptimal < amountAMin) revert InsufficientAAmount();\\n          (amountA, amountB) = (amountAOptimal, amountBDesired);\\n        }\\n      }\\n    }\\n\\n    vars.senderBalanceA = IERC20(tokenA).balanceOf(msg.sender);\\n    vars.senderBalanceB = IERC20(tokenB).balanceOf(msg.sender);\\n\\n    vars.fromBalanceA = LiquityMath._min(vars.senderBalanceA, amountA);\\n    vars.fromBalanceB = LiquityMath._min(vars.senderBalanceB, amountB);\\n\\n    vars.fromMintA = amountA - vars.fromBalanceA;\\n    vars.fromMintB = amountB - vars.fromBalanceB;\\n\\n    // mint new tokens if the sender did not have enough\\n    if (vars.fromMintA != 0 || vars.fromMintB != 0) {\\n      TokenAmount[] memory debtsToMint = new TokenAmount[](2);\\n      debtsToMint[0] = TokenAmount(tokenA, vars.fromMintA);\\n      debtsToMint[1] = TokenAmount(tokenB, vars.fromMintB);\\n      borrowerOperations.increaseDebt(msg.sender, vars.pair, debtsToMint, _maxMintFeePercentage);\\n    }\\n\\n    // transfer tokens sourced from senders balance\\n    if (vars.fromBalanceA != 0) safeTransferFrom(tokenA, msg.sender, vars.pair, vars.fromBalanceA);\\n    if (vars.fromBalanceB != 0) safeTransferFrom(tokenB, msg.sender, vars.pair, vars.fromBalanceB);\\n\\n    liquidity = ISwapPair(vars.pair).mint(msg.sender);\\n  }\\n\\n  struct RemovalVars {\\n    address token0;\\n    address token1;\\n    uint amount0;\\n    uint amount1;\\n    uint burned0;\\n    uint burned1;\\n  }\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n    RemovalVars memory vars;\\n    (vars.token0, vars.token1) = sortTokens(tokenA, tokenB);\\n\\n    // receive tokens from pair\\n    address pair = getPair[tokenA][tokenB];\\n    (vars.amount0, vars.amount1, vars.burned0, vars.burned1) = ISwapPair(pair).burn(\\n      msg.sender,\\n      liquidity,\\n      // check if there are some debts which has to be repaid first\\n      troveManager.getTroveRepayableDebt(msg.sender, vars.token0),\\n      troveManager.getTroveRepayableDebt(msg.sender, vars.token1)\\n    );\\n\\n    // handle trove debt repayment\\n    if (vars.burned0 != 0 || vars.burned1 != 0) {\\n      TokenAmount[] memory debtsToRepay = new TokenAmount[](2);\\n      debtsToRepay[0] = TokenAmount(vars.token0, vars.burned0);\\n      debtsToRepay[1] = TokenAmount(vars.token1, vars.burned1);\\n      borrowerOperations.repayDebtFromPoolBurn(msg.sender, debtsToRepay);\\n    }\\n\\n    (amountA, amountB) = tokenA == vars.token0 ? (vars.amount0, vars.amount1) : (vars.amount1, vars.amount0);\\n    if (amountA < amountAMin) revert InsufficientAAmount();\\n    if (amountB < amountBMin) revert InsufficientBAmount();\\n  }\\n\\n  // **** SWAP ****\\n  // requires the initial amount to have already been sent to the first pair\\n\\n  function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n    for (uint i; i < path.length - 1; i++) {\\n      (address input, address output) = (path[i], path[i + 1]);\\n      (address token0, ) = sortTokens(input, output);\\n\\n      uint amountOut = amounts[i + 1];\\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n\\n      address to = i < path.length - 2 ? getPair[output][path[i + 2]] : _to;\\n      ISwapPair(getPair[input][output]).swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n  }\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = getAmountsOut(amountIn, path);\\n    if (amounts[amounts.length - 1] < amountOutMin) revert InsufficientOutputAmount();\\n    safeTransferFrom(path[0], msg.sender, getPair[path[0]][path[1]], amounts[0]);\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = getAmountsIn(amountOut, path);\\n    if (amounts[0] > amountInMax) revert ExcessiveInputAmount();\\n    safeTransferFrom(path[0], msg.sender, getPair[path[0]][path[1]], amounts[0]);\\n    _swap(amounts, path, to);\\n  }\\n\\n  function openLongPosition(\\n    uint stableToMintIn,\\n    uint debtOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external override returns (uint[] memory amounts) {\\n    address[] memory path = new address[](2);\\n    path[0] = address(debtTokenManager.getStableCoin());\\n    path[1] = debtTokenAddress;\\n\\n    return _openPosition(stableToMintIn, debtOutMin, path, to, _maxMintFeePercentage);\\n  }\\n\\n  function openShortPosition(\\n    uint debtToMintIn,\\n    uint stableOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    uint _maxMintFeePercentage,\\n    uint deadline\\n  ) external override returns (uint[] memory amounts) {\\n    address[] memory path = new address[](2);\\n    path[0] = debtTokenAddress;\\n    path[1] = address(debtTokenManager.getStableCoin());\\n\\n    return _openPosition(debtToMintIn, stableOutMin, path, to, _maxMintFeePercentage);\\n  }\\n\\n  function _openPosition(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] memory path,\\n    address to,\\n    uint _maxMintFeePercentage\\n  ) internal returns (uint[] memory amounts) {\\n    address pair = getPair[path[0]][path[1]];\\n    if (pair == address(0)) revert PairDoesNotExist();\\n\\n    amounts = getAmountsOut(amountIn, path);\\n    if (amounts[amounts.length - 1] < amountOutMin) revert InsufficientOutputAmount();\\n\\n    // mint the debt token and transfer it to the pair\\n    TokenAmount[] memory debtsToMint = new TokenAmount[](1);\\n    debtsToMint[0] = TokenAmount(path[0], amounts[0]);\\n    borrowerOperations.increaseDebt(msg.sender, pair, debtsToMint, _maxMintFeePercentage);\\n\\n    // execute the swap\\n    _swap(amounts, path, to);\\n\\n    return amounts;\\n  }\\n\\n  // **** HELPER FUNCTIONS ****\\n\\n  function getReserves(\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint reserveA, uint reserveB, uint32 swapFee) {\\n    ISwapPair pair = ISwapPair(getPair[tokenA][tokenB]);\\n    swapFee = pair.getSwapFee();\\n\\n    (uint reserve0, uint reserve1, ) = pair.getReserves();\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  function sortTokens(address tokenA, address tokenB) internal view returns (address token0, address token1) {\\n    if (tokenA == tokenB) revert IdenticalAddresses();\\n    if (tokenA == address(0) || tokenB == address(0)) revert ZeroAddress();\\n\\n    address stableCoin = address(debtTokenManager.getStableCoin());\\n    if (tokenA == stableCoin) return (tokenA, tokenB);\\n    if (tokenB == stableCoin) return (tokenB, tokenA);\\n    return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    if (!success || (data.length > 0 && abi.decode(data, (bool)) == false)) revert TransferFromFailed();\\n  }\\n}\\n\",\"keccak256\":\"0x811662774e66a64561133580f82f285d53ab9b79b5e0b71a8abcca82a13fb02f\",\"license\":\"MIT\"},\"contracts/SwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './Dependencies/LiquityMath.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/UQ112x112.sol';\\nimport './Interfaces/ISwapPair.sol';\\nimport './Interfaces/ISwapOperations.sol';\\nimport './Interfaces/ISwapCallee.sol';\\nimport './SwapERC20.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\n\\ncontract SwapPair is ISwapPair, SwapERC20, LiquityBase {\\n  using UQ112x112 for uint224;\\n\\n  uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n  bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n  address public operations;\\n  IPriceFeed public priceFeed;\\n  IDebtTokenManager public debtTokenManager;\\n\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n  uint public price0CumulativeLast;\\n  uint public price1CumulativeLast;\\n\\n  constructor() {\\n    operations = msg.sender;\\n  }\\n\\n  // called once by the operations at time of deployment\\n  function initialize(address _token0, address _token1, address _debtTokenManager, address _priceFeedAddress) external {\\n    if (msg.sender != operations) revert Forbidden();\\n\\n    token0 = _token0;\\n    token1 = _token1;\\n    debtTokenManager = IDebtTokenManager(_debtTokenManager);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n  }\\n\\n  uint private unlocked = 1;\\n  modifier lock() {\\n    if (unlocked == 0) revert Locked();\\n\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function _safeTransfer(address token, address to, uint value) private {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n\\n    if (!success || (data.length > 0 && abi.decode(data, (bool)) == false)) revert TransferFailed();\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n    if (balance0 > type(uint112).max || balance1 > type(uint112).max) revert Overflow();\\n\\n    uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n      price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n    }\\n\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint liquidity) {\\n    _requireCallerIsOperations();\\n\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint balance0 = IERC20(token0).balanceOf(address(this));\\n    uint balance1 = IERC20(token1).balanceOf(address(this));\\n    uint amount0 = balance0 - _reserve0;\\n    uint amount1 = balance1 - _reserve1;\\n\\n    uint _totalSupply = totalSupply; // gas savings\\n    if (_totalSupply == 0) {\\n      liquidity = LiquityMath._sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n      _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = LiquityMath._min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n    }\\n\\n    if (liquidity == 0) revert InsufficientLiquidityMinted();\\n    _mint(to, liquidity);\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  // directly burns debt tokens if the user has any left to repay\\n  function burn(\\n    address to,\\n    uint liquidity,\\n    uint debt0,\\n    uint debt1\\n  ) external lock returns (uint amount0, uint amount1, uint burned0, uint burned1) {\\n    _requireCallerIsOperations();\\n\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n\\n    uint balance0 = IERC20(token0).balanceOf(address(this));\\n    uint balance1 = IERC20(token1).balanceOf(address(this));\\n\\n    {\\n      uint _totalSupply = totalSupply; // gas savings\\n      amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n      amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\n      if (amount0 == 0 || amount1 == 0) revert InsufficientLiquidityBurned();\\n      _burn(to, liquidity);\\n    }\\n\\n    // check if the user as any debts left to repay\\n    burned0 = LiquityMath._min(debt0, amount0);\\n    burned1 = LiquityMath._min(debt1, amount1);\\n    if (burned0 != 0) IDebtToken(token0).burn(address(this), burned0);\\n    if (burned1 != 0) IDebtToken(token1).burn(address(this), burned1);\\n\\n    // payout whats left\\n    _safeTransfer(token0, to, amount0 - burned0);\\n    _safeTransfer(token1, to, amount1 - burned1);\\n\\n    balance0 = IERC20(token0).balanceOf(address(this));\\n    balance1 = IERC20(token1).balanceOf(address(this));\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // fee is returned in 1e6 (SWAP_FEE_PRECISION)\\n  function getSwapFee() external view override returns (uint32 swapFee) {\\n    // find stable coin\\n    address stableCoin = address(debtTokenManager.getStableCoin());\\n    address nonStableCoin = token0 == stableCoin ? token1 : token0;\\n    if (!debtTokenManager.isDebtToken(nonStableCoin)) return SWAP_BASE_FEE; // no dynamic fee if the pool is not an stable/stock pool\\n\\n    // query prices\\n    uint oraclePrice = priceFeed.getPrice(nonStableCoin);\\n    uint dexPrice = (nonStableCoin == token0)\\n      ? (reserve1 * DECIMAL_PRECISION) / reserve0\\n      : (reserve0 * DECIMAL_PRECISION) / reserve1; // todo does the token digits matter here?\\n\\n    if (oraclePrice < dexPrice) return SWAP_BASE_FEE;\\n    uint priceRatio = (oraclePrice * DECIMAL_PRECISION) / dexPrice;\\n    return uint32((priceRatio * SWAP_BASE_FEE) / DECIMAL_PRECISION); // todo missing real fee calculation\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n    _requireCallerIsOperations();\\n    if (amount0Out == 0 && amount1Out == 0) revert InsufficientOutputAmount();\\n    if (amount0Out > reserve0 || amount1Out > reserve1) revert InsufficientLiquidity();\\n\\n    uint balance0;\\n    uint balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      if (to == _token0 || to == _token1) revert InvalidTo();\\n\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      if (data.length > 0) ISwapCallee(to).swapCall(msg.sender, amount0Out, amount1Out, data);\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n\\n    uint amount0In = balance0 > reserve0 - amount0Out ? balance0 - (reserve0 - amount0Out) : 0;\\n    uint amount1In = balance1 > reserve1 - amount1Out ? balance1 - (reserve1 - amount1Out) : 0;\\n    if (amount0In == 0 && amount1In == 0) revert InsufficientInputAmount();\\n\\n    uint32 currentSwapFee = this.getSwapFee();\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint balance0Adjusted = balance0 * SWAP_FEE_PRECISION - (amount0In * currentSwapFee);\\n      uint balance1Adjusted = balance1 * SWAP_FEE_PRECISION - (amount1In * currentSwapFee);\\n      if (balance0Adjusted * balance1Adjusted < reserve0 * reserve1 * (SWAP_FEE_PRECISION ** 2)) revert K();\\n    }\\n\\n    _update(balance0, balance1, reserve0, reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, currentSwapFee, to);\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n    _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n  }\\n\\n  function _requireCallerIsOperations() internal view {\\n    if (msg.sender != address(operations)) revert NotFromSwapOperations();\\n  }\\n}\\n\",\"keccak256\":\"0x08a76e1d6ebc02da89871f78924f1cb6796c6461e26712d7092eb12f3cdf0cc0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614be980620000a66000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806377553ad41161011a578063b4c892e6116100ad578063e0abca0b1161007c578063e0abca0b1461044d578063e67729e314610460578063e6a439051461046a578063f2fde38b1461049e578063f92d34331461026c57600080fd5b8063b4c892e6146103e6578063ba1ffd03146103f9578063c9c6539614610427578063d06ca61f1461043a57600080fd5b80638d63c665116100e95780638d63c6651461039f5780638da5cb5b146103af5780639cd07615146103c0578063ad615dec146103d357600080fd5b806377553ad414610357578063794e57241461036a57806381ba9ed2146103795780638803dbee1461038c57600080fd5b80634a945f8d116101925780635733d58f116101615780635733d58f14610329578063574f2ba314610338578063715018a61461034057806372fe25aa1461034857600080fd5b80634a945f8d146102d0578063502afb04146102e55780635106046414610303578063522a86fe1461031657600080fd5b806338ed1739116101ce57806338ed17391461027a5780633d83908a1461028d57806344483d53146102a05780634870dd9a146102c857600080fd5b80631e3dd18b146102005780631f00ca7414610230578063240926691461025057806328d28b5b1461026c575b600080fd5b61021361020e366004612306565b6104b1565b6040516001600160a01b0390911681526020015b60405180910390f35b61024361023e36600461235a565b6104db565b604051610227919061242b565b61025e66b1a2bc2ec5000081565b604051908152602001610227565b61025e6611c37937e0800081565b61024361028836600461246f565b610645565b600154610213906001600160a01b031681565b6102b36102ae366004612511565b61081a565b60408051928352602083019190915201610227565b61025e60c881565b6102e36102de36600461256a565b610c1f565b005b6102ee610bb881565b60405163ffffffff9091168152602001610227565b61025e6103113660046125d8565b610ce6565b600454610213906001600160a01b031681565b61025e6714d1120d7b16000081565b60065461025e565b6102e3610d93565b61025e670de0b6b3a764000081565b600254610213906001600160a01b031681565b61025e670f43fc2c04ee000081565b61024361038736600461260e565b610da7565b61024361039a36600461246f565b610eb7565b61025e680ad78ebc5ac620000081565b6000546001600160a01b0316610213565b61025e6103ce3660046125d8565b610f55565b61025e6103e136600461266a565b611008565b6102436103f436600461260e565b611071565b61040c610407366004612696565b611147565b60408051938452602084019290925290820152606001610227565b610213610435366004612701565b61164e565b61024361044836600461235a565b6118cc565b600354610213906001600160a01b031681565b6102ee620f424081565b610213610478366004612701565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6102e36104ac36600461273a565b611a18565b600681815481106104c157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600282511015610500576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561051a5761051a61231f565b604051908082528060200260200182016040528015610543578160200160208202803683370190505b5090508281600183516105569190612774565b8151811061056657610566612787565b6020026020010181815250506000600183516105829190612774565b90505b801561063e57600080806105d58661059e600187612774565b815181106105ae576105ae612787565b60200260200101518786815181106105c8576105c8612787565b6020026020010151611a5b565b9250925092506106008585815181106105f0576105f0612787565b6020026020010151848484610f55565b8561060c600187612774565b8151811061061c5761061c612787565b60200260200101818152505050505080806106369061279d565b915050610585565b5092915050565b6060814281101561066957604051630407b05b60e31b815260040160405180910390fd5b6106a6888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118cc92505050565b91508682600184516106b89190612774565b815181106106c8576106c8612787565b602002602001015110156106ef576040516342301c2360e01b815260040160405180910390fd5b6107d08686600081811061070557610705612787565b905060200201602081019061071a919061273a565b33600560008a8a600081811061073257610732612787565b9050602002016020810190610747919061273a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a600181811061077c5761077c612787565b9050602002016020810190610791919061273a565b6001600160a01b039081168252602082019290925260400160009081205487519216918791906107c3576107c3612787565b6020026020010151611ba8565b61080f82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611ca3915050565b509695505050505050565b600080824281101561083f57604051630407b05b60e31b815260040160405180910390fd5b61088a6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6108948a8a611e8d565b6001600160a01b0390811660208481019190915291811683528b811660009081526005835260408082208d8416835290935282902054600154845193516348d4f6d960e11b81523360048201819052948416602482015291831693849363de7bf0a29391928e929116906391a9edb290604401602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906127b4565b60015460208801516040516348d4f6d960e11b81523360048201526001600160a01b0391821660248201529116906391a9edb290604401602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c091906127b4565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016080604051808303816000875af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906127cd565b60a08601526080850181905260608501919091526040840191909152151580610a68575060a082015115155b15610b9c5760408051600280825260608201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610a85579050509050604051806040016040528084600001516001600160a01b03168152602001846080015181525081600081518110610ae757610ae7612787565b6020026020010181905250604051806040016040528084602001516001600160a01b031681526020018460a0015181525081600181518110610b2b57610b2b612787565b60209081029190910101526002546040516362c5ff1160e11b81526001600160a01b039091169063c58bfe2290610b689033908590600401612852565b600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b50505050505b81516001600160a01b038c8116911614610bbf5781606001518260400151610bca565b816040015182606001515b909550935087851015610bf057604051638dc525d160e01b815260040160405180910390fd5b86841015610c115760405163ef71d09160e01b815260040160405180910390fd5b505050965096945050505050565b610c27611ff2565b610c308461201f565b610c398361201f565b610c428261201f565b610c4b8161201f565b600280546001600160a01b038681166001600160a01b031992831681179093556001805487831690841681179091556003805487841690851681179091556004805493871693909416831790935560408051948552602085019190915283019190915260608201527f1409d816dbb5d0b4943f2f83f2d88ae2e69c834a03e8cc4f41e3878f71f0f0bc9060800160405180910390a150505050565b600084600003610d095760405163098fb56160e01b815260040160405180910390fd5b831580610d14575082155b15610d325760405163bb55fd2760e01b815260040160405180910390fd5b6000610d4183620f4240612876565b610d519063ffffffff1687612893565b90506000610d5f8583612893565b9050600082610d71620f424089612893565b610d7b91906128aa565b9050610d8781836128bd565b98975050505050505050565b610d9b611ff2565b610da5600061206e565b565b604080516002808252606080830184529260009291906020830190803683370190505090508581600081518110610de057610de0612787565b60200260200101906001600160a01b031690816001600160a01b031681525050600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7791906128df565b81600181518110610e8a57610e8a612787565b60200260200101906001600160a01b031690816001600160a01b031681525050610d8788888388886120be565b60608142811015610edb57604051630407b05b60e31b815260040160405180910390fd5b610f18888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104db92505050565b91508682600081518110610f2e57610f2e612787565b602002602001015111156106ef5760405163e1b0da4f60e01b815260040160405180910390fd5b600084600003610f78576040516342301c2360e01b815260040160405180910390fd5b831580610f83575082155b15610fa15760405163bb55fd2760e01b815260040160405180910390fd5b6000620f4240610fb18787612893565b610fbb9190612893565b90506000610fcc84620f4240612876565b63ffffffff16610fdc8887612774565b610fe69190612893565b9050610ff281836128bd565b610ffd9060016128aa565b979650505050505050565b60008360000361102b57604051632ca2f52b60e11b815260040160405180910390fd5b821580611036575081155b156110545760405163bb55fd2760e01b815260040160405180910390fd5b8261105f8386612893565b61106991906128bd565b949350505050565b6040805160028082526060808301845292600092919060208301908036833750506004805460408051631bd817c960e01b815290519495506001600160a01b0390911693631bd817c99350818301926020928290030181865afa1580156110dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110091906128df565b8160008151811061111357611113612787565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110610e8a57610e8a612787565b6000806000834281101561116e57604051630407b05b60e31b815260040160405180910390fd5b6111b76040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031681600001906001600160a01b031690816001600160a01b03168152505060006001600160a01b031681600001516001600160a01b0316036112675760405163317f12fd60e21b815260040160405180910390fd5b6000806112748f8f611a5b565b5091509150816000148015611287575080155b15611297578c96508b9550611321565b60006112a48e8484611008565b90508c81116112d9578a8110156112ce5760405163ef71d09160e01b815260040160405180910390fd5b8d975095508561131f565b60006112e68e8486611008565b90508e8111156112f8576112f86128fc565b8c81101561131957604051638dc525d160e01b815260040160405180910390fd5b97508c96505b505b50506040516370a0823160e01b81523360048201526001600160a01b038e16906370a0823190602401602060405180830381865afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b91906127b4565b60208201526040516370a0823160e01b81523360048201526001600160a01b038d16906370a0823190602401602060405180830381865afa1580156113d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f891906127b4565b6040820152602081015161140c90866122df565b6060820152604081015161142090856122df565b608082015260608101516114349086612774565b60a082015260808101516114489085612774565b60c082015260a0810151151580611462575060c081015115155b156115935760408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161147f57905050905060405180604001604052808f6001600160a01b031681526020018360a00151815250816000815181106114dd576114dd612787565b602002602001018190525060405180604001604052808e6001600160a01b031681526020018360c001518152508160018151811061151d5761151d612787565b602090810291909101015260025482516040516362c942cf60e11b81526001600160a01b039092169163c592859e9161155f9133919086908e90600401612912565b600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b50505050505b6060810151156115b1576115b18d3383600001518460600151611ba8565b6080810151156115cf576115cf8c3383600001518460800151611ba8565b80516040516335313c2160e11b81523360048201526001600160a01b0390911690636a627842906024016020604051808303816000875af1158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c91906127b4565b92505050985098509895505050505050565b6000611658611ff2565b816001600160a01b0316836001600160a01b03160361168a57604051630bd969eb60e41b815260040160405180910390fd5b6000806116978585611e8d565b90925090506001600160a01b0382166116c35760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382811660009081526005602090815260408083208585168452909152902054161561170957604051633d77e89160e01b815260040160405180910390fd5b60006040518060200161171b906122f9565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560048054600354604051637c643b2f60e11b81526001600160a01b0389811694820194909452878416602482015291831660448301528216606482015291965086169063f8c8765e90608401600060405180830381600087803b1580156117e457600080fd5b505af11580156117f8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b60606002825110156118f1576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561190b5761190b61231f565b604051908082528060200260200182016040528015611934578160200160208202803683370190505b509050828160008151811061194b5761194b612787565b60200260200101818152505060005b600183516119689190612774565b81101561063e5760008060006119af86858151811061198957611989612787565b60200260200101518786600161199f91906128aa565b815181106105c8576105c8612787565b9250925092506119da8585815181106119ca576119ca612787565b6020026020010151848484610ce6565b856119e68660016128aa565b815181106119f6576119f6612787565b6020026020010181815250505050508080611a109061294f565b91505061195a565b611a20611ff2565b6001600160a01b038116611a4f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b611a588161206e565b50565b6001600160a01b03808316600090815260056020908152604080832085851684528252808320548151631a995bed60e31b815291519394859485949290911692839263d4cadf68926004808401938290030181865afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae69190612968565b9150600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d919061299c565b506001600160701b031691506001600160701b031691506000611b708989611e8d565b509050806001600160a01b0316896001600160a01b031614611b93578183611b96565b82825b909a9099509497509395505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611c0c9190612a07565b6000604051808303816000865af19150503d8060008114611c49576040519150601f19603f3d011682016040523d82523d6000602084013e611c4e565b606091505b5091509150811580611c7d575060008151118015611c7d575080806020019051810190611c7b9190612a23565b155b15611c9b57604051631e4e7d0960e21b815260040160405180910390fd5b505050505050565b60005b60018351611cb49190612774565b811015611e8757600080848381518110611cd057611cd0612787565b602002602001015185846001611ce691906128aa565b81518110611cf657611cf6612787565b6020026020010151915091506000611d0e8383611e8d565b509050600087611d1f8660016128aa565b81518110611d2f57611d2f612787565b60200260200101519050600080836001600160a01b0316866001600160a01b031614611d5d57826000611d61565b6000835b91509150600060028a51611d759190612774565b8810611d815788611ddf565b6001600160a01b0386166000908152600560205260408120908b611da68b60026128aa565b81518110611db657611db6612787565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054165b6001600160a01b0388811660009081526005602090815260408083208b8516845282528083205481519384529183019081905263022c0d9f60e01b905292935091169063022c0d9f90611e3b9086908690869060248101612a45565b600060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b50505050505050505050508080611e7f9061294f565b915050611ca6565b50505050565b600080826001600160a01b0316846001600160a01b031603611ec257604051630bd969eb60e41b815260040160405180910390fd5b6001600160a01b0384161580611edf57506001600160a01b038316155b15611efd5760405163d92e233d60e01b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906128df565b9050806001600160a01b0316856001600160a01b031603611f9d5784849250925050611feb565b806001600160a01b0316846001600160a01b031603611fc25783859250925050611feb565b836001600160a01b0316856001600160a01b031610611fe2578385611fe5565b84845b92509250505b9250929050565b6000546001600160a01b03163314610da55760405163118cdaa760e01b8152336004820152602401611a46565b6001600160a01b0381166120465760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361206a57604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600060056000866000815181106120d9576120d9612787565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008660018151811061211657612116612787565b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541690508061215e5760405163317f12fd60e21b815260040160405180910390fd5b61216887866118cc565b915085826001845161217a9190612774565b8151811061218a5761218a612787565b602002602001015110156121b1576040516342301c2360e01b815260040160405180910390fd5b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816121c857905050905060405180604001604052808760008151811061220f5761220f612787565b60200260200101516001600160a01b031681526020018460008151811061223857612238612787565b60200260200101518152508160008151811061225657612256612787565b60209081029190910101526002546040516362c942cf60e11b81526001600160a01b039091169063c592859e90612297903390869086908a90600401612912565b600060405180830381600087803b1580156122b157600080fd5b505af11580156122c5573d6000803e3d6000fd5b505050506122d4838787611ca3565b505095945050505050565b60008183106122ee57816122f0565b825b90505b92915050565b61211e80612a9683390190565b60006020828403121561231857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a5857600080fd5b803561235581612335565b919050565b6000806040838503121561236d57600080fd5b8235915060208084013567ffffffffffffffff8082111561238d57600080fd5b818601915086601f8301126123a157600080fd5b8135818111156123b3576123b361231f565b8060051b604051601f19603f830116810181811085821117156123d8576123d861231f565b6040529182528482019250838101850191898311156123f657600080fd5b938501935b8285101561241b5761240c8561234a565b845293850193928501926123fb565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561246357835183529284019291840191600101612447565b50909695505050505050565b60008060008060008060a0878903121561248857600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156124ae57600080fd5b818901915089601f8301126124c257600080fd5b8135818111156124d157600080fd5b8a60208260051b85010111156124e657600080fd5b6020830196508095505050506124fe6060880161234a565b9150608087013590509295509295509295565b60008060008060008060c0878903121561252a57600080fd5b863561253581612335565b9550602087013561254581612335565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000806000806080858703121561258057600080fd5b843561258b81612335565b9350602085013561259b81612335565b925060408501356125ab81612335565b915060608501356125bb81612335565b939692955090935050565b63ffffffff81168114611a5857600080fd5b600080600080608085870312156125ee57600080fd5b84359350602085013592506040850135915060608501356125bb816125c6565b60008060008060008060c0878903121561262757600080fd5b8635955060208701359450604087013561264081612335565b9350606087013561265081612335565b9598949750929560808101359460a0909101359350915050565b60008060006060848603121561267f57600080fd5b505081359360208301359350604090920135919050565b600080600080600080600080610100898b0312156126b357600080fd5b88356126be81612335565b975060208901356126ce81612335565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b6000806040838503121561271457600080fd5b823561271f81612335565b9150602083013561272f81612335565b809150509250929050565b60006020828403121561274c57600080fd5b813561275781612335565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156122f3576122f361275e565b634e487b7160e01b600052603260045260246000fd5b6000816127ac576127ac61275e565b506000190190565b6000602082840312156127c657600080fd5b5051919050565b600080600080608085870312156127e357600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081518084526020808501945080840160005b8381101561284757815180516001600160a01b031688528301518388015260409096019590820190600101612817565b509495945050505050565b6001600160a01b038316815260406020820181905260009061106990830184612803565b63ffffffff82811682821603908082111561063e5761063e61275e565b80820281158282048414176122f3576122f361275e565b808201808211156122f3576122f361275e565b6000826128da57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156128f157600080fd5b815161275781612335565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0385811682528416602082015260806040820181905260009061293e90830185612803565b905082606083015295945050505050565b6000600182016129615761296161275e565b5060010190565b60006020828403121561297a57600080fd5b8151612757816125c6565b80516001600160701b038116811461235557600080fd5b6000806000606084860312156129b157600080fd5b6129ba84612985565b92506129c860208501612985565b915060408401516129d8816125c6565b809150509250925092565b60005b838110156129fe5781810151838201526020016129e6565b50506000910152565b60008251612a198184602087016129e3565b9190910192915050565b600060208284031215612a3557600080fd5b8151801515811461275757600080fd5b84815283602082015260018060a01b03831660408201526080606082015260008251806080840152612a7e8160a08501602087016129e3565b601f01601f19169190910160a0019594505050505056fe60806040526001600d5534801561001557600080fd5b5060408051808201825260048152630537761760e41b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbce316f0d9d2a3affa97de1d99bb2aac0538e2666d0d8545545ead241ef0ccab818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561201c806101026000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806370a0823111610125578063bc25cf77116100ad578063de7bf0a21161007c578063de7bf0a2146104c6578063e67729e3146104f9578063f8c8765e14610503578063f92d3433146102e8578063fff6cae91461051657600080fd5b8063bc25cf771461046d578063d21220a714610480578063d4cadf6814610493578063dd62ed3e1461049b57600080fd5b80637ecebe00116100f45780637ecebe00146103fe5780638b33b4b21461041e5780638d63c6651461043157806395d89b4114610441578063ba9a7a561461046457600080fd5b806370a08231146103ad57806372fe25aa146103cd578063741bef1a146103dc578063794e5724146103ef57600080fd5b8063313ce567116101a8578063522a86fe11610177578063522a86fe146103665780635733d58f146103795780635909c0d5146103885780635a3d5493146103915780636a6278421461039a57600080fd5b8063313ce5671461031d5780633644e515146103375780634870dd9a14610340578063502afb041461034857600080fd5b806318160ddd116101e457806318160ddd146102c357806324092669146102da57806328d28b5b146102e857806330adf81f146102f657600080fd5b8063022c0d9f1461021657806306fdde031461022b5780630902f1ac146102645780630dfe168114610298575b600080fd5b610229610224366004611ac1565b61051e565b005b61024e604051806040016040528060048152602001630537761760e41b81525081565b60405161025b9190611b7b565b60405180910390f35b61026c610a14565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161025b565b6008546102ab906001600160a01b031681565b6040516001600160a01b03909116815260200161025b565b6102cc60005481565b60405190815260200161025b565b6102cc66b1a2bc2ec5000081565b6102cc6611c37937e0800081565b6102cc7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610325601281565b60405160ff909116815260200161025b565b6102cc60035481565b6102cc60c881565b610351610bb881565b60405163ffffffff909116815260200161025b565b6007546102ab906001600160a01b031681565b6102cc6714d1120d7b16000081565b6102cc600b5481565b6102cc600c5481565b6102cc6103a8366004611bae565b610a3e565b6102cc6103bb366004611bae565b60016020526000908152604090205481565b6102cc670de0b6b3a764000081565b6006546102ab906001600160a01b031681565b6102cc670f43fc2c04ee000081565b6102cc61040c366004611bae565b60046020526000908152604090205481565b6005546102ab906001600160a01b031681565b6102cc680ad78ebc5ac620000081565b61024e604051806040016040528060048152602001630535741560e41b81525081565b6102cc6103e881565b61022961047b366004611bae565b610c9d565b6009546102ab906001600160a01b031681565b610351610db1565b6102cc6104a9366004611bd2565b600260209081526000928352604080842090915290825290205481565b6104d96104d4366004611c0b565b611038565b60408051948552602085019390935291830152606082015260800161025b565b610351620f424081565b610229610511366004611c46565b611431565b6102296114ac565b600d54600003610541576040516303cb96db60e21b815260040160405180910390fd5b6000600d5561054e6115d1565b8415801561055a575083155b15610578576040516342301c2360e01b815260040160405180910390fd5b600a546001600160701b03168511806105a25750600a54600160701b90046001600160701b031684115b156105c05760405163bb55fd2760e01b815260040160405180910390fd5b60085460095460009182916001600160a01b03918216919081169087168214806105fb5750806001600160a01b0316876001600160a01b0316145b1561061957604051630521f43160e31b815260040160405180910390fd5b881561062a5761062a82888b6115fe565b871561063b5761063b81888a6115fe565b84156106a857604051631bf35dcd60e31b81526001600160a01b0388169063df9aee68906106759033908d908d908c908c90600401611ca2565b600060405180830381600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190611cee565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611cee565b600a549093506000925061079a915089906001600160701b0316611d1d565b83116107a75760006107c8565b600a546107be9089906001600160701b0316611d1d565b6107c89084611d1d565b600a549091506000906107ec908990600160701b90046001600160701b0316611d1d565b83116107f9576000610821565b600a54610817908990600160701b90046001600160701b0316611d1d565b6108219084611d1d565b90508115801561082f575080155b1561084d5760405163098fb56160e01b815260040160405180910390fd5b6000306001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190611d30565b905060006108c563ffffffff831685611d56565b6108d2620f424088611d56565b6108dc9190611d1d565b905060006108f063ffffffff841685611d56565b6108fd620f424088611d56565b6109079190611d1d565b90506109176002620f4240611e7e565b600a5463ffffffff9190911690610940906001600160701b03600160701b820481169116611e93565b61094a9190611e93565b6001600160701b031661095d8284611d56565b101561097c5760405163a932492f60e01b815260040160405180910390fd5b5050600a546109a290869086906001600160701b0380821691600160701b900416611720565b60408051848152602081018490529081018b9052606081018a905263ffffffff821660808201526001600160a01b0389169033907f485fd455f44df610bbdb723335bb24947ffc723ae537fb9f82dc8e5ee6f63b019060a00160405180910390a350506001600d555050505050505050565b600a546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000600d54600003610a63576040516303cb96db60e21b815260040160405180910390fd5b6000600d55610a706115d1565b600080610a7b610a14565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af19190611cee565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190611cee565b90506000610b7a6001600160701b03861684611d1d565b90506000610b916001600160701b03861684611d1d565b60008054919250819003610bd2576103e8610bb4610baf8486611d56565b6118e5565b610bbe9190611d1d565b9750610bcd60006103e8611955565b610c19565b610c166001600160701b038816610be98386611d56565b610bf39190611ed4565b6001600160701b038816610c078486611d56565b610c119190611ed4565b6119de565b97505b87600003610c3a57604051633489be7560e21b815260040160405180910390fd5b610c448989611955565b610c5085858989611720565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600d55509395945050505050565b600d54600003610cc0576040516303cb96db60e21b815260040160405180910390fd5b6000600d55600854600954600a546040516370a0823160e01b81523060048201526001600160a01b039384169390921691610d5f91849186916001600160701b03169083906370a08231906024015b602060405180830381865afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d509190611cee565b610d5a9190611d1d565b6115fe565b600a546040516370a0823160e01b8152306004820152610da79183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401610d0f565b50506001600d5550565b600080600760009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190611ee8565b6008549091506000906001600160a01b03808416911614610e57576008546001600160a01b0316610e64565b6009546001600160a01b03165b600754604051633803473960e01b81526001600160a01b038084166004830152929350911690633803473990602401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed49190611f05565b610ee257610bb89250505090565b6006546040516341976e0960e01b81526001600160a01b03838116600483015260009216906341976e0990602401602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190611cee565b6008549091506000906001600160a01b03848116911614610fa457600a546001600160701b03600160701b8204811691610f9591670de0b6b3a76400009116611d56565b610f9f9190611ed4565b610fd8565b600a546001600160701b0380821691610fce91670de0b6b3a764000091600160701b900416611d56565b610fd89190611ed4565b905080821015610fee57610bb894505050505090565b600081611003670de0b6b3a764000085611d56565b61100d9190611ed4565b9050670de0b6b3a7640000611024610bb883611d56565b61102e9190611ed4565b9550505050505090565b600080600080600d54600003611061576040516303cb96db60e21b815260040160405180910390fd5b6000600d5561106e6115d1565b600080611079610a14565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156110cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ef9190611cee565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111619190611cee565b60005490915080611172848e611d56565b61117c9190611ed4565b985080611189838e611d56565b6111939190611ed4565b97508815806111a0575087155b156111be5760405163749383ad60e01b815260040160405180910390fd5b6111c88d8d6119f8565b506111d38a896119de565b95506111df89886119de565b9450851561124c57600854604051632770a7eb60e21b8152306004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561123357600080fd5b505af1158015611247573d6000803e3d6000fd5b505050505b84156112b757600954604051632770a7eb60e21b8152306004820152602481018790526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561129e57600080fd5b505af11580156112b2573d6000803e3d6000fd5b505050505b6008546112d2906001600160a01b03168d610d5a898c611d1d565b6009546112ed906001600160a01b03168d610d5a888b611d1d565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190611cee565b6009546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a0823190602401602060405180830381865afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190611cee565b90506113d482828686611720565b60408051898152602081018990526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a3505050506001600d81905550945094509450949050565b6005546001600160a01b0316331461145c57604051631dd2188d60e31b815260040160405180910390fd5b600880546001600160a01b039586166001600160a01b0319918216179091556009805494861694821694909417909355600780549285169284169290921790915560068054919093169116179055565b600d546000036114cf576040516303cb96db60e21b815260040160405180910390fd5b6000600d556008546040516370a0823160e01b81523060048201526115ca916001600160a01b0316906370a0823190602401602060405180830381865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190611cee565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190611cee565b600a546001600160701b0380821691600160701b900416611720565b6001600d55565b6005546001600160a01b031633146115fc5760405163091664d760e11b815260040160405180910390fd5b565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1790529151600092839287169161168a9190611f27565b6000604051808303816000865af19150503d80600081146116c7576040519150601f19603f3d011682016040523d82523d6000602084013e6116cc565b606091505b50915091508115806116fb5750600081511180156116fb5750808060200190518101906116f99190611f05565b155b15611719576040516312171d8360e31b815260040160405180910390fd5b5050505050565b6001600160701b0384118061173b57506001600160701b0383115b1561175957604051631a93c68960e11b815260040160405180910390fd5b600061176a64010000000042611f43565b600a5490915060009061178a90600160e01b900463ffffffff1683611f57565b905060008163ffffffff161180156117aa57506001600160701b03841615155b80156117be57506001600160701b03831615155b1561184d578063ffffffff166117e6856117d786611a7b565b6001600160e01b031690611a94565b6001600160e01b03166117f99190611d56565b600b600082825461180a9190611f7b565b909155505063ffffffff8116611823846117d787611a7b565b6001600160e01b03166118369190611d56565b600c60008282546118479190611f7b565b90915550505b600a805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6000600382111561194657508060006118ff600283611ed4565b61190a906001611f7b565b90505b81811015611940579050806002816119258186611ed4565b61192f9190611f7b565b6119399190611ed4565b905061190d565b50919050565b8115611950575060015b919050565b806000808282546119669190611f7b565b90915550506001600160a01b03821660009081526001602052604081208054839290611993908490611f7b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106119ed57816119ef565b825b90505b92915050565b6001600160a01b03821660009081526001602052604081208054839290611a20908490611d1d565b9250508190555080600080828254611a389190611d1d565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016119d2565b60006119f2600160701b6001600160701b038416611f8e565b60006119ef6001600160701b03831684611fc0565b6001600160a01b0381168114611abe57600080fd5b50565b600080600080600060808688031215611ad957600080fd5b85359450602086013593506040860135611af281611aa9565b9250606086013567ffffffffffffffff80821115611b0f57600080fd5b818801915088601f830112611b2357600080fd5b813581811115611b3257600080fd5b896020828501011115611b4457600080fd5b9699959850939650602001949392505050565b60005b83811015611b72578181015183820152602001611b5a565b50506000910152565b6020815260008251806020840152611b9a816040850160208701611b57565b601f01601f19169190910160400192915050565b600060208284031215611bc057600080fd5b8135611bcb81611aa9565b9392505050565b60008060408385031215611be557600080fd5b8235611bf081611aa9565b91506020830135611c0081611aa9565b809150509250929050565b60008060008060808587031215611c2157600080fd5b8435611c2c81611aa9565b966020860135965060408601359560600135945092505050565b60008060008060808587031215611c5c57600080fd5b8435611c6781611aa9565b93506020850135611c7781611aa9565b92506040850135611c8781611aa9565b91506060850135611c9781611aa9565b939692955090935050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600060208284031215611d0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156119f2576119f2611d07565b600060208284031215611d4257600080fd5b815163ffffffff81168114611bcb57600080fd5b80820281158282048414176119f2576119f2611d07565b600181815b80851115611daa578163ffffffff04821115611d9057611d90611d07565b80851615611d9d57918102915b93841c9390800290611d72565b509250929050565b600082611dc1575060016119f2565b81611dce575060006119f2565b8160018114611de45760028114611dee57611e1f565b60019150506119f2565b60ff841115611dff57611dff611d07565b6001841b915063ffffffff821115611e1957611e19611d07565b506119f2565b5060208310610133831016604e8410600b8410161715611e56575081810a63ffffffff811115611e5157611e51611d07565b6119f2565b611e608383611d6d565b8063ffffffff04821115611e7657611e76611d07565b029392505050565b60006119ef60ff841663ffffffff8416611db2565b6001600160701b03818116838216028082169190828114611eb657611eb6611d07565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082611ee357611ee3611ebe565b500490565b600060208284031215611efa57600080fd5b8151611bcb81611aa9565b600060208284031215611f1757600080fd5b81518015158114611bcb57600080fd5b60008251611f39818460208701611b57565b9190910192915050565b600082611f5257611f52611ebe565b500690565b63ffffffff828116828216039080821115611f7457611f74611d07565b5092915050565b808201808211156119f2576119f2611d07565b6001600160e01b03828116828216818102831692918115828504821417611fb757611fb7611d07565b50505092915050565b60006001600160e01b0383811680611fda57611fda611ebe565b9216919091049291505056fea2646970667358221220c08ad3bb98df300c540313d160ba8e76f6404d265fdde7063cab5ce5c33bfe4764736f6c63430008140033a2646970667358221220fa81b47fcf7f5aa45760c4f7d78d5921771da63b07e862c7ae2365305787772264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16083,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)8742"
      },
      {
        "astId": 16086,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBorrowerOperations)6870"
      },
      {
        "astId": 16088,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16091,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDebtTokenManager)7138"
      },
      {
        "astId": 16097,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "getPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 16100,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "allPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBorrowerOperations)6870": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)7138": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)8742": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}