{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [],
      "name": "ExcessiveInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdenticalAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairRequiresStable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerOperations",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtTokenManager",
          "type": "address"
        }
      ],
      "name": "SwapOperationsInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_mintMeta",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_mintMeta",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "addLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stableToMintIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_mintMeta",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "openLongPosition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtToMintIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_mintMeta",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "openShortPosition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapExactTokensForTokensWithPermit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f79a1a7c2c5c6871a2c34c23fb20151fd73e0b0b4b17cea2e475a17a10ae8af",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "4741597",
    "logsBloom": "0x
    "blockHash": "0x9409941a1db72d682e860d1ea0f9f38667e5ea8db0308c60b4ba0a17919f308d",
    "transactionHash": "0x5f79a1a7c2c5c6871a2c34c23fb20151fd73e0b0b4b17cea2e475a17a10ae8af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x5f79a1a7c2c5c6871a2c34c23fb20151fd73e0b0b4b17cea2e475a17a10ae8af",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9409941a1db72d682e860d1ea0f9f38667e5ea8db0308c60b4ba0a17919f308d"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "4741597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairRequiresStable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerOperations\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtTokenManager\",\"type\":\"address\"}],\"name\":\"SwapOperationsInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_mintMeta\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_mintMeta\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"addLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableToMintIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_mintMeta\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"openLongPosition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtToMintIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_mintMeta\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"openShortPosition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapExactTokensForTokensWithPermit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapOperations.sol\":\"SwapOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Dependencies/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n  uint224 constant Q112 = 2 ** 112;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\",\"keccak256\":\"0x3f1c23c3f32d47e163112e14800b8418b3c25111f3a4ecd214060b212675e284\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations is IBBase {\\n  // --- Events ---\\n\\n  event BorrowerOperationsInitialized(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _stabilityPoolAddress,\\n    address _reservePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _swapOperationsAddress,\\n    address _sortedTrovesAddress,\\n    address _collSurplusPoolAddress\\n  );\\n  event TroveCreated(address _borrower, TokenAmount[] _colls);\\n  event PaidBorrowingFee(address indexed _borrower, uint amount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromStabilityPool();\\n  error NotFromSwapOps();\\n  error CollWithdrawPermittedInRM();\\n  error ICR_lt_MCR();\\n  error ICR_lt_CCR();\\n  error TCR_lt_CCR();\\n  error ICRDecreasedInRM();\\n  error MaxFee_gt_100_InRM();\\n  error MaxFee_out_Range();\\n  error Repaid_gt_CurrentDebt();\\n  error TroveClosedOrNotExist();\\n  error ActiveTrove();\\n  error NotAllowedInRecoveryMode();\\n  error NotBorrower();\\n  error WithdrawAmount_gt_Coll();\\n  error ZeroDebtChange();\\n  error InsufficientDebtToRepay();\\n  error ZeroDebtRepay();\\n\\n  // --- Functions ---\\n\\n  function openTrove(TokenAmount[] memory _colls) external;\\n\\n  function openTroveWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external;\\n\\n  function addColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function addCollWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function withdrawColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function increaseDebt(address _borrower, address _to, TokenAmount[] memory _debts, MintMeta memory _meta) external;\\n\\n  function repayDebt(TokenAmount[] memory _debts, address _upperHint, address _lowerHint) external;\\n\\n  function repayDebtFromPoolBurn(\\n    address borrower,\\n    TokenAmount[] memory _debts,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function closeTrove() external;\\n\\n  function claimCollateral() external;\\n\\n  function getCompositeDebt(DebtTokenAmount[] memory _debts) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xaa9829fa8ae2af0978526abfbdf43022148e77223ddd9630d286da36b30c17e7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISwapCallee {\\n  function swapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf1bb45b6dde65533116206f2b5a0aab8263183586e904629267083e7c2c1d439\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISwapERC20 {\\n  error PermitExpired();\\n  error InvalidSignature();\\n\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x869d47bf84c81107b9d0b5450789c6b662ef55a9404d5ecff2bbf6eaa6723524\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface ISwapOperations is IBBase {\\n  error Forbidden();\\n  error IdenticalAddresses();\\n  error PairExists();\\n  error Expired();\\n  error PairDoesNotExist();\\n  error InsufficientAAmount();\\n  error InsufficientBAmount();\\n  error InsufficientInputAmount();\\n  error InsufficientOutputAmount();\\n  error ExcessiveInputAmount();\\n  error InsufficientLiquidity();\\n  error InsufficientAmount();\\n  error InvalidPath();\\n  error TransferFromFailed();\\n  error PairRequiresStable();  \\n\\n  event SwapOperationsInitialized(\\n    address borrowerOperations,\\n    address troveManager,\\n    address priceFeed,\\n    address debtTokenManager\\n  );\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  struct RemoveLiquidtyPermitParams {\\n    address tokenA;\\n    address tokenB;\\n    uint liquidity;\\n    uint amountAMin;\\n    uint amountBMin;\\n    uint deadline;\\n    bool approveMax;\\n    address _upperHint;\\n    address _lowerHint;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  // **** GETTER ****\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  // **** OPERATIONS ****\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  function addLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    MintMeta memory _mintMeta,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  // automatically repays any related open loans from the borrower (msg.sender)\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address _upperHint,\\n    address _lowerHint,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForTokensWithPermit(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint[] memory amounts);\\n\\n  function openLongPosition(\\n    uint stableToMintIn,\\n    uint debtOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function openShortPosition(\\n    uint debtToMintIn,\\n    uint stableOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa3b363940264f8060c98e663ecf2407173f727ce9a734b2d24b2ef1701f5e6c6\",\"license\":\"MIT\"},\"contracts/Interfaces/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './ISwapERC20.sol';\\n\\ninterface ISwapPair is ISwapERC20 {\\n  error Locked();\\n  error TransferFailed();\\n  error Forbidden();\\n  error Overflow();\\n  error InsufficientLiquidityMinted();\\n  error InsufficientLiquidityBurned();\\n  error InsufficientInputAmount();\\n  error InsufficientOutputAmount();\\n  error InsufficientLiquidity();\\n  error InvalidTo();\\n  error K();\\n  error NotFromSwapOperations();\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    uint32 currentSwapFee,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  // **** GETTER ****\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function getSwapFee() external view returns (uint32 swapFee);\\n\\n  // **** OPERATIONS ****\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(\\n    address to,\\n    uint liquidity,\\n    uint debt0,\\n    uint debt1\\n  ) external returns (uint amount0, uint amount1, uint burned0, uint burned1);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address, address, address) external;\\n}\\n\",\"keccak256\":\"0x4103f8dfd4e77e4d4fd5512203927ec722f8045cc8e0e7bae21fdbf9bee8b32e\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/SwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './Interfaces/ISwapERC20.sol';\\n\\ncontract SwapERC20 is ISwapERC20 {\\n  string public constant name = 'Swap';\\n  string public constant symbol = 'SWAP';\\n  uint8 public constant decimals = 18;\\n  uint public totalSupply;\\n  mapping(address => uint) public balanceOf;\\n  mapping(address => mapping(address => uint)) public allowance;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint) public nonces;\\n\\n  constructor() {\\n    uint chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256(bytes(name)),\\n        keccak256(bytes('1')),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _mint(address to, uint value) internal {\\n    totalSupply += value;\\n    balanceOf[to] += value;\\n    emit Transfer(address(0), to, value);\\n  }\\n\\n  function _burn(address from, uint value) internal {\\n    balanceOf[from] -= value;\\n    totalSupply -= value;\\n    emit Transfer(from, address(0), value);\\n  }\\n}\\n\",\"keccak256\":\"0xd13454b818b8b5f5b550f5c71be45e8396d0cf0bd4582a069b3f2a03ea00d077\",\"license\":\"MIT\"},\"contracts/SwapOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './SwapPair.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Interfaces/ISwapOperations.sol';\\nimport './Interfaces/IBorrowerOperations.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/ITroveManager.sol';\\n\\ncontract SwapOperations is ISwapOperations, Ownable(msg.sender), CheckContract, LiquityBase {\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IBorrowerOperations public borrowerOperations;\\n  address public priceFeedAddress;\\n  IDebtTokenManager public debtTokenManager;\\n\\n  // --- Data structures ---\\n\\n  mapping(address => mapping(address => address)) public getPair;\\n  address[] public allPairs;\\n\\n  // --- Dependency setters ---\\n\\n  function setAddresses(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManager\\n  ) external onlyOwner {\\n    checkContract(_borrowerOperationsAddress);\\n    checkContract(_troveManagerAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManager);\\n\\n    borrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    priceFeedAddress = _priceFeedAddress;\\n    debtTokenManager = IDebtTokenManager(_debtTokenManager);\\n\\n    emit SwapOperationsInitialized(\\n      _borrowerOperationsAddress,\\n      _troveManagerAddress,\\n      _priceFeedAddress,\\n      _debtTokenManager\\n    );\\n\\n    // Disabled to create pairs later\\n    // renounceOwnership();\\n  }\\n\\n  modifier ensure(uint deadline) {\\n    if (deadline < block.timestamp) revert Expired();\\n    _;\\n  }\\n\\n  // --- Pair Management ---\\n\\n  function allPairsLength() external view returns (uint) {\\n    return allPairs.length;\\n  }\\n\\n  function createPair(address tokenA, address tokenB) external onlyOwner returns (address pair) {\\n    if (tokenA == tokenB) revert IdenticalAddresses();\\n    if (tokenA != address(debtTokenManager.getStableCoin()) && tokenB != address(debtTokenManager.getStableCoin()))\\n      revert PairRequiresStable();\\n\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    if (token0 == address(0)) revert ZeroAddress();\\n    if (getPair[token0][token1] != address(0)) revert PairExists(); // single check is sufficient\\n\\n    bytes memory bytecode = type(SwapPair).creationCode;\\n    bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n    assembly {\\n      pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n    }\\n\\n    ISwapPair(pair).initialize(token0, token1, address(debtTokenManager), priceFeedAddress);\\n    getPair[token0][token1] = pair;\\n    getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n    allPairs.push(pair);\\n\\n    emit PairCreated(token0, token1, pair, allPairs.length);\\n  }\\n\\n  // --- Getter functions ---\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\n    if (amountA == 0) revert InsufficientAmount();\\n    if (reserveA == 0 || reserveB == 0) revert InsufficientLiquidity();\\n\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) public pure virtual override returns (uint amountOut) {\\n    if (amountIn == 0) revert InsufficientInputAmount();\\n    if (reserveIn == 0 || reserveOut == 0) revert InsufficientLiquidity();\\n\\n    uint amountInWithFee = amountIn * (SWAP_FEE_PRECISION - swapFee);\\n    uint numerator = amountInWithFee * reserveOut;\\n    uint denominator = reserveIn * SWAP_FEE_PRECISION + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut,\\n    uint32 swapFee\\n  ) public pure virtual override returns (uint amountIn) {\\n    if (amountOut == 0) revert InsufficientOutputAmount();\\n    if (reserveIn == 0 || reserveOut == 0) revert InsufficientLiquidity();\\n\\n    uint numerator = reserveIn * amountOut * SWAP_FEE_PRECISION;\\n    uint denominator = (reserveOut - amountOut) * (SWAP_FEE_PRECISION - swapFee);\\n    amountIn = (numerator / denominator) + 1;\\n  }\\n\\n  function getAmountsOut(\\n    uint amountIn,\\n    address[] memory path\\n  ) public view virtual override returns (uint[] memory amounts) {\\n    if (path.length < 2) revert InvalidPath();\\n\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n      (uint reserveIn, uint reserveOut, uint32 swapFee) = getReserves(path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, swapFee);\\n    }\\n  }\\n\\n  function getAmountsIn(\\n    uint amountOut,\\n    address[] memory path\\n  ) public view virtual override returns (uint[] memory amounts) {\\n    if (path.length < 2) revert InvalidPath();\\n\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n      (uint reserveIn, uint reserveOut, uint32 swapFee) = getReserves(path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, swapFee);\\n    }\\n  }\\n\\n  // --- Liquidity functions ---\\n\\n  struct ProvidingVars {\\n    address pair;\\n    uint senderBalanceA;\\n    uint senderBalanceB;\\n    uint fromBalanceA;\\n    uint fromBalanceB;\\n    uint fromMintA;\\n    uint fromMintB;\\n  }\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n    ProvidingVars memory vars;\\n    vars.pair = getPair[tokenA][tokenB];\\n    if (vars.pair == address(0)) revert PairDoesNotExist();\\n\\n    {\\n      (uint reserveA, uint reserveB, ) = getReserves(tokenA, tokenB);\\n      if (reserveA == 0 && reserveB == 0) {\\n        (amountA, amountB) = (amountADesired, amountBDesired);\\n      } else {\\n        uint amountBOptimal = quote(amountADesired, reserveA, reserveB);\\n        if (amountBOptimal <= amountBDesired) {\\n          if (amountBOptimal < amountBMin) revert InsufficientBAmount();\\n          (amountA, amountB) = (amountADesired, amountBOptimal);\\n        } else {\\n          uint amountAOptimal = quote(amountBDesired, reserveB, reserveA);\\n          assert(amountAOptimal <= amountADesired);\\n          if (amountAOptimal < amountAMin) revert InsufficientAAmount();\\n          (amountA, amountB) = (amountAOptimal, amountBDesired);\\n        }\\n      }\\n    }\\n\\n    vars.senderBalanceA = IERC20(tokenA).balanceOf(msg.sender);\\n    vars.senderBalanceB = IERC20(tokenB).balanceOf(msg.sender);\\n\\n    vars.fromBalanceA = LiquityMath._min(vars.senderBalanceA, amountA);\\n    vars.fromBalanceB = LiquityMath._min(vars.senderBalanceB, amountB);\\n\\n    vars.fromMintA = amountA - vars.fromBalanceA;\\n    vars.fromMintB = amountB - vars.fromBalanceB;\\n\\n    // mint new tokens if the sender did not have enough\\n    if (vars.fromMintA != 0 || vars.fromMintB != 0) {\\n      TokenAmount[] memory debtsToMint;\\n      if (vars.fromMintA != 0 && vars.fromMintB != 0) {\\n        // mint both\\n        debtsToMint = new TokenAmount[](2);\\n        debtsToMint[0] = TokenAmount(tokenA, vars.fromMintA);\\n        debtsToMint[1] = TokenAmount(tokenB, vars.fromMintB);\\n      } else {   \\n        // mint only 1 token    \\n        debtsToMint = new TokenAmount[](1);\\n        debtsToMint[0] = (vars.fromMintA != 0\\n          ? TokenAmount(tokenA, vars.fromMintA) // mint A\\n          : TokenAmount(tokenB, vars.fromMintB) // mint B\\n        );\\n      }\\n      borrowerOperations.increaseDebt(msg.sender, vars.pair, debtsToMint, _mintMeta);\\n    }\\n\\n    // transfer tokens sourced from senders balance\\n    if (vars.fromBalanceA != 0) safeTransferFrom(tokenA, msg.sender, vars.pair, vars.fromBalanceA);\\n    if (vars.fromBalanceB != 0) safeTransferFrom(tokenB, msg.sender, vars.pair, vars.fromBalanceB);\\n\\n    liquidity = ISwapPair(vars.pair).mint(msg.sender);\\n  }\\n\\n  function addLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    MintMeta memory _mintMeta,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external returns (uint amountA, uint amountB, uint liquidity) {\\n    IERC20Permit(tokenA).permit(msg.sender, address(this), amountADesired, deadline, v[0], r[0], s[0]);\\n    IERC20Permit(tokenB).permit(msg.sender, address(this), amountBDesired, deadline, v[1], r[1], s[1]);\\n    return addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, _mintMeta, deadline);\\n  }\\n\\n  struct RemovalVars {\\n    address token0;\\n    address token1;\\n    uint amount0;\\n    uint amount1;\\n    uint burned0;\\n    uint burned1;\\n  }\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address _upperHint,\\n    address _lowerHint,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n    RemovalVars memory vars;\\n    (vars.token0, vars.token1) = sortTokens(tokenA, tokenB);\\n\\n    // receive tokens from pair\\n    address pair = getPair[tokenA][tokenB];\\n    (vars.amount0, vars.amount1, vars.burned0, vars.burned1) = ISwapPair(pair).burn(\\n      msg.sender,\\n      liquidity,\\n      // check if there are some debts which has to be repaid first\\n      troveManager.getTroveRepayableDebt(msg.sender, vars.token0, false),\\n      troveManager.getTroveRepayableDebt(msg.sender, vars.token1, false)\\n    );\\n\\n    // handle trove debt repayment\\n    if (vars.burned0 != 0 || vars.burned1 != 0) {\\n      TokenAmount[] memory debtsToRepay;\\n      if (vars.burned0 != 0 && vars.burned1 != 0) {\\n        // repay both\\n        debtsToRepay = new TokenAmount[](2);\\n        debtsToRepay[0] = TokenAmount(vars.token0, vars.burned0);\\n        debtsToRepay[1] = TokenAmount(vars.token1, vars.burned1);\\n      } else {\\n        // repay only 1 token\\n        debtsToRepay = new TokenAmount[](1);\\n        debtsToRepay[0] = (vars.burned0 != 0\\n          ? TokenAmount(vars.token0, vars.burned0)\\n          : TokenAmount(vars.token1, vars.burned1)\\n        );\\n      }\\n      borrowerOperations.repayDebtFromPoolBurn(msg.sender, debtsToRepay, _upperHint, _lowerHint);\\n    }\\n\\n    (amountA, amountB) = tokenA == vars.token0 ? (vars.amount0, vars.amount1) : (vars.amount1, vars.amount0);\\n    if (amountA < amountAMin) revert InsufficientAAmount();\\n    if (amountB < amountBMin) revert InsufficientBAmount();\\n  }\\n\\n  // **** SWAP ****\\n  // requires the initial amount to have already been sent to the first pair\\n  // --- Swap functions ---\\n\\n  // requires the initial amount to have already been sent to the first pair\\n  function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n    for (uint i; i < path.length - 1; i++) {\\n      (address input, address output) = (path[i], path[i + 1]);\\n      (address token0, ) = sortTokens(input, output);\\n\\n      uint amountOut = amounts[i + 1];\\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n\\n      address to = i < path.length - 2 ? getPair[output][path[i + 2]] : _to;\\n      ISwapPair(getPair[input][output]).swap(amount0Out, amount1Out, to);\\n    }\\n  }\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = getAmountsOut(amountIn, path);\\n    if (amounts[amounts.length - 1] < amountOutMin) revert InsufficientOutputAmount();\\n    safeTransferFrom(path[0], msg.sender, getPair[path[0]][path[1]], amounts[0]);\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = getAmountsIn(amountOut, path);\\n    if (amounts[0] > amountInMax) revert ExcessiveInputAmount();\\n    safeTransferFrom(path[0], msg.sender, getPair[path[0]][path[1]], amounts[0]);\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapExactTokensForTokensWithPermit(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint[] memory amounts) {\\n    IERC20Permit(path[0]).permit(msg.sender, address(this), amountIn, deadline, v, r, s);\\n    return swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\\n  }\\n  // --- Position functions ---\\n\\n  function openLongPosition(\\n    uint stableToMintIn,\\n    uint debtOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) external override ensure(deadline) returns (uint[] memory amounts) {\\n    address[] memory path = new address[](2);\\n    path[0] = address(debtTokenManager.getStableCoin());\\n    path[1] = debtTokenAddress;\\n\\n    return _openPosition(stableToMintIn, debtOutMin, path, to, _mintMeta);\\n  }\\n\\n  function openShortPosition(\\n    uint debtToMintIn,\\n    uint stableOutMin,\\n    address debtTokenAddress,\\n    address to,\\n    MintMeta memory _mintMeta,\\n    uint deadline\\n  ) external override ensure(deadline) returns (uint[] memory amounts) {\\n    address[] memory path = new address[](2);\\n    path[0] = debtTokenAddress;\\n    path[1] = address(debtTokenManager.getStableCoin());\\n\\n    return _openPosition(debtToMintIn, stableOutMin, path, to, _mintMeta);\\n  }\\n\\n  function _openPosition(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] memory path,\\n    address to,\\n    MintMeta memory _mintMeta\\n  ) internal returns (uint[] memory amounts) {\\n    address pair = getPair[path[0]][path[1]];\\n    if (pair == address(0)) revert PairDoesNotExist();        \\n\\n    amounts = getAmountsOut(amountIn, path);\\n    if (amounts[amounts.length - 1] < amountOutMin) revert InsufficientOutputAmount();\\n\\n    debtTokenManager.getDebtToken(path[0]); //check if debt token\\n\\n    // mint the debt token and transfer it to the pair\\n    TokenAmount[] memory debtsToMint = new TokenAmount[](1);\\n    debtsToMint[0] = TokenAmount(path[0], amounts[0]);\\n    borrowerOperations.increaseDebt(msg.sender, pair, debtsToMint, _mintMeta);\\n\\n    // execute the swap\\n    _swap(amounts, path, to);\\n\\n    return amounts;\\n  }\\n\\n  // --- Helper functions ---\\n\\n  function getReserves(\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint reserveA, uint reserveB, uint32 swapFee) {\\n    ISwapPair pair = ISwapPair(getPair[tokenA][tokenB]);\\n    swapFee = pair.getSwapFee();\\n\\n    (uint reserve0, uint reserve1, ) = pair.getReserves();\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  function sortTokens(address tokenA, address tokenB) internal view returns (address token0, address token1) {\\n    if (tokenA == tokenB) revert IdenticalAddresses();\\n    if (tokenA == address(0) || tokenB == address(0)) revert ZeroAddress();\\n\\n    address stableCoin = address(debtTokenManager.getStableCoin());\\n    if (tokenA == stableCoin) return (tokenA, tokenB);\\n    if (tokenB == stableCoin) return (tokenB, tokenA);\\n    return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    if (!success || (data.length > 0 && abi.decode(data, (bool)) == false)) revert TransferFromFailed();\\n  }\\n}\\n\",\"keccak256\":\"0x69f470a6d718bb1e72d4e9d7b84909f9c2d8888db3dd96d41c672b29c3e1a901\",\"license\":\"MIT\"},\"contracts/SwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './Dependencies/LiquityMath.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/UQ112x112.sol';\\nimport './Interfaces/ISwapPair.sol';\\nimport './Interfaces/ISwapOperations.sol';\\nimport './Interfaces/ISwapCallee.sol';\\nimport './SwapERC20.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\n\\ncontract SwapPair is ISwapPair, SwapERC20, LiquityBase {\\n  using UQ112x112 for uint224;\\n\\n  uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n  bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n  address public operations;\\n  IPriceFeed public priceFeed;\\n  IDebtTokenManager public debtTokenManager;\\n\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n  uint public price0CumulativeLast;\\n  uint public price1CumulativeLast;\\n\\n  constructor() {\\n    operations = msg.sender;\\n  }\\n\\n  // called once by the operations at time of deployment\\n  function initialize(address _token0, address _token1, address _debtTokenManager, address _priceFeedAddress) external {\\n    if (msg.sender != operations) revert Forbidden();\\n\\n    token0 = _token0;\\n    token1 = _token1;\\n    debtTokenManager = IDebtTokenManager(_debtTokenManager);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n  }\\n\\n  uint private unlocked = 1;\\n  modifier lock() {\\n    if (unlocked == 0) revert Locked();\\n\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function _safeTransfer(address token, address to, uint value) private {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n\\n    if (!success || (data.length > 0 && abi.decode(data, (bool)) == false)) revert TransferFailed();\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n    if (balance0 > type(uint112).max || balance1 > type(uint112).max) revert Overflow();\\n\\n    uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n      price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n    }\\n\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint liquidity) {\\n    _requireCallerIsOperations();\\n\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint balance0 = IERC20(token0).balanceOf(address(this));\\n    uint balance1 = IERC20(token1).balanceOf(address(this));\\n    uint amount0 = balance0 - _reserve0;\\n    uint amount1 = balance1 - _reserve1;\\n\\n    uint _totalSupply = totalSupply; // gas savings\\n    if (_totalSupply == 0) {\\n      liquidity = LiquityMath._sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n      _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = LiquityMath._min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n    }\\n\\n    if (liquidity == 0) revert InsufficientLiquidityMinted();\\n    _mint(to, liquidity);\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  // directly burns debt tokens if the user has any left to repay\\n  function burn(\\n    address to,\\n    uint liquidity,\\n    uint debt0,\\n    uint debt1\\n  ) external lock returns (uint amount0, uint amount1, uint burned0, uint burned1) {\\n    _requireCallerIsOperations();\\n\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n\\n    uint balance0 = IERC20(token0).balanceOf(address(this));\\n    uint balance1 = IERC20(token1).balanceOf(address(this));\\n\\n    {\\n      uint _totalSupply = totalSupply; // gas savings\\n      amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n      amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\n      if (amount0 == 0 || amount1 == 0) revert InsufficientLiquidityBurned();\\n      _burn(to, liquidity);\\n    }\\n\\n    // check if the user has any debts left to repay\\n    burned0 = LiquityMath._min(debt0, amount0);\\n    burned1 = LiquityMath._min(debt1, amount1);\\n    if (burned0 != 0) IDebtToken(token0).burn(address(this), burned0);\\n    if (burned1 != 0) IDebtToken(token1).burn(address(this), burned1);\\n\\n    // payout whats left\\n    _safeTransfer(token0, to, amount0 - burned0);\\n    _safeTransfer(token1, to, amount1 - burned1);\\n\\n    balance0 = IERC20(token0).balanceOf(address(this));\\n    balance1 = IERC20(token1).balanceOf(address(this));\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // fee is returned in 1e6 (SWAP_FEE_PRECISION)\\n  function getSwapFee() public view override returns (uint32 swapFee) {\\n    // find stable coin\\n    address nonStableCoin = token1;\\n    if (!debtTokenManager.isDebtToken(nonStableCoin)) return SWAP_BASE_FEE; // no dynamic fee if the pool is not an stable/stock pool\\n    if (totalSupply == 0) return SWAP_BASE_FEE; //inital mint\\n\\n    // query prices\\n    uint oraclePrice = priceFeed.getPrice(nonStableCoin);\\n    uint dexPrice = (reserve0 * DECIMAL_PRECISION) / reserve1; // todo does the token digits matter here?\\n\\n    if (oraclePrice < dexPrice) return SWAP_BASE_FEE;\\n    uint priceRatio = (oraclePrice * DECIMAL_PRECISION) / dexPrice;\\n    return uint32((priceRatio * SWAP_BASE_FEE) / DECIMAL_PRECISION); // todo missing real fee calculation\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(uint amount0Out, uint amount1Out, address to) external lock {\\n    _requireCallerIsOperations();\\n    if (amount0Out == 0 && amount1Out == 0) revert InsufficientOutputAmount();\\n    if (amount0Out > reserve0 || amount1Out > reserve1) revert InsufficientLiquidity();\\n\\n    uint balance0;\\n    uint balance1;\\n    address _token0 = token0;\\n    address _token1 = token1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      if (to == _token0 || to == _token1) revert InvalidTo();\\n\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      balance0 = IERC20(_token0).balanceOf(address(this));\\n      balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n\\n    uint amount0In = balance0 > reserve0 - amount0Out ? balance0 - (reserve0 - amount0Out) : 0;\\n    uint amount1In = balance1 > reserve1 - amount1Out ? balance1 - (reserve1 - amount1Out) : 0;\\n    if (amount0In == 0 && amount1In == 0) revert InsufficientInputAmount();\\n\\n    uint32 currentSwapFee = getSwapFee();\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint balance0Adjusted = balance0 * SWAP_FEE_PRECISION - (amount0In * currentSwapFee);\\n      uint balance1Adjusted = balance1 * SWAP_FEE_PRECISION - (amount1In * currentSwapFee);\\n      if (balance0Adjusted * balance1Adjusted < uint(reserve0) * uint(reserve1) * (uint(SWAP_FEE_PRECISION) ** 2))\\n        revert K();\\n    }\\n\\n    // gov swap fee payment\\n    if (amount0In > 0) {\\n      uint amount0GovFee = (amount0In * currentSwapFee * GOV_SWAP_FEE) / (uint(SWAP_FEE_PRECISION) ** 2);\\n      _safeTransfer(_token0, GOV_STAKING_ADDRESS, amount0GovFee);\\n      balance0 -= amount0GovFee;\\n    }\\n    if (amount1In > 0) {\\n      uint amount1GovFee = (amount1In * currentSwapFee * GOV_SWAP_FEE) / (uint(SWAP_FEE_PRECISION) ** 2);\\n      _safeTransfer(_token1, GOV_STAKING_ADDRESS, amount1GovFee);\\n      balance1 -= amount1GovFee;\\n    }\\n\\n    _update(balance0, balance1, reserve0, reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, currentSwapFee, to);\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n    _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n  }\\n\\n  function _requireCallerIsOperations() internal view {\\n    if (msg.sender != address(operations)) revert NotFromSwapOperations();\\n  }\\n}\\n\",\"keccak256\":\"0x19421acf25cac0fce1727bd1a7d8acb73b658cba4f7038de8fe38395f7276baa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61545280620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063ad615dec116100b8578063e67729e31161007c578063e67729e3146104cd578063e6a43905146104d7578063ec671c831461050b578063f2fde38b14610515578063f92d3433146102b357600080fd5b8063ad615dec1461046e578063c08c625514610481578063c9c6539614610494578063d06ca61f146104a7578063e0abca0b146104ba57600080fd5b806383d4336d116100ff57806383d4336d146103ff5780638803dbee146104275780638d63c6651461043a5780638da5cb5b1461044a5780639cd076151461045b57600080fd5b8063715018a6146103c657806372fe25aa146103ce57806377553ad4146103dd578063794e5724146103f057600080fd5b80634a945f8d116101b35780635733d58f116101825780635733d58f1461035b578063574f2ba31461036a57806359827d47146103725780635ebe30c7146103855780636549192a1461039857600080fd5b80634a945f8d14610302578063502afb04146103175780635106046414610335578063522a86fe1461034857600080fd5b806328d28b5b116101fa57806328d28b5b146102b357806334ab0945146102c157806338ed1739146102d45780633d83908a146102e75780634870dd9a146102fa57600080fd5b806309230ad31461022c5780631e3dd18b146102645780631f00ca74146102775780632409266914610297575b600080fd5b61024773f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b610247610272366004612a23565b610528565b61028a610285366004612acc565b610552565b60405161025b9190612b77565b6102a566b1a2bc2ec5000081565b60405190815260200161025b565b6102a56611c37937e0800081565b61028a6102cf366004612c27565b6106bc565b61028a6102e2366004612cd1565b6107fb565b600154610247906001600160a01b031681565b6102a560c881565b610315610310366004612d44565b6109c5565b005b610320610bb881565b60405163ffffffff909116815260200161025b565b6102a5610343366004612db2565b610a8c565b600454610247906001600160a01b031681565b6102a56714d1120d7b16000081565b6006546102a5565b61028a610380366004612c27565b610b39565b61028a610393366004612df9565b610c2f565b6103ab6103a6366004612f4c565b610cde565b6040805193845260208401929092529082015260600161025b565b610315610e7a565b6102a5670de0b6b3a764000081565b600254610247906001600160a01b031681565b6102a5670f43fc2c04ee000081565b61041261040d366004613043565b610e8e565b6040805192835260208301919091520161025b565b61028a610435366004612cd1565b611415565b6102a5680ad78ebc5ac620000081565b6000546001600160a01b0316610247565b6102a5610469366004612db2565b6114b3565b6102a561047c3660046130c8565b611566565b6103ab61048f3660046130f4565b6115cf565b6102476104a236600461316e565b611bab565b61028a6104b5366004612acc565b611f4f565b600354610247906001600160a01b031681565b610320620f424081565b6102476104e536600461316e565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6103206207a12081565b6103156105233660046131a7565b61209b565b6006818154811061053857600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600282511015610577576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561059157610591612a3c565b6040519080825280602002602001820160405280156105ba578160200160208202803683370190505b5090508281600183516105cd91906131e1565b815181106105dd576105dd6131f4565b6020026020010181815250506000600183516105f991906131e1565b90505b80156106b5576000808061064c866106156001876131e1565b81518110610625576106256131f4565b602002602001015187868151811061063f5761063f6131f4565b60200260200101516120de565b925092509250610677858581518110610667576106676131f4565b60200260200101518484846114b3565b856106836001876131e1565b81518110610693576106936131f4565b60200260200101818152505050505080806106ad9061320a565b9150506105fc565b5092915050565b606081428110156106e057604051630407b05b60e31b815260040160405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090508681600081518110610715576107156131f4565b60200260200101906001600160a01b031690816001600160a01b031681525050600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190613221565b816001815181106107bf576107bf6131f4565b60200260200101906001600160a01b031690816001600160a01b0316815250506107ec898983898961222b565b9250505b509695505050505050565b6060814281101561081f57604051630407b05b60e31b815260040160405180910390fd5b61085c88878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f4f92505050565b915086826001845161086e91906131e1565b8151811061087e5761087e6131f4565b602002602001015110156108a5576040516342301c2360e01b815260040160405180910390fd5b610986868660008181106108bb576108bb6131f4565b90506020020160208101906108d091906131a7565b33600560008a8a60008181106108e8576108e86131f4565b90506020020160208101906108fd91906131a7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a6001818110610932576109326131f4565b905060200201602081019061094791906131a7565b6001600160a01b03908116825260208201929092526040016000908120548751921691879190610979576109796131f4565b60200260200101516124e9565b6107f0828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506125e4915050565b6109cd6127cb565b6109d6846127f8565b6109df836127f8565b6109e8826127f8565b6109f1816127f8565b600280546001600160a01b038681166001600160a01b031992831681179093556001805487831690841681179091556003805487841690851681179091556004805493871693909416831790935560408051948552602085019190915283019190915260608201527f1409d816dbb5d0b4943f2f83f2d88ae2e69c834a03e8cc4f41e3878f71f0f0bc9060800160405180910390a150505050565b600084600003610aaf5760405163098fb56160e01b815260040160405180910390fd5b831580610aba575082155b15610ad85760405163bb55fd2760e01b815260040160405180910390fd5b6000610ae783620f424061323e565b610af79063ffffffff168761325b565b90506000610b05858361325b565b9050600082610b17620f42408961325b565b610b219190613272565b9050610b2d8183613285565b98975050505050505050565b60608142811015610b5d57604051630407b05b60e31b815260040160405180910390fd5b60408051600280825260608201835260009260208301908036833750506004805460408051631bd817c960e01b815290519495506001600160a01b0390911693631bd817c99350818301926020928290030181865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190613221565b81600081518110610bfb57610bfb6131f4565b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106107bf576107bf6131f4565b606087876000818110610c4457610c446131f4565b9050602002016020810190610c5991906131a7565b6001600160a01b031663d505accf33308d898989896040518863ffffffff1660e01b8152600401610c9097969594939291906132a7565b600060405180830381600087803b158015610caa57600080fd5b505af1158015610cbe573d6000803e3d6000fd5b50505050610cd08a8a8a8a8a8a6107fb565b9a9950505050505050505050565b60008060008d6001600160a01b031663d505accf33308f8b8b600081518110610d0957610d096131f4565b60200260200101518b600081518110610d2457610d246131f4565b60200260200101518b600081518110610d3f57610d3f6131f4565b60200260200101516040518863ffffffff1660e01b8152600401610d6997969594939291906132a7565b600060405180830381600087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050508c6001600160a01b031663d505accf33308e8b8b600181518110610dc157610dc16131f4565b60200260200101518b600181518110610ddc57610ddc6131f4565b60200260200101518b600181518110610df757610df76131f4565b60200260200101516040518863ffffffff1660e01b8152600401610e2197969594939291906132a7565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b50505050610e638e8e8e8e8e8e8e8e6115cf565b9250925092509b509b509b98505050505050505050565b610e826127cb565b610e8c6000612847565b565b6000808242811015610eb357604051630407b05b60e31b815260040160405180910390fd5b610efe6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b610f088c8c612897565b8260000183602001826001600160a01b03166001600160a01b0316815250826001600160a01b03166001600160a01b031681525050506000600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050806001600160a01b031663de7bf0a2338d600160009054906101000a90046001600160a01b03166001600160a01b031663fa973daa33886000015160006040518463ffffffff1660e01b8152600401611018939291906001600160a01b039384168152919092166020820152901515604082015260600190565b602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906132e8565b6001546020880151604051637d4b9ed560e11b81523360048201526001600160a01b0391821660248201526000604482015291169063fa973daa90606401602060405180830381865afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d891906132e8565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016080604051808303816000875af1158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190613301565b60a08601526080850181905260608501919091526040840191909152151580611180575060a082015115155b15611390576060826080015160001415801561119f575060a083015115155b15611270576040805160028082526060820190925290816020015b60408051808201909152600080825260208201528152602001906001900390816111ba579050509050604051806040016040528084600001516001600160a01b0316815260200184608001518152508160008151811061121c5761121c6131f4565b6020026020010181905250604051806040016040528084602001516001600160a01b031681526020018460a0015181525081600181518110611260576112606131f4565b6020026020010181905250611326565b60408051600180825281830190925290816020015b604080518082019091526000808252602082015281526020019060019003908161128557905050905082608001516000036112e557604051806040016040528084602001516001600160a01b031681526020018460a00151815250611307565b6040805180820190915283516001600160a01b03168152608084015160208201525b8160008151811061131a5761131a6131f4565b60200260200101819052505b60025460405163483cbfcd60e01b81526001600160a01b039091169063483cbfcd9061135c90339085908e908e90600401613386565b600060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b50505050505b81516001600160a01b038e81169116146113b357816060015182604001516113be565b816040015182606001515b9095509350898510156113e457604051638dc525d160e01b815260040160405180910390fd5b888410156114055760405163ef71d09160e01b815260040160405180910390fd5b5050509850989650505050505050565b6060814281101561143957604051630407b05b60e31b815260040160405180910390fd5b6114768887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061055292505050565b9150868260008151811061148c5761148c6131f4565b602002602001015111156108a55760405163e1b0da4f60e01b815260040160405180910390fd5b6000846000036114d6576040516342301c2360e01b815260040160405180910390fd5b8315806114e1575082155b156114ff5760405163bb55fd2760e01b815260040160405180910390fd5b6000620f424061150f878761325b565b611519919061325b565b9050600061152a84620f424061323e565b63ffffffff1661153a88876131e1565b611544919061325b565b90506115508183613285565b61155b906001613272565b979650505050505050565b60008360000361158957604051632ca2f52b60e11b815260040160405180910390fd5b821580611594575081155b156115b25760405163bb55fd2760e01b815260040160405180910390fd5b826115bd838661325b565b6115c79190613285565b949350505050565b600080600083428110156115f657604051630407b05b60e31b815260040160405180910390fd5b61163f6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031681600001906001600160a01b031690816001600160a01b03168152505060006001600160a01b031681600001516001600160a01b0316036116ef5760405163317f12fd60e21b815260040160405180910390fd5b6000806116fc8f8f6120de565b509150915081600014801561170f575080155b1561171f578c96508b95506117a9565b600061172c8e8484611566565b90508c8111611761578a8110156117565760405163ef71d09160e01b815260040160405180910390fd5b8d97509550856117a7565b600061176e8e8486611566565b90508e811115611780576117806133c1565b8c8110156117a157604051638dc525d160e01b815260040160405180910390fd5b97508c96505b505b50506040516370a0823160e01b81523360048201526001600160a01b038e16906370a0823190602401602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181391906132e8565b60208201526040516370a0823160e01b81523360048201526001600160a01b038d16906370a0823190602401602060405180830381865afa15801561185c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188091906132e8565b6040820152602081015161189490866129fc565b606082015260408101516118a890856129fc565b608082015260608101516118bc90866131e1565b60a082015260808101516118d090856131e1565b60c082015260a08101511515806118ea575060c081015115155b15611af05760608160a00151600014158015611909575060c082015115155b156119d2576040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161192457905050905060405180604001604052808f6001600160a01b031681526020018360a0015181525081600081518110611982576119826131f4565b602002602001018190525060405180604001604052808e6001600160a01b031681526020018360c00151815250816001815181106119c2576119c26131f4565b6020026020010181905250611a85565b60408051600180825281830190925290816020015b60408051808201909152600080825260208201528152602001906001900390816119e75790505090508160a00151600003611a435760405180604001604052808e6001600160a01b031681526020018360c00151815250611a66565b60405180604001604052808f6001600160a01b031681526020018360a001518152505b81600081518110611a7957611a796131f4565b60200260200101819052505b60025482516040516378d5f8d560e11b81526001600160a01b039092169163f1abf1aa91611abc9133919086908e906004016133d7565b600060405180830381600087803b158015611ad657600080fd5b505af1158015611aea573d6000803e3d6000fd5b50505050505b606081015115611b0e57611b0e8d33836000015184606001516124e9565b608081015115611b2c57611b2c8c33836000015184608001516124e9565b80516040516335313c2160e11b81523360048201526001600160a01b0390911690636a627842906024016020604051808303816000875af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906132e8565b92505050985098509895505050505050565b6000611bb56127cb565b816001600160a01b0316836001600160a01b031603611be757604051630bd969eb60e41b815260040160405180910390fd5b6004805460408051631bd817c960e01b815290516001600160a01b0390921692631bd817c99282820192602092908290030181865afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c529190613221565b6001600160a01b0316836001600160a01b031614158015611cef57506004805460408051631bd817c960e01b815290516001600160a01b0390921692631bd817c99282820192602092908290030181865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd99190613221565b6001600160a01b0316826001600160a01b031614155b15611d0d57604051632b6d678960e21b815260040160405180910390fd5b600080611d1a8585612897565b90925090506001600160a01b038216611d465760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615611d8c57604051633d77e89160e01b815260040160405180910390fd5b600060405180602001611d9e90612a16565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560048054600354604051637c643b2f60e11b81526001600160a01b0389811694820194909452878416602482015291831660448301528216606482015291965086169063f8c8765e90608401600060405180830381600087803b158015611e6757600080fd5b505af1158015611e7b573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6060600282511015611f74576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff811115611f8e57611f8e612a3c565b604051908082528060200260200182016040528015611fb7578160200160208202803683370190505b5090508281600081518110611fce57611fce6131f4565b60200260200101818152505060005b60018351611feb91906131e1565b8110156106b557600080600061203286858151811061200c5761200c6131f4565b6020026020010151878660016120229190613272565b8151811061063f5761063f6131f4565b92509250925061205d85858151811061204d5761204d6131f4565b6020026020010151848484610a8c565b85612069866001613272565b81518110612079576120796131f4565b60200260200101818152505050505080806120939061342c565b915050611fdd565b6120a36127cb565b6001600160a01b0381166120d257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6120db81612847565b50565b6001600160a01b03808316600090815260056020908152604080832085851684528252808320548151631a995bed60e31b815291519394859485949290911692839263d4cadf68926004808401938290030181865afa158015612145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121699190613445565b9150600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156121ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d09190613479565b506001600160701b031691506001600160701b0316915060006121f38989612897565b509050806001600160a01b0316896001600160a01b031614612216578183612219565b82825b909a9099509497509395505050505050565b606060006005600086600081518110612246576122466131f4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086600181518110612283576122836131f4565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054169050806122cb5760405163317f12fd60e21b815260040160405180910390fd5b6122d58786611f4f565b91508582600184516122e791906131e1565b815181106122f7576122f76131f4565b6020026020010151101561231e576040516342301c2360e01b815260040160405180910390fd5b60045485516001600160a01b039091169063a95bbced908790600090612346576123466131f4565b60200260200101516040518263ffffffff1660e01b815260040161237991906001600160a01b0391909116815260200190565b602060405180830381865afa158015612396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ba9190613221565b50604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816123d2579050509050604051806040016040528087600081518110612419576124196131f4565b60200260200101516001600160a01b0316815260200184600081518110612442576124426131f4565b602002602001015181525081600081518110612460576124606131f4565b60209081029190910101526002546040516378d5f8d560e11b81526001600160a01b039091169063f1abf1aa906124a1903390869086908a906004016133d7565b600060405180830381600087803b1580156124bb57600080fd5b505af11580156124cf573d6000803e3d6000fd5b505050506124de8387876125e4565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161254d91906134c0565b6000604051808303816000865af19150503d806000811461258a576040519150601f19603f3d011682016040523d82523d6000602084013e61258f565b606091505b50915091508115806125be5750600081511180156125be5750808060200190518101906125bc91906134ef565b155b156125dc57604051631e4e7d0960e21b815260040160405180910390fd5b505050505050565b60005b600183516125f591906131e1565b8110156127c557600080848381518110612611576126116131f4565b6020026020010151858460016126279190613272565b81518110612637576126376131f4565b602002602001015191509150600061264f8383612897565b509050600087612660866001613272565b81518110612670576126706131f4565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461269e578260006126a2565b6000835b91509150600060028a516126b691906131e1565b88106126c25788612720565b6001600160a01b0386166000908152600560205260408120908b6126e78b6002613272565b815181106126f7576126f76131f4565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054165b6001600160a01b0388811660009081526005602090815260408083208b85168452909152908190205490516336cd320560e11b8152600481018790526024810186905283831660448201529293501690636d9a640a90606401600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b505050505050505050505080806127bd9061342c565b9150506125e7565b50505050565b6000546001600160a01b03163314610e8c5760405163118cdaa760e01b81523360048201526024016120c9565b6001600160a01b03811661281f5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361284357604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316846001600160a01b0316036128cc57604051630bd969eb60e41b815260040160405180910390fd5b6001600160a01b03841615806128e957506001600160a01b038316155b156129075760405163d92e233d60e01b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129809190613221565b9050806001600160a01b0316856001600160a01b0316036129a757848492509250506129f5565b806001600160a01b0316846001600160a01b0316036129cc57838592509250506129f5565b836001600160a01b0316856001600160a01b0316106129ec5783856129ef565b84845b92509250505b9250929050565b6000818310612a0b5781612a0d565b825b90505b92915050565b611f0b8061351283390190565b600060208284031215612a3557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7b57612a7b612a3c565b604052919050565b600067ffffffffffffffff821115612a9d57612a9d612a3c565b5060051b60200190565b6001600160a01b03811681146120db57600080fd5b8035612ac781612aa7565b919050565b60008060408385031215612adf57600080fd5b8235915060208084013567ffffffffffffffff811115612afe57600080fd5b8401601f81018613612b0f57600080fd5b8035612b22612b1d82612a83565b612a52565b81815260059190911b82018301908381019088831115612b4157600080fd5b928401925b82841015612b68578335612b5981612aa7565b82529284019290840190612b46565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612baf57835183529284019291840191600101612b93565b50909695505050505050565b600060608284031215612bcd57600080fd5b6040516060810181811067ffffffffffffffff82111715612bf057612bf0612a3c565b6040529050808235612c0181612aa7565b81526020830135612c1181612aa7565b6020820152604092830135920191909152919050565b6000806000806000806101008789031215612c4157600080fd5b86359550602087013594506040870135612c5a81612aa7565b93506060870135612c6a81612aa7565b9250612c798860808901612bbb565b915060e087013590509295509295509295565b60008083601f840112612c9e57600080fd5b50813567ffffffffffffffff811115612cb657600080fd5b6020830191508360208260051b85010111156129f557600080fd5b60008060008060008060a08789031215612cea57600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612d0f57600080fd5b612d1b89828a01612c8c565b9095509350506060870135612d2f81612aa7565b80925050608087013590509295509295509295565b60008060008060808587031215612d5a57600080fd5b8435612d6581612aa7565b93506020850135612d7581612aa7565b92506040850135612d8581612aa7565b91506060850135612d9581612aa7565b939692955090935050565b63ffffffff811681146120db57600080fd5b60008060008060808587031215612dc857600080fd5b8435935060208501359250604085013591506060850135612d9581612da0565b803560ff81168114612ac757600080fd5b60008060008060008060008060006101008a8c031215612e1857600080fd5b8935985060208a0135975060408a013567ffffffffffffffff811115612e3d57600080fd5b612e498c828d01612c8c565b90985096505060608a0135612e5d81612aa7565b945060808a01359350612e7260a08b01612de8565b925060c08a0135915060e08a013590509295985092959850929598565b600082601f830112612ea057600080fd5b81356020612eb0612b1d83612a83565b82815260059290921b84018101918181019086841115612ecf57600080fd5b8286015b848110156107f057612ee481612de8565b8352918301918301612ed3565b600082601f830112612f0257600080fd5b81356020612f12612b1d83612a83565b82815260059290921b84018101918181019086841115612f3157600080fd5b8286015b848110156107f05780358352918301918301612f35565b60008060008060008060008060008060006101a08c8e031215612f6e57600080fd5b612f778c612abc565b9a50612f8560208d01612abc565b995060408c0135985060608c0135975060808c0135965060a08c01359550612fb08d60c08e01612bbb565b94506101208c0135935067ffffffffffffffff806101408e01351115612fd557600080fd5b612fe68e6101408f01358f01612e8f565b9350806101608e01351115612ffa57600080fd5b61300b8e6101608f01358f01612ef1565b9250806101808e0135111561301f57600080fd5b506130318d6101808e01358e01612ef1565b90509295989b509295989b9093969950565b600080600080600080600080610100898b03121561306057600080fd5b883561306b81612aa7565b9750602089013561307b81612aa7565b965060408901359550606089013594506080890135935060a08901356130a081612aa7565b925060c08901356130b081612aa7565b8092505060e089013590509295985092959890939650565b6000806000606084860312156130dd57600080fd5b505081359360208301359350604090920135919050565b600080600080600080600080610140898b03121561311157600080fd5b883561311c81612aa7565b9750602089013561312c81612aa7565b965060408901359550606089013594506080890135935060a089013592506131578a60c08b01612bbb565b915061012089013590509295985092959890939650565b6000806040838503121561318157600080fd5b823561318c81612aa7565b9150602083013561319c81612aa7565b809150509250929050565b6000602082840312156131b957600080fd5b81356131c481612aa7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115612a1057612a106131cb565b634e487b7160e01b600052603260045260246000fd5b600081613219576132196131cb565b506000190190565b60006020828403121561323357600080fd5b81516131c481612aa7565b63ffffffff8281168282160390808211156106b5576106b56131cb565b8082028115828204841417612a1057612a106131cb565b80820180821115612a1057612a106131cb565b6000826132a257634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000602082840312156132fa57600080fd5b5051919050565b6000806000806080858703121561331757600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081518084526020808501945080840160005b8381101561337b57815180516001600160a01b03168852830151838801526040909601959082019060010161334b565b509495945050505050565b600060018060a01b038087168352608060208401526133a86080840187613337565b9481166040840152929092166060909101525092915050565b634e487b7160e01b600052600160045260246000fd5b600060018060a01b038087168352808616602084015260c0604084015261340160c0840186613337565b915080845116606084015280602085015116608084015250604083015160a083015295945050505050565b60006001820161343e5761343e6131cb565b5060010190565b60006020828403121561345757600080fd5b81516131c481612da0565b80516001600160701b0381168114612ac757600080fd5b60008060006060848603121561348e57600080fd5b61349784613462565b92506134a560208501613462565b915060408401516134b581612da0565b809150509250925092565b6000825160005b818110156134e157602081860181015185830152016134c7565b506000920191825250919050565b60006020828403121561350157600080fd5b815180151581146131c457600080fdfe60806040526001600d5534801561001557600080fd5b5060408051808201825260048152630537761760e41b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbce316f0d9d2a3affa97de1d99bb2aac0538e2666d0d8545545ead241ef0ccab818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055611e09806101026000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806370a0823111610130578063bc25cf77116100b8578063e67729e31161007c578063e67729e31461052a578063ec671c8314610534578063f8c8765e1461053e578063f92d343314610304578063fff6cae91461055157600080fd5b8063bc25cf771461049e578063d21220a7146104b1578063d4cadf68146104c4578063dd62ed3e146104cc578063de7bf0a2146104f757600080fd5b80637ecebe00116100ff5780637ecebe001461042f5780638b33b4b21461044f5780638d63c6651461046257806395d89b4114610472578063ba9a7a561461049557600080fd5b806370a08231146103de57806372fe25aa146103fe578063741bef1a1461040d578063794e57241461042057600080fd5b80633644e515116101b35780635733d58f116101825780635733d58f146103955780635909c0d5146103a45780635a3d5493146103ad5780636a627842146103b65780636d9a640a146103c957600080fd5b80633644e515146103535780634870dd9a1461035c578063502afb0414610364578063522a86fe1461038257600080fd5b806318160ddd116101fa57806318160ddd146102df57806324092669146102f657806328d28b5b1461030457806330adf81f14610312578063313ce5671461033957600080fd5b806306fdde031461022c5780630902f1ac1461026557806309230ad3146102995780630dfe1681146102cc575b600080fd5b61024f604051806040016040528060048152602001630537761760e41b81525081565b60405161025c9190611a1b565b60405180910390f35b61026d610559565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161025c565b6102b473f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b03909116815260200161025c565b6008546102b4906001600160a01b031681565b6102e860005481565b60405190815260200161025c565b6102e866b1a2bc2ec5000081565b6102e86611c37937e0800081565b6102e87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610341601281565b60405160ff909116815260200161025c565b6102e860035481565b6102e860c881565b61036d610bb881565b60405163ffffffff909116815260200161025c565b6007546102b4906001600160a01b031681565b6102e86714d1120d7b16000081565b6102e8600b5481565b6102e8600c5481565b6102e86103c4366004611a65565b610583565b6103dc6103d7366004611a80565b6107e2565b005b6102e86103ec366004611a65565b60016020526000908152604090205481565b6102e8670de0b6b3a764000081565b6006546102b4906001600160a01b031681565b6102e8670f43fc2c04ee000081565b6102e861043d366004611a65565b60046020526000908152604090205481565b6005546102b4906001600160a01b031681565b6102e8680ad78ebc5ac620000081565b61024f604051806040016040528060048152602001630535741560e41b81525081565b6102e86103e881565b6103dc6104ac366004611a65565b610cd6565b6009546102b4906001600160a01b031681565b61036d610dea565b6102e86104da366004611ab5565b600260209081526000928352604080842090915290825290205481565b61050a610505366004611ae8565b610f86565b60408051948552602085019390935291830152606082015260800161025c565b61036d620f424081565b61036d6207a12081565b6103dc61054c366004611b21565b61137f565b6103dc6113fa565b600a546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000600d546000036105a8576040516303cb96db60e21b815260040160405180910390fd5b6000600d556105b561151f565b6000806105c0610559565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190611b75565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190611b75565b905060006106bf6001600160701b03861684611ba4565b905060006106d66001600160701b03861684611ba4565b60008054919250819003610717576103e86106f96106f48486611bb7565b61154c565b6107039190611ba4565b975061071260006103e86115bc565b61075e565b61075b6001600160701b03881661072e8386611bb7565b6107389190611be4565b6001600160701b03881661074c8486611bb7565b6107569190611be4565b611645565b97505b8760000361077f57604051633489be7560e21b815260040160405180910390fd5b61078989896115bc565b6107958585898961165f565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600d55509395945050505050565b600d54600003610805576040516303cb96db60e21b815260040160405180910390fd5b6000600d5561081261151f565b8215801561081e575081155b1561083c576040516342301c2360e01b815260040160405180910390fd5b600a546001600160701b03168311806108665750600a54600160701b90046001600160701b031682115b156108845760405163bb55fd2760e01b815260040160405180910390fd5b60085460095460009182916001600160a01b03918216919081169085168214806108bf5750806001600160a01b0316856001600160a01b0316145b156108dd57604051630521f43160e31b815260040160405180910390fd5b86156108ee576108ee828689611824565b85156108ff576108ff818688611824565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190611b75565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611b75565b600a549093506000906109ef9089906001600160701b0316611ba4565b85116109fc576000610a1d565b600a54610a139089906001600160701b0316611ba4565b610a1d9086611ba4565b600a54909150600090610a41908990600160701b90046001600160701b0316611ba4565b8511610a4e576000610a76565b600a54610a6c908990600160701b90046001600160701b0316611ba4565b610a769086611ba4565b905081158015610a84575080155b15610aa25760405163098fb56160e01b815260040160405180910390fd5b6000610aac610dea565b90506000610ac063ffffffff831685611bb7565b610acd620f42408a611bb7565b610ad79190611ba4565b90506000610aeb63ffffffff841685611bb7565b610af8620f42408a611bb7565b610b029190611ba4565b9050610b126002620f4240611cdc565b600a54610b31906001600160701b03600160701b820481169116611bb7565b610b3b9190611bb7565b610b458284611bb7565b1015610b645760405163a932492f60e01b815260040160405180910390fd5b50508215610bd3576000610b7c6002620f4240611cdc565b6207a120610b9063ffffffff851687611bb7565b610b9a9190611bb7565b610ba49190611be4565b9050610bc58673f39fd6e51aad88f6f4ce6ab8827279cfffb9226683611824565b610bcf8189611ba4565b9750505b8115610c40576000610be96002620f4240611cdc565b6207a120610bfd63ffffffff851686611bb7565b610c079190611bb7565b610c119190611be4565b9050610c328573f39fd6e51aad88f6f4ce6ab8827279cfffb9226683611824565b610c3c8188611ba4565b9650505b600a54610c6490889088906001600160701b0380821691600160701b90041661165f565b60408051848152602081018490529081018b9052606081018a905263ffffffff821660808201526001600160a01b0389169033907f485fd455f44df610bbdb723335bb24947ffc723ae537fb9f82dc8e5ee6f63b019060a00160405180910390a350506001600d555050505050505050565b600d54600003610cf9576040516303cb96db60e21b815260040160405180910390fd5b6000600d55600854600954600a546040516370a0823160e01b81523060048201526001600160a01b039384169390921691610d9891849186916001600160701b03169083906370a08231906024015b602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611b75565b610d939190611ba4565b611824565b600a546040516370a0823160e01b8152306004820152610de09183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401610d48565b50506001600d5550565b600954600754604051633803473960e01b81526001600160a01b039283166004820181905260009390921690633803473990602401602060405180830381865afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611ceb565b610e6d57610bb891505090565b600054600003610e8057610bb891505090565b6006546040516341976e0960e01b81526001600160a01b03838116600483015260009216906341976e0990602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190611b75565b600a549091506000906001600160701b03600160701b8204811691610f1e91670de0b6b3a76400009116611bb7565b610f289190611be4565b905080821015610f3d57610bb8935050505090565b600081610f52670de0b6b3a764000085611bb7565b610f5c9190611be4565b9050670de0b6b3a7640000610f73610bb883611bb7565b610f7d9190611be4565b94505050505090565b600080600080600d54600003610faf576040516303cb96db60e21b815260040160405180910390fd5b6000600d55610fbc61151f565b600080610fc7610559565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190611b75565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611b75565b600054909150806110c0848e611bb7565b6110ca9190611be4565b9850806110d7838e611bb7565b6110e19190611be4565b97508815806110ee575087155b1561110c5760405163749383ad60e01b815260040160405180910390fd5b6111168d8d611946565b506111218a89611645565b955061112d8988611645565b9450851561119a57600854604051632770a7eb60e21b8152306004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561118157600080fd5b505af1158015611195573d6000803e3d6000fd5b505050505b841561120557600954604051632770a7eb60e21b8152306004820152602481018790526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050505b600854611220906001600160a01b03168d610d93898c611ba4565b60095461123b906001600160a01b03168d610d93888b611ba4565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a79190611b75565b6009546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a0823190602401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190611b75565b90506113228282868661165f565b60408051898152602081018990526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a3505050506001600d81905550945094509450949050565b6005546001600160a01b031633146113aa57604051631dd2188d60e31b815260040160405180910390fd5b600880546001600160a01b039586166001600160a01b0319918216179091556009805494861694821694909417909355600780549285169284169290921790915560068054919093169116179055565b600d5460000361141d576040516303cb96db60e21b815260040160405180910390fd5b6000600d556008546040516370a0823160e01b8152306004820152611518916001600160a01b0316906370a0823190602401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190611b75565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190611b75565b600a546001600160701b0380821691600160701b90041661165f565b6001600d55565b6005546001600160a01b0316331461154a5760405163091664d760e11b815260040160405180910390fd5b565b600060038211156115ad5750806000611566600283611be4565b611571906001611d14565b90505b818110156115a75790508060028161158c8186611be4565b6115969190611d14565b6115a09190611be4565b9050611574565b50919050565b81156115b7575060015b919050565b806000808282546115cd9190611d14565b90915550506001600160a01b038216600090815260016020526040812080548392906115fa908490611d14565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106116545781611656565b825b90505b92915050565b6001600160701b0384118061167a57506001600160701b0383115b1561169857604051631a93c68960e11b815260040160405180910390fd5b60006116a964010000000042611d27565b600a549091506000906116c990600160e01b900463ffffffff1683611d3b565b905060008163ffffffff161180156116e957506001600160701b03841615155b80156116fd57506001600160701b03831615155b1561178c578063ffffffff1661172585611716866119c9565b6001600160e01b0316906119e2565b6001600160e01b03166117389190611bb7565b600b60008282546117499190611d14565b909155505063ffffffff811661176284611716876119c9565b6001600160e01b03166117759190611bb7565b600c60008282546117869190611d14565b90915550505b600a805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916118b09190611d5f565b6000604051808303816000865af19150503d80600081146118ed576040519150601f19603f3d011682016040523d82523d6000602084013e6118f2565b606091505b509150915081158061192157506000815111801561192157508080602001905181019061191f9190611ceb565b155b1561193f576040516312171d8360e31b815260040160405180910390fd5b5050505050565b6001600160a01b0382166000908152600160205260408120805483929061196e908490611ba4565b92505081905550806000808282546119869190611ba4565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611639565b6000611659600160701b6001600160701b038416611d7b565b60006116566001600160701b03831684611dad565b60005b83811015611a125781810151838201526020016119fa565b50506000910152565b6020815260008251806020840152611a3a8160408501602087016119f7565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146115b757600080fd5b600060208284031215611a7757600080fd5b61165682611a4e565b600080600060608486031215611a9557600080fd5b8335925060208401359150611aac60408501611a4e565b90509250925092565b60008060408385031215611ac857600080fd5b611ad183611a4e565b9150611adf60208401611a4e565b90509250929050565b60008060008060808587031215611afe57600080fd5b611b0785611a4e565b966020860135965060408601359560600135945092505050565b60008060008060808587031215611b3757600080fd5b611b4085611a4e565b9350611b4e60208601611a4e565b9250611b5c60408601611a4e565b9150611b6a60608601611a4e565b905092959194509250565b600060208284031215611b8757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561165957611659611b8e565b808202811582820484141761165957611659611b8e565b634e487b7160e01b600052601260045260246000fd5b600082611bf357611bf3611bce565b500490565b600181815b80851115611c33578160001904821115611c1957611c19611b8e565b80851615611c2657918102915b93841c9390800290611bfd565b509250929050565b600082611c4a57506001611659565b81611c5757506000611659565b8160018114611c6d5760028114611c7757611c93565b6001915050611659565b60ff841115611c8857611c88611b8e565b50506001821b611659565b5060208310610133831016604e8410600b8410161715611cb6575081810a611659565b611cc08383611bf8565b8060001904821115611cd457611cd4611b8e565b029392505050565b600061165660ff841683611c3b565b600060208284031215611cfd57600080fd5b81518015158114611d0d57600080fd5b9392505050565b8082018082111561165957611659611b8e565b600082611d3657611d36611bce565b500690565b63ffffffff828116828216039080821115611d5857611d58611b8e565b5092915050565b60008251611d718184602087016119f7565b9190910192915050565b6001600160e01b03828116828216818102831692918115828504821417611da457611da4611b8e565b50505092915050565b60006001600160e01b0383811680611dc757611dc7611bce565b9216919091049291505056fea264697066735822122081fa2eedffb022ceecc10055a7dacbbbc7c935c3bfe420e1e44083bdd672795f64736f6c63430008140033a26469706673582212209be8afb042b1a92aa2e8425b32b5d291e14c6a21466aac80843b422131825af364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063ad615dec116100b8578063e67729e31161007c578063e67729e3146104cd578063e6a43905146104d7578063ec671c831461050b578063f2fde38b14610515578063f92d3433146102b357600080fd5b8063ad615dec1461046e578063c08c625514610481578063c9c6539614610494578063d06ca61f146104a7578063e0abca0b146104ba57600080fd5b806383d4336d116100ff57806383d4336d146103ff5780638803dbee146104275780638d63c6651461043a5780638da5cb5b1461044a5780639cd076151461045b57600080fd5b8063715018a6146103c657806372fe25aa146103ce57806377553ad4146103dd578063794e5724146103f057600080fd5b80634a945f8d116101b35780635733d58f116101825780635733d58f1461035b578063574f2ba31461036a57806359827d47146103725780635ebe30c7146103855780636549192a1461039857600080fd5b80634a945f8d14610302578063502afb04146103175780635106046414610335578063522a86fe1461034857600080fd5b806328d28b5b116101fa57806328d28b5b146102b357806334ab0945146102c157806338ed1739146102d45780633d83908a146102e75780634870dd9a146102fa57600080fd5b806309230ad31461022c5780631e3dd18b146102645780631f00ca74146102775780632409266914610297575b600080fd5b61024773f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b610247610272366004612a23565b610528565b61028a610285366004612acc565b610552565b60405161025b9190612b77565b6102a566b1a2bc2ec5000081565b60405190815260200161025b565b6102a56611c37937e0800081565b61028a6102cf366004612c27565b6106bc565b61028a6102e2366004612cd1565b6107fb565b600154610247906001600160a01b031681565b6102a560c881565b610315610310366004612d44565b6109c5565b005b610320610bb881565b60405163ffffffff909116815260200161025b565b6102a5610343366004612db2565b610a8c565b600454610247906001600160a01b031681565b6102a56714d1120d7b16000081565b6006546102a5565b61028a610380366004612c27565b610b39565b61028a610393366004612df9565b610c2f565b6103ab6103a6366004612f4c565b610cde565b6040805193845260208401929092529082015260600161025b565b610315610e7a565b6102a5670de0b6b3a764000081565b600254610247906001600160a01b031681565b6102a5670f43fc2c04ee000081565b61041261040d366004613043565b610e8e565b6040805192835260208301919091520161025b565b61028a610435366004612cd1565b611415565b6102a5680ad78ebc5ac620000081565b6000546001600160a01b0316610247565b6102a5610469366004612db2565b6114b3565b6102a561047c3660046130c8565b611566565b6103ab61048f3660046130f4565b6115cf565b6102476104a236600461316e565b611bab565b61028a6104b5366004612acc565b611f4f565b600354610247906001600160a01b031681565b610320620f424081565b6102476104e536600461316e565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6103206207a12081565b6103156105233660046131a7565b61209b565b6006818154811061053857600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600282511015610577576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561059157610591612a3c565b6040519080825280602002602001820160405280156105ba578160200160208202803683370190505b5090508281600183516105cd91906131e1565b815181106105dd576105dd6131f4565b6020026020010181815250506000600183516105f991906131e1565b90505b80156106b5576000808061064c866106156001876131e1565b81518110610625576106256131f4565b602002602001015187868151811061063f5761063f6131f4565b60200260200101516120de565b925092509250610677858581518110610667576106676131f4565b60200260200101518484846114b3565b856106836001876131e1565b81518110610693576106936131f4565b60200260200101818152505050505080806106ad9061320a565b9150506105fc565b5092915050565b606081428110156106e057604051630407b05b60e31b815260040160405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090508681600081518110610715576107156131f4565b60200260200101906001600160a01b031690816001600160a01b031681525050600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190613221565b816001815181106107bf576107bf6131f4565b60200260200101906001600160a01b031690816001600160a01b0316815250506107ec898983898961222b565b9250505b509695505050505050565b6060814281101561081f57604051630407b05b60e31b815260040160405180910390fd5b61085c88878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f4f92505050565b915086826001845161086e91906131e1565b8151811061087e5761087e6131f4565b602002602001015110156108a5576040516342301c2360e01b815260040160405180910390fd5b610986868660008181106108bb576108bb6131f4565b90506020020160208101906108d091906131a7565b33600560008a8a60008181106108e8576108e86131f4565b90506020020160208101906108fd91906131a7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a8a6001818110610932576109326131f4565b905060200201602081019061094791906131a7565b6001600160a01b03908116825260208201929092526040016000908120548751921691879190610979576109796131f4565b60200260200101516124e9565b6107f0828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506125e4915050565b6109cd6127cb565b6109d6846127f8565b6109df836127f8565b6109e8826127f8565b6109f1816127f8565b600280546001600160a01b038681166001600160a01b031992831681179093556001805487831690841681179091556003805487841690851681179091556004805493871693909416831790935560408051948552602085019190915283019190915260608201527f1409d816dbb5d0b4943f2f83f2d88ae2e69c834a03e8cc4f41e3878f71f0f0bc9060800160405180910390a150505050565b600084600003610aaf5760405163098fb56160e01b815260040160405180910390fd5b831580610aba575082155b15610ad85760405163bb55fd2760e01b815260040160405180910390fd5b6000610ae783620f424061323e565b610af79063ffffffff168761325b565b90506000610b05858361325b565b9050600082610b17620f42408961325b565b610b219190613272565b9050610b2d8183613285565b98975050505050505050565b60608142811015610b5d57604051630407b05b60e31b815260040160405180910390fd5b60408051600280825260608201835260009260208301908036833750506004805460408051631bd817c960e01b815290519495506001600160a01b0390911693631bd817c99350818301926020928290030181865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190613221565b81600081518110610bfb57610bfb6131f4565b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106107bf576107bf6131f4565b606087876000818110610c4457610c446131f4565b9050602002016020810190610c5991906131a7565b6001600160a01b031663d505accf33308d898989896040518863ffffffff1660e01b8152600401610c9097969594939291906132a7565b600060405180830381600087803b158015610caa57600080fd5b505af1158015610cbe573d6000803e3d6000fd5b50505050610cd08a8a8a8a8a8a6107fb565b9a9950505050505050505050565b60008060008d6001600160a01b031663d505accf33308f8b8b600081518110610d0957610d096131f4565b60200260200101518b600081518110610d2457610d246131f4565b60200260200101518b600081518110610d3f57610d3f6131f4565b60200260200101516040518863ffffffff1660e01b8152600401610d6997969594939291906132a7565b600060405180830381600087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050508c6001600160a01b031663d505accf33308e8b8b600181518110610dc157610dc16131f4565b60200260200101518b600181518110610ddc57610ddc6131f4565b60200260200101518b600181518110610df757610df76131f4565b60200260200101516040518863ffffffff1660e01b8152600401610e2197969594939291906132a7565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b50505050610e638e8e8e8e8e8e8e8e6115cf565b9250925092509b509b509b98505050505050505050565b610e826127cb565b610e8c6000612847565b565b6000808242811015610eb357604051630407b05b60e31b815260040160405180910390fd5b610efe6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b610f088c8c612897565b8260000183602001826001600160a01b03166001600160a01b0316815250826001600160a01b03166001600160a01b031681525050506000600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050806001600160a01b031663de7bf0a2338d600160009054906101000a90046001600160a01b03166001600160a01b031663fa973daa33886000015160006040518463ffffffff1660e01b8152600401611018939291906001600160a01b039384168152919092166020820152901515604082015260600190565b602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906132e8565b6001546020880151604051637d4b9ed560e11b81523360048201526001600160a01b0391821660248201526000604482015291169063fa973daa90606401602060405180830381865afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d891906132e8565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016080604051808303816000875af1158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190613301565b60a08601526080850181905260608501919091526040840191909152151580611180575060a082015115155b15611390576060826080015160001415801561119f575060a083015115155b15611270576040805160028082526060820190925290816020015b60408051808201909152600080825260208201528152602001906001900390816111ba579050509050604051806040016040528084600001516001600160a01b0316815260200184608001518152508160008151811061121c5761121c6131f4565b6020026020010181905250604051806040016040528084602001516001600160a01b031681526020018460a0015181525081600181518110611260576112606131f4565b6020026020010181905250611326565b60408051600180825281830190925290816020015b604080518082019091526000808252602082015281526020019060019003908161128557905050905082608001516000036112e557604051806040016040528084602001516001600160a01b031681526020018460a00151815250611307565b6040805180820190915283516001600160a01b03168152608084015160208201525b8160008151811061131a5761131a6131f4565b60200260200101819052505b60025460405163483cbfcd60e01b81526001600160a01b039091169063483cbfcd9061135c90339085908e908e90600401613386565b600060405180830381600087803b15801561137657600080fd5b505af115801561138a573d6000803e3d6000fd5b50505050505b81516001600160a01b038e81169116146113b357816060015182604001516113be565b816040015182606001515b9095509350898510156113e457604051638dc525d160e01b815260040160405180910390fd5b888410156114055760405163ef71d09160e01b815260040160405180910390fd5b5050509850989650505050505050565b6060814281101561143957604051630407b05b60e31b815260040160405180910390fd5b6114768887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061055292505050565b9150868260008151811061148c5761148c6131f4565b602002602001015111156108a55760405163e1b0da4f60e01b815260040160405180910390fd5b6000846000036114d6576040516342301c2360e01b815260040160405180910390fd5b8315806114e1575082155b156114ff5760405163bb55fd2760e01b815260040160405180910390fd5b6000620f424061150f878761325b565b611519919061325b565b9050600061152a84620f424061323e565b63ffffffff1661153a88876131e1565b611544919061325b565b90506115508183613285565b61155b906001613272565b979650505050505050565b60008360000361158957604051632ca2f52b60e11b815260040160405180910390fd5b821580611594575081155b156115b25760405163bb55fd2760e01b815260040160405180910390fd5b826115bd838661325b565b6115c79190613285565b949350505050565b600080600083428110156115f657604051630407b05b60e31b815260040160405180910390fd5b61163f6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031681600001906001600160a01b031690816001600160a01b03168152505060006001600160a01b031681600001516001600160a01b0316036116ef5760405163317f12fd60e21b815260040160405180910390fd5b6000806116fc8f8f6120de565b509150915081600014801561170f575080155b1561171f578c96508b95506117a9565b600061172c8e8484611566565b90508c8111611761578a8110156117565760405163ef71d09160e01b815260040160405180910390fd5b8d97509550856117a7565b600061176e8e8486611566565b90508e811115611780576117806133c1565b8c8110156117a157604051638dc525d160e01b815260040160405180910390fd5b97508c96505b505b50506040516370a0823160e01b81523360048201526001600160a01b038e16906370a0823190602401602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181391906132e8565b60208201526040516370a0823160e01b81523360048201526001600160a01b038d16906370a0823190602401602060405180830381865afa15801561185c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188091906132e8565b6040820152602081015161189490866129fc565b606082015260408101516118a890856129fc565b608082015260608101516118bc90866131e1565b60a082015260808101516118d090856131e1565b60c082015260a08101511515806118ea575060c081015115155b15611af05760608160a00151600014158015611909575060c082015115155b156119d2576040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161192457905050905060405180604001604052808f6001600160a01b031681526020018360a0015181525081600081518110611982576119826131f4565b602002602001018190525060405180604001604052808e6001600160a01b031681526020018360c00151815250816001815181106119c2576119c26131f4565b6020026020010181905250611a85565b60408051600180825281830190925290816020015b60408051808201909152600080825260208201528152602001906001900390816119e75790505090508160a00151600003611a435760405180604001604052808e6001600160a01b031681526020018360c00151815250611a66565b60405180604001604052808f6001600160a01b031681526020018360a001518152505b81600081518110611a7957611a796131f4565b60200260200101819052505b60025482516040516378d5f8d560e11b81526001600160a01b039092169163f1abf1aa91611abc9133919086908e906004016133d7565b600060405180830381600087803b158015611ad657600080fd5b505af1158015611aea573d6000803e3d6000fd5b50505050505b606081015115611b0e57611b0e8d33836000015184606001516124e9565b608081015115611b2c57611b2c8c33836000015184608001516124e9565b80516040516335313c2160e11b81523360048201526001600160a01b0390911690636a627842906024016020604051808303816000875af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906132e8565b92505050985098509895505050505050565b6000611bb56127cb565b816001600160a01b0316836001600160a01b031603611be757604051630bd969eb60e41b815260040160405180910390fd5b6004805460408051631bd817c960e01b815290516001600160a01b0390921692631bd817c99282820192602092908290030181865afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c529190613221565b6001600160a01b0316836001600160a01b031614158015611cef57506004805460408051631bd817c960e01b815290516001600160a01b0390921692631bd817c99282820192602092908290030181865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd99190613221565b6001600160a01b0316826001600160a01b031614155b15611d0d57604051632b6d678960e21b815260040160405180910390fd5b600080611d1a8585612897565b90925090506001600160a01b038216611d465760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03828116600090815260056020908152604080832085851684529091529020541615611d8c57604051633d77e89160e01b815260040160405180910390fd5b600060405180602001611d9e90612a16565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560048054600354604051637c643b2f60e11b81526001600160a01b0389811694820194909452878416602482015291831660448301528216606482015291965086169063f8c8765e90608401600060405180830381600087803b158015611e6757600080fd5b505af1158015611e7b573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6060600282511015611f74576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff811115611f8e57611f8e612a3c565b604051908082528060200260200182016040528015611fb7578160200160208202803683370190505b5090508281600081518110611fce57611fce6131f4565b60200260200101818152505060005b60018351611feb91906131e1565b8110156106b557600080600061203286858151811061200c5761200c6131f4565b6020026020010151878660016120229190613272565b8151811061063f5761063f6131f4565b92509250925061205d85858151811061204d5761204d6131f4565b6020026020010151848484610a8c565b85612069866001613272565b81518110612079576120796131f4565b60200260200101818152505050505080806120939061342c565b915050611fdd565b6120a36127cb565b6001600160a01b0381166120d257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6120db81612847565b50565b6001600160a01b03808316600090815260056020908152604080832085851684528252808320548151631a995bed60e31b815291519394859485949290911692839263d4cadf68926004808401938290030181865afa158015612145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121699190613445565b9150600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156121ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d09190613479565b506001600160701b031691506001600160701b0316915060006121f38989612897565b509050806001600160a01b0316896001600160a01b031614612216578183612219565b82825b909a9099509497509395505050505050565b606060006005600086600081518110612246576122466131f4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086600181518110612283576122836131f4565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054169050806122cb5760405163317f12fd60e21b815260040160405180910390fd5b6122d58786611f4f565b91508582600184516122e791906131e1565b815181106122f7576122f76131f4565b6020026020010151101561231e576040516342301c2360e01b815260040160405180910390fd5b60045485516001600160a01b039091169063a95bbced908790600090612346576123466131f4565b60200260200101516040518263ffffffff1660e01b815260040161237991906001600160a01b0391909116815260200190565b602060405180830381865afa158015612396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ba9190613221565b50604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816123d2579050509050604051806040016040528087600081518110612419576124196131f4565b60200260200101516001600160a01b0316815260200184600081518110612442576124426131f4565b602002602001015181525081600081518110612460576124606131f4565b60209081029190910101526002546040516378d5f8d560e11b81526001600160a01b039091169063f1abf1aa906124a1903390869086908a906004016133d7565b600060405180830381600087803b1580156124bb57600080fd5b505af11580156124cf573d6000803e3d6000fd5b505050506124de8387876125e4565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161254d91906134c0565b6000604051808303816000865af19150503d806000811461258a576040519150601f19603f3d011682016040523d82523d6000602084013e61258f565b606091505b50915091508115806125be5750600081511180156125be5750808060200190518101906125bc91906134ef565b155b156125dc57604051631e4e7d0960e21b815260040160405180910390fd5b505050505050565b60005b600183516125f591906131e1565b8110156127c557600080848381518110612611576126116131f4565b6020026020010151858460016126279190613272565b81518110612637576126376131f4565b602002602001015191509150600061264f8383612897565b509050600087612660866001613272565b81518110612670576126706131f4565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461269e578260006126a2565b6000835b91509150600060028a516126b691906131e1565b88106126c25788612720565b6001600160a01b0386166000908152600560205260408120908b6126e78b6002613272565b815181106126f7576126f76131f4565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054165b6001600160a01b0388811660009081526005602090815260408083208b85168452909152908190205490516336cd320560e11b8152600481018790526024810186905283831660448201529293501690636d9a640a90606401600060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b505050505050505050505080806127bd9061342c565b9150506125e7565b50505050565b6000546001600160a01b03163314610e8c5760405163118cdaa760e01b81523360048201526024016120c9565b6001600160a01b03811661281f5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361284357604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316846001600160a01b0316036128cc57604051630bd969eb60e41b815260040160405180910390fd5b6001600160a01b03841615806128e957506001600160a01b038316155b156129075760405163d92e233d60e01b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129809190613221565b9050806001600160a01b0316856001600160a01b0316036129a757848492509250506129f5565b806001600160a01b0316846001600160a01b0316036129cc57838592509250506129f5565b836001600160a01b0316856001600160a01b0316106129ec5783856129ef565b84845b92509250505b9250929050565b6000818310612a0b5781612a0d565b825b90505b92915050565b611f0b8061351283390190565b600060208284031215612a3557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7b57612a7b612a3c565b604052919050565b600067ffffffffffffffff821115612a9d57612a9d612a3c565b5060051b60200190565b6001600160a01b03811681146120db57600080fd5b8035612ac781612aa7565b919050565b60008060408385031215612adf57600080fd5b8235915060208084013567ffffffffffffffff811115612afe57600080fd5b8401601f81018613612b0f57600080fd5b8035612b22612b1d82612a83565b612a52565b81815260059190911b82018301908381019088831115612b4157600080fd5b928401925b82841015612b68578335612b5981612aa7565b82529284019290840190612b46565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612baf57835183529284019291840191600101612b93565b50909695505050505050565b600060608284031215612bcd57600080fd5b6040516060810181811067ffffffffffffffff82111715612bf057612bf0612a3c565b6040529050808235612c0181612aa7565b81526020830135612c1181612aa7565b6020820152604092830135920191909152919050565b6000806000806000806101008789031215612c4157600080fd5b86359550602087013594506040870135612c5a81612aa7565b93506060870135612c6a81612aa7565b9250612c798860808901612bbb565b915060e087013590509295509295509295565b60008083601f840112612c9e57600080fd5b50813567ffffffffffffffff811115612cb657600080fd5b6020830191508360208260051b85010111156129f557600080fd5b60008060008060008060a08789031215612cea57600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612d0f57600080fd5b612d1b89828a01612c8c565b9095509350506060870135612d2f81612aa7565b80925050608087013590509295509295509295565b60008060008060808587031215612d5a57600080fd5b8435612d6581612aa7565b93506020850135612d7581612aa7565b92506040850135612d8581612aa7565b91506060850135612d9581612aa7565b939692955090935050565b63ffffffff811681146120db57600080fd5b60008060008060808587031215612dc857600080fd5b8435935060208501359250604085013591506060850135612d9581612da0565b803560ff81168114612ac757600080fd5b60008060008060008060008060006101008a8c031215612e1857600080fd5b8935985060208a0135975060408a013567ffffffffffffffff811115612e3d57600080fd5b612e498c828d01612c8c565b90985096505060608a0135612e5d81612aa7565b945060808a01359350612e7260a08b01612de8565b925060c08a0135915060e08a013590509295985092959850929598565b600082601f830112612ea057600080fd5b81356020612eb0612b1d83612a83565b82815260059290921b84018101918181019086841115612ecf57600080fd5b8286015b848110156107f057612ee481612de8565b8352918301918301612ed3565b600082601f830112612f0257600080fd5b81356020612f12612b1d83612a83565b82815260059290921b84018101918181019086841115612f3157600080fd5b8286015b848110156107f05780358352918301918301612f35565b60008060008060008060008060008060006101a08c8e031215612f6e57600080fd5b612f778c612abc565b9a50612f8560208d01612abc565b995060408c0135985060608c0135975060808c0135965060a08c01359550612fb08d60c08e01612bbb565b94506101208c0135935067ffffffffffffffff806101408e01351115612fd557600080fd5b612fe68e6101408f01358f01612e8f565b9350806101608e01351115612ffa57600080fd5b61300b8e6101608f01358f01612ef1565b9250806101808e0135111561301f57600080fd5b506130318d6101808e01358e01612ef1565b90509295989b509295989b9093969950565b600080600080600080600080610100898b03121561306057600080fd5b883561306b81612aa7565b9750602089013561307b81612aa7565b965060408901359550606089013594506080890135935060a08901356130a081612aa7565b925060c08901356130b081612aa7565b8092505060e089013590509295985092959890939650565b6000806000606084860312156130dd57600080fd5b505081359360208301359350604090920135919050565b600080600080600080600080610140898b03121561311157600080fd5b883561311c81612aa7565b9750602089013561312c81612aa7565b965060408901359550606089013594506080890135935060a089013592506131578a60c08b01612bbb565b915061012089013590509295985092959890939650565b6000806040838503121561318157600080fd5b823561318c81612aa7565b9150602083013561319c81612aa7565b809150509250929050565b6000602082840312156131b957600080fd5b81356131c481612aa7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115612a1057612a106131cb565b634e487b7160e01b600052603260045260246000fd5b600081613219576132196131cb565b506000190190565b60006020828403121561323357600080fd5b81516131c481612aa7565b63ffffffff8281168282160390808211156106b5576106b56131cb565b8082028115828204841417612a1057612a106131cb565b80820180821115612a1057612a106131cb565b6000826132a257634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000602082840312156132fa57600080fd5b5051919050565b6000806000806080858703121561331757600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081518084526020808501945080840160005b8381101561337b57815180516001600160a01b03168852830151838801526040909601959082019060010161334b565b509495945050505050565b600060018060a01b038087168352608060208401526133a86080840187613337565b9481166040840152929092166060909101525092915050565b634e487b7160e01b600052600160045260246000fd5b600060018060a01b038087168352808616602084015260c0604084015261340160c0840186613337565b915080845116606084015280602085015116608084015250604083015160a083015295945050505050565b60006001820161343e5761343e6131cb565b5060010190565b60006020828403121561345757600080fd5b81516131c481612da0565b80516001600160701b0381168114612ac757600080fd5b60008060006060848603121561348e57600080fd5b61349784613462565b92506134a560208501613462565b915060408401516134b581612da0565b809150509250925092565b6000825160005b818110156134e157602081860181015185830152016134c7565b506000920191825250919050565b60006020828403121561350157600080fd5b815180151581146131c457600080fdfe60806040526001600d5534801561001557600080fd5b5060408051808201825260048152630537761760e41b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbce316f0d9d2a3affa97de1d99bb2aac0538e2666d0d8545545ead241ef0ccab818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055611e09806101026000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806370a0823111610130578063bc25cf77116100b8578063e67729e31161007c578063e67729e31461052a578063ec671c8314610534578063f8c8765e1461053e578063f92d343314610304578063fff6cae91461055157600080fd5b8063bc25cf771461049e578063d21220a7146104b1578063d4cadf68146104c4578063dd62ed3e146104cc578063de7bf0a2146104f757600080fd5b80637ecebe00116100ff5780637ecebe001461042f5780638b33b4b21461044f5780638d63c6651461046257806395d89b4114610472578063ba9a7a561461049557600080fd5b806370a08231146103de57806372fe25aa146103fe578063741bef1a1461040d578063794e57241461042057600080fd5b80633644e515116101b35780635733d58f116101825780635733d58f146103955780635909c0d5146103a45780635a3d5493146103ad5780636a627842146103b65780636d9a640a146103c957600080fd5b80633644e515146103535780634870dd9a1461035c578063502afb0414610364578063522a86fe1461038257600080fd5b806318160ddd116101fa57806318160ddd146102df57806324092669146102f657806328d28b5b1461030457806330adf81f14610312578063313ce5671461033957600080fd5b806306fdde031461022c5780630902f1ac1461026557806309230ad3146102995780630dfe1681146102cc575b600080fd5b61024f604051806040016040528060048152602001630537761760e41b81525081565b60405161025c9190611a1b565b60405180910390f35b61026d610559565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161025c565b6102b473f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b03909116815260200161025c565b6008546102b4906001600160a01b031681565b6102e860005481565b60405190815260200161025c565b6102e866b1a2bc2ec5000081565b6102e86611c37937e0800081565b6102e87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610341601281565b60405160ff909116815260200161025c565b6102e860035481565b6102e860c881565b61036d610bb881565b60405163ffffffff909116815260200161025c565b6007546102b4906001600160a01b031681565b6102e86714d1120d7b16000081565b6102e8600b5481565b6102e8600c5481565b6102e86103c4366004611a65565b610583565b6103dc6103d7366004611a80565b6107e2565b005b6102e86103ec366004611a65565b60016020526000908152604090205481565b6102e8670de0b6b3a764000081565b6006546102b4906001600160a01b031681565b6102e8670f43fc2c04ee000081565b6102e861043d366004611a65565b60046020526000908152604090205481565b6005546102b4906001600160a01b031681565b6102e8680ad78ebc5ac620000081565b61024f604051806040016040528060048152602001630535741560e41b81525081565b6102e86103e881565b6103dc6104ac366004611a65565b610cd6565b6009546102b4906001600160a01b031681565b61036d610dea565b6102e86104da366004611ab5565b600260209081526000928352604080842090915290825290205481565b61050a610505366004611ae8565b610f86565b60408051948552602085019390935291830152606082015260800161025c565b61036d620f424081565b61036d6207a12081565b6103dc61054c366004611b21565b61137f565b6103dc6113fa565b600a546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000600d546000036105a8576040516303cb96db60e21b815260040160405180910390fd5b6000600d556105b561151f565b6000806105c0610559565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190611b75565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190611b75565b905060006106bf6001600160701b03861684611ba4565b905060006106d66001600160701b03861684611ba4565b60008054919250819003610717576103e86106f96106f48486611bb7565b61154c565b6107039190611ba4565b975061071260006103e86115bc565b61075e565b61075b6001600160701b03881661072e8386611bb7565b6107389190611be4565b6001600160701b03881661074c8486611bb7565b6107569190611be4565b611645565b97505b8760000361077f57604051633489be7560e21b815260040160405180910390fd5b61078989896115bc565b6107958585898961165f565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600d55509395945050505050565b600d54600003610805576040516303cb96db60e21b815260040160405180910390fd5b6000600d5561081261151f565b8215801561081e575081155b1561083c576040516342301c2360e01b815260040160405180910390fd5b600a546001600160701b03168311806108665750600a54600160701b90046001600160701b031682115b156108845760405163bb55fd2760e01b815260040160405180910390fd5b60085460095460009182916001600160a01b03918216919081169085168214806108bf5750806001600160a01b0316856001600160a01b0316145b156108dd57604051630521f43160e31b815260040160405180910390fd5b86156108ee576108ee828689611824565b85156108ff576108ff818688611824565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190611b75565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611b75565b600a549093506000906109ef9089906001600160701b0316611ba4565b85116109fc576000610a1d565b600a54610a139089906001600160701b0316611ba4565b610a1d9086611ba4565b600a54909150600090610a41908990600160701b90046001600160701b0316611ba4565b8511610a4e576000610a76565b600a54610a6c908990600160701b90046001600160701b0316611ba4565b610a769086611ba4565b905081158015610a84575080155b15610aa25760405163098fb56160e01b815260040160405180910390fd5b6000610aac610dea565b90506000610ac063ffffffff831685611bb7565b610acd620f42408a611bb7565b610ad79190611ba4565b90506000610aeb63ffffffff841685611bb7565b610af8620f42408a611bb7565b610b029190611ba4565b9050610b126002620f4240611cdc565b600a54610b31906001600160701b03600160701b820481169116611bb7565b610b3b9190611bb7565b610b458284611bb7565b1015610b645760405163a932492f60e01b815260040160405180910390fd5b50508215610bd3576000610b7c6002620f4240611cdc565b6207a120610b9063ffffffff851687611bb7565b610b9a9190611bb7565b610ba49190611be4565b9050610bc58673f39fd6e51aad88f6f4ce6ab8827279cfffb9226683611824565b610bcf8189611ba4565b9750505b8115610c40576000610be96002620f4240611cdc565b6207a120610bfd63ffffffff851686611bb7565b610c079190611bb7565b610c119190611be4565b9050610c328573f39fd6e51aad88f6f4ce6ab8827279cfffb9226683611824565b610c3c8188611ba4565b9650505b600a54610c6490889088906001600160701b0380821691600160701b90041661165f565b60408051848152602081018490529081018b9052606081018a905263ffffffff821660808201526001600160a01b0389169033907f485fd455f44df610bbdb723335bb24947ffc723ae537fb9f82dc8e5ee6f63b019060a00160405180910390a350506001600d555050505050505050565b600d54600003610cf9576040516303cb96db60e21b815260040160405180910390fd5b6000600d55600854600954600a546040516370a0823160e01b81523060048201526001600160a01b039384169390921691610d9891849186916001600160701b03169083906370a08231906024015b602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d899190611b75565b610d939190611ba4565b611824565b600a546040516370a0823160e01b8152306004820152610de09183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401610d48565b50506001600d5550565b600954600754604051633803473960e01b81526001600160a01b039283166004820181905260009390921690633803473990602401602060405180830381865afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611ceb565b610e6d57610bb891505090565b600054600003610e8057610bb891505090565b6006546040516341976e0960e01b81526001600160a01b03838116600483015260009216906341976e0990602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190611b75565b600a549091506000906001600160701b03600160701b8204811691610f1e91670de0b6b3a76400009116611bb7565b610f289190611be4565b905080821015610f3d57610bb8935050505090565b600081610f52670de0b6b3a764000085611bb7565b610f5c9190611be4565b9050670de0b6b3a7640000610f73610bb883611bb7565b610f7d9190611be4565b94505050505090565b600080600080600d54600003610faf576040516303cb96db60e21b815260040160405180910390fd5b6000600d55610fbc61151f565b600080610fc7610559565b506008546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190611b75565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611b75565b600054909150806110c0848e611bb7565b6110ca9190611be4565b9850806110d7838e611bb7565b6110e19190611be4565b97508815806110ee575087155b1561110c5760405163749383ad60e01b815260040160405180910390fd5b6111168d8d611946565b506111218a89611645565b955061112d8988611645565b9450851561119a57600854604051632770a7eb60e21b8152306004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561118157600080fd5b505af1158015611195573d6000803e3d6000fd5b505050505b841561120557600954604051632770a7eb60e21b8152306004820152602481018790526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050505b600854611220906001600160a01b03168d610d93898c611ba4565b60095461123b906001600160a01b03168d610d93888b611ba4565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a79190611b75565b6009546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a0823190602401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190611b75565b90506113228282868661165f565b60408051898152602081018990526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a3505050506001600d81905550945094509450949050565b6005546001600160a01b031633146113aa57604051631dd2188d60e31b815260040160405180910390fd5b600880546001600160a01b039586166001600160a01b0319918216179091556009805494861694821694909417909355600780549285169284169290921790915560068054919093169116179055565b600d5460000361141d576040516303cb96db60e21b815260040160405180910390fd5b6000600d556008546040516370a0823160e01b8152306004820152611518916001600160a01b0316906370a0823190602401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190611b75565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190611b75565b600a546001600160701b0380821691600160701b90041661165f565b6001600d55565b6005546001600160a01b0316331461154a5760405163091664d760e11b815260040160405180910390fd5b565b600060038211156115ad5750806000611566600283611be4565b611571906001611d14565b90505b818110156115a75790508060028161158c8186611be4565b6115969190611d14565b6115a09190611be4565b9050611574565b50919050565b81156115b7575060015b919050565b806000808282546115cd9190611d14565b90915550506001600160a01b038216600090815260016020526040812080548392906115fa908490611d14565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106116545781611656565b825b90505b92915050565b6001600160701b0384118061167a57506001600160701b0383115b1561169857604051631a93c68960e11b815260040160405180910390fd5b60006116a964010000000042611d27565b600a549091506000906116c990600160e01b900463ffffffff1683611d3b565b905060008163ffffffff161180156116e957506001600160701b03841615155b80156116fd57506001600160701b03831615155b1561178c578063ffffffff1661172585611716866119c9565b6001600160e01b0316906119e2565b6001600160e01b03166117389190611bb7565b600b60008282546117499190611d14565b909155505063ffffffff811661176284611716876119c9565b6001600160e01b03166117759190611bb7565b600c60008282546117869190611d14565b90915550505b600a805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916118b09190611d5f565b6000604051808303816000865af19150503d80600081146118ed576040519150601f19603f3d011682016040523d82523d6000602084013e6118f2565b606091505b509150915081158061192157506000815111801561192157508080602001905181019061191f9190611ceb565b155b1561193f576040516312171d8360e31b815260040160405180910390fd5b5050505050565b6001600160a01b0382166000908152600160205260408120805483929061196e908490611ba4565b92505081905550806000808282546119869190611ba4565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611639565b6000611659600160701b6001600160701b038416611d7b565b60006116566001600160701b03831684611dad565b60005b83811015611a125781810151838201526020016119fa565b50506000910152565b6020815260008251806020840152611a3a8160408501602087016119f7565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146115b757600080fd5b600060208284031215611a7757600080fd5b61165682611a4e565b600080600060608486031215611a9557600080fd5b8335925060208401359150611aac60408501611a4e565b90509250925092565b60008060408385031215611ac857600080fd5b611ad183611a4e565b9150611adf60208401611a4e565b90509250929050565b60008060008060808587031215611afe57600080fd5b611b0785611a4e565b966020860135965060408601359560600135945092505050565b60008060008060808587031215611b3757600080fd5b611b4085611a4e565b9350611b4e60208601611a4e565b9250611b5c60408601611a4e565b9150611b6a60608601611a4e565b905092959194509250565b600060208284031215611b8757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561165957611659611b8e565b808202811582820484141761165957611659611b8e565b634e487b7160e01b600052601260045260246000fd5b600082611bf357611bf3611bce565b500490565b600181815b80851115611c33578160001904821115611c1957611c19611b8e565b80851615611c2657918102915b93841c9390800290611bfd565b509250929050565b600082611c4a57506001611659565b81611c5757506000611659565b8160018114611c6d5760028114611c7757611c93565b6001915050611659565b60ff841115611c8857611c88611b8e565b50506001821b611659565b5060208310610133831016604e8410600b8410161715611cb6575081810a611659565b611cc08383611bf8565b8060001904821115611cd457611cd4611b8e565b029392505050565b600061165660ff841683611c3b565b600060208284031215611cfd57600080fd5b81518015158114611d0d57600080fd5b9392505050565b8082018082111561165957611659611b8e565b600082611d3657611d36611bce565b500690565b63ffffffff828116828216039080821115611d5857611d58611b8e565b5092915050565b60008251611d718184602087016119f7565b9190910192915050565b6001600160e01b03828116828216818102831692918115828504821417611da457611da4611b8e565b50505092915050565b60006001600160e01b0383811680611dc757611dc7611bce565b9216919091049291505056fea264697066735822122081fa2eedffb022ceecc10055a7dacbbbc7c935c3bfe420e1e44083bdd672795f64736f6c63430008140033a26469706673582212209be8afb042b1a92aa2e8425b32b5d291e14c6a21466aac80843b422131825af364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20340,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)12034"
      },
      {
        "astId": 20343,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBorrowerOperations)9809"
      },
      {
        "astId": 20345,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 20348,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDebtTokenManager)10132"
      },
      {
        "astId": 20354,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "getPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 20357,
        "contract": "contracts/SwapOperations.sol:SwapOperations",
        "label": "allPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBorrowerOperations)9809": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)10132": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)12034": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}