{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "name": "EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLiquidatableTrove",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storgePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPool",
          "type": "address"
        }
      ],
      "name": "LiquidationOperationsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "liquidatedDebt",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "liquidatedColl",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStableCoinGasCompensation",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "totalCollGasCompensation",
          "type": "tuple[]"
        }
      ],
      "name": "LiquidationSummary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collTokenManager",
      "outputs": [
        {
          "internalType": "contract ICollTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolManager",
      "outputs": [
        {
          "internalType": "contract IStabilityPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb218b76c26fd03b4f208d1c31a3e90f67c5c25e3c439ba0a8339386fa554911b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2605797",
    "logsBloom": "0x
    "blockHash": "0x707ef0ca1e4332f6d98884c1aa0d05f34fd737e39314f854bbd412e49f435408",
    "transactionHash": "0xb218b76c26fd03b4f208d1c31a3e90f67c5c25e3c439ba0a8339386fa554911b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xb218b76c26fd03b4f208d1c31a3e90f67c5c25e3c439ba0a8339386fa554911b",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x707ef0ca1e4332f6d98884c1aa0d05f34fd737e39314f854bbd412e49f435408"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2605797",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLiquidatableTrove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storgePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPool\",\"type\":\"address\"}],\"name\":\"LiquidationOperationsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"liquidatedDebt\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"liquidatedColl\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStableCoinGasCompensation\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"totalCollGasCompensation\",\"type\":\"tuple[]\"}],\"name\":\"LiquidationSummary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collTokenManager\",\"outputs\":[{\"internalType\":\"contract ICollTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolManager\",\"outputs\":[{\"internalType\":\"contract IStabilityPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationOperations.sol\":\"LiquidationOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface ICollSurplusPool is IBase {\\n  // --- Events ---\\n\\n  event CollSurplusPoolInitialized(address _liquidationOperationsAddress, address _borrowerOperationsAddress);\\n  event CollBalanceUpdated(address indexed _account, TokenAmount[] _collSurplus);\\n  event CollClaimed(address _to);\\n\\n  error NotFromProtocol();\\n\\n  // --- Contract setters ---\\n\\n  function getCollateral(address _account) external view returns (TokenAmount[] memory);\\n\\n  function accountSurplus(address _account, RAmount[] memory _collSurplus) external;\\n\\n  function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1c68fd6b271971b35fc119ca80159ac77f35b90b4344f7eb4dc134b80c641e1f\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICollTokenManager {\\n  // --- Events ---\\n  event CollTokenManagerInitialized(address _priceFeedAddress);\\n  event CollTokenAdded(address _collTokenAddress);\\n\\n  // --- Custom Errors ---\\n  error TokenAlreadyAdded();\\n\\n  // --- Functions ---\\n\\n  function getCollTokenAddresses() external view returns (address[] memory);\\n\\n  function addCollToken(address _tokenAddress) external;\\n}\\n\",\"keccak256\":\"0x841232977bec6eff931b093b931a48a17dec71e92b89c9d603975787f9d5ca42\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquidationOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface ILiquidationOperations is IBBase {\\n  // --- Events ---\\n\\n  event LiquidationOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager,\\n    address _stabilityPoolManager,\\n    address _collSurplusPool\\n  );\\n\\n  event LiquidationSummary(\\n    TokenAmount[] liquidatedDebt,\\n    TokenAmount[] liquidatedColl,\\n    uint totalStableCoinGasCompensation,\\n    TokenAmount[] totalCollGasCompensation\\n  );\\n\\n  // --- Errors ---\\n\\n  error NoLiquidatableTrove();\\n  error EmptyArray();\\n\\n  // --- Functions ---\\n\\n  function liquidate(address _borrower) external;\\n\\n  function batchLiquidateTroves(address[] calldata _troveArray) external;\\n}\\n\",\"keccak256\":\"0x204de13666ecf325a9a26e63c3b7fab3a34efc7c2b05cbbfb599df518abb78f0\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IRedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface IRedemptionOperations is IBBase {\\n  // --- structs ---\\n\\n  struct RedemptionCollAmount {\\n    address collToken;\\n    uint drawn;\\n    uint redemptionFee;\\n    uint sendToRedeemer;\\n  }\\n\\n  struct RedeemIteration {\\n    address trove;\\n    address upperHint;\\n    address lowerHint;\\n    uint expectedCR;\\n  }\\n\\n  struct SingleRedemptionVariables {\\n    TokenAmount stableCoinEntry;\\n    //\\n    uint stableCoinLot; // redeemer pays for the debts of the trove owner\\n    TokenAmount[] collLots; // will be removed from the troves coll and paid to the redeemer\\n    //\\n    uint troveCollInUSD;\\n    uint troveDebtInUSD;\\n    uint resultingCR;\\n  }\\n\\n  // --- Events ---\\n\\n  event RedemptionOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager,\\n    address _sortedTrovesAddress\\n  );\\n  event RedeemedFromTrove(address _borrower, uint stableAmount, TokenAmount[] _drawnCollAmounts);\\n  event SuccessfulRedemption(\\n    uint _attemptedStableAmount,\\n    uint _actualStableAmount,\\n    RedemptionCollAmount[] _collPayouts\\n  );\\n\\n  // --- Errors ---\\n\\n  error ZeroAmount();\\n  error InvalidMaxFeePercent();\\n  error LessThanMCR();\\n  error ExceedDebtBalance();\\n  error NoRedeems();\\n  error GreaterThanTCR();\\n  error TooHighRedeemFee();\\n  error InvalidRedemptionHint();\\n  error HintUnknown();\\n  error HintBelowMCR();\\n  error InvalidHintLowerCRExists();\\n\\n  // --- Functions ---\\n\\n  function redeemCollateral(\\n    uint _stableCoinAmount,\\n    RedeemIteration[] memory _iterations,\\n    uint _maxFeePercentage\\n  ) external;\\n\\n  function calculateTroveRedemption(\\n    address _borrower,\\n    uint _redeemMaxAmount,\\n    bool _includePendingRewards\\n  ) external returns (SingleRedemptionVariables memory vars);\\n\\n  function getRedemptionRate() external view returns (uint);\\n\\n  function getRedemptionRateWithDecay() external view returns (uint);\\n\\n  function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa9f8b839866838838f3ea032e2845b0d88e23cb8e0057b3408d0210c2cdd124e\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface IStabilityPoolManager is IBBase {\\n  // --- Events ---\\n\\n  event StabilityPoolManagerInitiated(\\n    address liquidationOperationsAddress,\\n    address storgePoolAddress,\\n    address reservePoolAddress,\\n    address debtTokenManagerAddress,\\n    address priceFeedAddress\\n  );\\n  event StabilityPoolAdded(address stabilityPoolAddress);\\n\\n  // --- Custom Errors ---\\n  error NotFromLiquidationOps();\\n  error NotFromReservePool();\\n  error PoolNotExist();\\n  error PoolExist();\\n  error Unauthorized();\\n\\n  // --- Functions ---\\n  function getStabilityPool(IDebtToken _debtToken) external view returns (IStabilityPool);\\n\\n  function getRemainingStability(\\n    address[] memory collTokenAddresses\\n  ) external view returns (RemainingStability[] memory);\\n\\n  function getTotalDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getTotalDeposit(address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getDepositorDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorDeposit(address _depositor, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getCompoundedDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCompoundedDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view returns (uint amount);\\n\\n  function getDepositorCompoundedDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCollGains(\\n    address _depositor,\\n    address[] memory collTokenAddresses\\n  ) external view returns (TokenAmount[] memory collGains);\\n\\n  function provideStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawGains() external;\\n\\n  function offset(RemainingStability[] memory _toOffset) external;\\n\\n  function addStabilityPool(IDebtToken _debtToken) external;\\n}\\n\",\"keccak256\":\"0x2143d797199cdfc6918f43fe576542938ed8dc7ea1a8f616ca27e334f222726b\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/LiquidationOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ICollTokenManager.sol';\\nimport './Interfaces/IRedemptionOperations.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/ILiquidationOperations.sol';\\nimport './Interfaces/IStabilityPoolManager.sol';\\nimport './Interfaces/ICollSurplusPool.sol';\\n\\ncontract LiquidationOperations is LiquityBase, Ownable(msg.sender), CheckContract, ILiquidationOperations {\\n  string public constant NAME = 'LiquidationOperations';\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IStoragePool public storagePool;\\n  IPriceFeed public priceFeed;\\n  IDebtTokenManager public debtTokenManager;\\n  ICollTokenManager public collTokenManager;\\n  IStabilityPoolManager public stabilityPoolManager;\\n  ICollSurplusPool public collSurplusPool;\\n\\n  // --- Data structures ---\\n\\n  struct LocalVariables_OuterLiquidationFunction {\\n    address[] collTokenAddresses;\\n    //\\n    RemainingStability[] remainingStabilities;\\n    CAmount[] tokensToRedistribute;\\n    TokenAmount[] collSurplus;\\n    //\\n    uint totalStableCoinGasCompensation; // paid out to the liquidator\\n    TokenAmount[] totalCollGasCompensation; // paid out to the liquidator\\n    //\\n    uint entireSystemCollInUSD;\\n    uint entireSystemDebtInUSD;\\n    uint TCR;\\n    bool isRecoveryMode;\\n  }\\n\\n  struct LocalVariables_LiquidationSequence {\\n    uint ICR;\\n    //\\n    RAmount[] troveAmountsIncludingRewards;\\n    uint troveDebtInUSD;\\n    uint troveDebtInUSDWithoutGasCompensation;\\n    uint troveCollInUSD;\\n  }\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _collSurplusPoolAddress\\n  ) external onlyOwner {\\n    checkContract(_troveManagerAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManagerAddress);\\n    checkContract(_collTokenManagerAddress);\\n    checkContract(_stabilityPoolManagerAddress);\\n    checkContract(_collSurplusPoolAddress);\\n\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    debtTokenManager = IDebtTokenManager(_debtTokenManagerAddress);\\n    collTokenManager = ICollTokenManager(_collTokenManagerAddress);\\n    stabilityPoolManager = IStabilityPoolManager(_stabilityPoolManagerAddress);\\n    collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n\\n    emit LiquidationOperationsInitialized(\\n      _troveManagerAddress,\\n      _storagePoolAddress,\\n      _priceFeedAddress,\\n      _debtTokenManagerAddress,\\n      _collTokenManagerAddress,\\n      _stabilityPoolManagerAddress,\\n      _collSurplusPoolAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n  function liquidate(address _borrower) public override {\\n    address[] memory borrowers = new address[](1);\\n    borrowers[0] = _borrower;\\n    batchLiquidateTroves(borrowers);\\n  }\\n\\n  /*\\n   * Attempt to liquidate a custom list of troves provided by the caller.\\n   */\\n  function batchLiquidateTroves(address[] memory _troveArray) public override {\\n    if (_troveArray.length == 0) revert EmptyArray();\\n\\n    LocalVariables_OuterLiquidationFunction memory vars;\\n    vars.collTokenAddresses = collTokenManager.getCollTokenAddresses();\\n\\n    (vars.isRecoveryMode, vars.TCR, vars.entireSystemCollInUSD, vars.entireSystemDebtInUSD) = storagePool\\n      .checkRecoveryMode();\\n    vars.remainingStabilities = stabilityPoolManager.getRemainingStability(vars.collTokenAddresses);\\n    _initializeEmptyTokensToRedistribute(vars); // all set to 0 (nothing to redistribute)\\n\\n    bool atLeastOneTroveLiquidated = false;\\n    for (uint i = 0; i < _troveArray.length; i++) {\\n      address trove = _troveArray[i];\\n      if (!troveManager.isTroveActive(trove)) continue; // Skip non-active troves\\n      if (troveManager.getTroveOwnersCount() <= 1) continue; // don't liquidate if last trove\\n\\n      bool liquidated = _executeTroveLiquidation(vars, trove);\\n      if (liquidated && !atLeastOneTroveLiquidated) atLeastOneTroveLiquidated = true;\\n    }\\n    if (!atLeastOneTroveLiquidated) revert NoLiquidatableTrove();\\n\\n    // move tokens into the stability pools\\n    stabilityPoolManager.offset(vars.remainingStabilities);\\n\\n    // and redistribute the rest (which could not be handled by the stability pool)\\n    troveManager.redistributeDebtAndColl(vars.collTokenAddresses, vars.tokensToRedistribute);\\n\\n    // move tokens from active pool into the collSurplus, in case there was a capped liquidation\\n    for (uint i = 0; i < vars.collSurplus.length; i++) {\\n      if (vars.collSurplus[i].amount == 0) continue;\\n      storagePool.withdrawalValue(\\n        address(collSurplusPool),\\n        vars.collSurplus[i].tokenAddress,\\n        true,\\n        PoolType.Active,\\n        vars.collSurplus[i].amount\\n      );\\n    }\\n\\n    // Update system snapshots\\n    troveManager.updateSystemSnapshots_excludeCollRemainder(vars.totalCollGasCompensation);\\n\\n    // Send gas compensation to caller\\n    _sendGasCompensation(msg.sender, vars.totalStableCoinGasCompensation, vars.totalCollGasCompensation);\\n\\n    // liquidation event\\n    _emitLiquidationSummaryEvent(vars);\\n  }\\n\\n  function _initializeEmptyTokensToRedistribute(LocalVariables_OuterLiquidationFunction memory vars) internal view {\\n    address[] memory debtTokenAddresses = debtTokenManager.getDebtTokenAddresses();\\n\\n    vars.tokensToRedistribute = new CAmount[](debtTokenAddresses.length + vars.collTokenAddresses.length);\\n    vars.totalCollGasCompensation = new TokenAmount[](vars.collTokenAddresses.length);\\n    vars.collSurplus = new TokenAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < vars.collTokenAddresses.length; i++) {\\n      vars.tokensToRedistribute[i] = CAmount(vars.collTokenAddresses[i], true, 0);\\n      vars.totalCollGasCompensation[i] = TokenAmount(vars.collTokenAddresses[i], 0);\\n      vars.collSurplus[i] = TokenAmount(vars.collTokenAddresses[i], 0);\\n    }\\n    for (uint i = 0; i < debtTokenAddresses.length; i++)\\n      vars.tokensToRedistribute[vars.collTokenAddresses.length + i] = CAmount(debtTokenAddresses[i], false, 0);\\n  }\\n\\n  function _executeTroveLiquidation(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    address trove\\n  ) internal returns (bool liquidated) {\\n    LocalVariables_LiquidationSequence memory vars;\\n    (\\n      vars.troveAmountsIncludingRewards,\\n      vars.troveCollInUSD,\\n      vars.troveDebtInUSD,\\n      vars.troveDebtInUSDWithoutGasCompensation\\n    ) = troveManager.getEntireDebtAndColl(trove);\\n    vars.ICR = LiquityMath._computeCR(vars.troveCollInUSD, vars.troveDebtInUSD);\\n\\n    // ICR >= TCR, skipping liquidation, no matter what mode\\n    if (vars.ICR >= outerVars.TCR) return false;\\n\\n    // ICR >= MCR in normal mode, skipping liquidation\\n    if (vars.ICR >= MCR && !outerVars.isRecoveryMode) return false;\\n\\n    _movePendingTroveRewardsToActivePool(vars.troveAmountsIncludingRewards);\\n    troveManager.removeStake(outerVars.collTokenAddresses, trove);\\n\\n    if (vars.ICR >= MCR) {\\n      // capped trove liquidation (at 1.1 * the total debts value)\\n      // remaining collateral will stay in the trove\\n      _getCappedOffsetVals(\\n        vars.troveCollInUSD,\\n        vars.troveDebtInUSDWithoutGasCompensation,\\n        vars.troveAmountsIncludingRewards,\\n        outerVars.remainingStabilities\\n      );\\n\\n      // patch the collSurplus claim, tokens will be transferred in the outer scope\\n      collSurplusPool.accountSurplus(trove, vars.troveAmountsIncludingRewards);\\n    } else {\\n      // full trove liquidation\\n      _getOffsetAndRedistributionVals(\\n        vars.troveDebtInUSDWithoutGasCompensation,\\n        vars.troveAmountsIncludingRewards,\\n        outerVars.remainingStabilities\\n      );\\n    }\\n\\n    troveManager.closeTroveByProtocol(\\n      outerVars.collTokenAddresses,\\n      trove,\\n      outerVars.isRecoveryMode ? Status.closedByLiquidationInRecoveryMode : Status.closedByLiquidationInNormalMode\\n    );\\n    _mergeCollGasAndSurplusCompensation(\\n      vars.troveAmountsIncludingRewards,\\n      outerVars.totalCollGasCompensation,\\n      outerVars.collSurplus\\n    );\\n    _mergeTokensToRedistribute(vars.troveAmountsIncludingRewards, outerVars.tokensToRedistribute);\\n    outerVars.totalStableCoinGasCompensation += STABLE_COIN_GAS_COMPENSATION;\\n\\n    // updating TCR\\n    for (uint a = 0; a < vars.troveAmountsIncludingRewards.length; a++) {\\n      RAmount memory rAmount = vars.troveAmountsIncludingRewards[a];\\n      outerVars.entireSystemCollInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.gasCompensation);\\n      if (rAmount.isColl)\\n        outerVars.entireSystemCollInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toOffset);\\n      else outerVars.entireSystemDebtInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toOffset);\\n    }\\n    outerVars.TCR = LiquityMath._computeCR(outerVars.entireSystemCollInUSD, outerVars.entireSystemDebtInUSD);\\n    outerVars.isRecoveryMode = outerVars.TCR < CCR;\\n\\n    return true;\\n  }\\n\\n  // adding up the coll gas compensation\\n  function _mergeCollGasAndSurplusCompensation(\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    TokenAmount[] memory totalCollGasCompensation,\\n    TokenAmount[] memory totalCollSurplus\\n  ) internal pure {\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (!rAmount.isColl) continue;\\n\\n      if (rAmount.gasCompensation > 0)\\n        for (uint ib = 0; ib < totalCollGasCompensation.length; ib++) {\\n          if (totalCollGasCompensation[ib].tokenAddress != rAmount.tokenAddress) continue;\\n          totalCollGasCompensation[ib].amount += rAmount.gasCompensation;\\n          break;\\n        }\\n\\n      if (rAmount.collSurplus > 0)\\n        for (uint ib = 0; ib < totalCollSurplus.length; ib++) {\\n          if (totalCollSurplus[ib].tokenAddress != rAmount.tokenAddress) continue;\\n          totalCollSurplus[ib].amount += rAmount.collSurplus;\\n          break;\\n        }\\n    }\\n  }\\n\\n  // adding up the token to redistribute\\n  function _mergeTokensToRedistribute(\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    CAmount[] memory tokensToRedistribute\\n  ) internal pure {\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (rAmount.toRedistribute == 0) continue;\\n\\n      for (uint ib = 0; ib < tokensToRedistribute.length; ib++) {\\n        if (\\n          tokensToRedistribute[ib].tokenAddress != rAmount.tokenAddress ||\\n          tokensToRedistribute[ib].isColl != rAmount.isColl\\n        ) continue;\\n\\n        tokensToRedistribute[ib].amount += rAmount.toRedistribute;\\n        break;\\n      }\\n    }\\n  }\\n\\n  // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n  function _movePendingTroveRewardsToActivePool(RAmount[] memory _troveAmountsIncludingRewards) internal {\\n    for (uint i = 0; i < _troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = _troveAmountsIncludingRewards[i];\\n      if (rAmount.pendingReward == 0) continue;\\n\\n      storagePool.transferBetweenTypes(\\n        rAmount.tokenAddress,\\n        rAmount.isColl,\\n        PoolType.Default,\\n        PoolType.Active,\\n        rAmount.pendingReward\\n      );\\n    }\\n  }\\n\\n  /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n   * redistributed to active troves.\\n   */\\n  function _getOffsetAndRedistributionVals(\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    /*\\n     * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n     * between all active troves.\\n     *\\n     *  If the trove's debt is larger than the deposited LUSD in the Stability Pool:\\n     *\\n     *  - Offset an amount of the trove's debt equal to the LUSD in the Stability Pool\\n     *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n     *\\n     */\\n\\n    // by default the entire coll needs to be redistributed\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (rAmount.isColl) rAmount.toRedistribute = rAmount.toLiquidate;\\n    }\\n\\n    _debtOffset(troveDebtInUSDWithoutGasCompensation, troveAmountsIncludingRewards, remainingStabilities);\\n  }\\n\\n  // Get its offset coll/debt and gas comp.\\n  function _getCappedOffsetVals(\\n    uint troveCollInUSD,\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    // capping the to be liquidated collateral to 1.1 * the total debts value\\n    uint cappedLimit = troveDebtInUSDWithoutGasCompensation * MCR; // total debt * 1.1\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (!rAmount.isColl) continue; // coll will be handled later in the debts loop\\n\\n      uint collToLiquidateInUSD = priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toLiquidate);\\n      uint collToLiquidateInUSDCapped = (cappedLimit * collToLiquidateInUSD) / troveCollInUSD;\\n      rAmount.toLiquidate = priceFeed.getAmountFromUSDValue(rAmount.tokenAddress, collToLiquidateInUSDCapped);\\n    }\\n\\n    _debtOffset(troveDebtInUSDWithoutGasCompensation, troveAmountsIncludingRewards, remainingStabilities);\\n  }\\n\\n  function _debtOffset(\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    // checking if some debt can be offset by the matching stability pool\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmountDebt = troveAmountsIncludingRewards[i];\\n      if (rAmountDebt.isColl) continue; // coll will be handled by the debts loop\\n\\n      // find the right remainingStability entry for the current debt token\\n      RemainingStability memory remainingStability;\\n      for (uint ii = 0; ii < remainingStabilities.length; ii++) {\\n        if (remainingStabilities[ii].tokenAddress == rAmountDebt.tokenAddress) {\\n          remainingStability = remainingStabilities[ii];\\n          break;\\n        }\\n      }\\n\\n      // trying to hand the debt over to the stability pool\\n      if (remainingStability.remaining > 0) {\\n        rAmountDebt.toOffset = LiquityMath._min(rAmountDebt.toLiquidate, remainingStability.remaining);\\n        remainingStability.debtToOffset += rAmountDebt.toOffset;\\n        remainingStability.remaining -= rAmountDebt.toOffset;\\n\\n        uint offsetPercentage = (priceFeed.getUSDValue(rAmountDebt.tokenAddress, rAmountDebt.toOffset) *\\n          DECIMAL_PRECISION) / troveDebtInUSDWithoutGasCompensation; // relative to the troves total debt\\n\\n        // moving the offsetPercentage of each coll into the stable pool\\n        for (uint ii = 0; ii < troveAmountsIncludingRewards.length; ii++) {\\n          RAmount memory rAmountColl = troveAmountsIncludingRewards[ii];\\n          if (!rAmountColl.isColl) continue; // debt already handled one step above\\n\\n          rAmountColl.toOffset = (rAmountColl.toLiquidate * offsetPercentage) / DECIMAL_PRECISION;\\n          rAmountColl.toRedistribute -= rAmountColl.toOffset;\\n\\n          // find the right collGained entry and add the value\\n          for (uint iii = 0; iii < remainingStability.collGained.length; iii++) {\\n            if (remainingStability.collGained[iii].tokenAddress != rAmountColl.tokenAddress) continue;\\n\\n            remainingStability.collGained[iii].amount += rAmountColl.toOffset;\\n            break;\\n          }\\n        }\\n      }\\n\\n      // remaining debt needs to be redistributed\\n      rAmountDebt.toRedistribute = rAmountDebt.toLiquidate - rAmountDebt.toOffset;\\n    }\\n  }\\n\\n  function _sendGasCompensation(\\n    address _liquidator,\\n    uint _stableCoinGasCompensation,\\n    TokenAmount[] memory _collGasCompensation\\n  ) internal {\\n    // stable payout\\n    if (_stableCoinGasCompensation != 0) {\\n      IDebtToken stableCoin = debtTokenManager.getStableCoin();\\n      storagePool.withdrawalValue(\\n        _liquidator,\\n        address(stableCoin),\\n        false,\\n        PoolType.GasCompensation,\\n        _stableCoinGasCompensation\\n      );\\n    }\\n\\n    // coll payout\\n    for (uint i = 0; i < _collGasCompensation.length; i++) {\\n      if (_collGasCompensation[i].amount == 0) continue;\\n      storagePool.withdrawalValue(\\n        _liquidator,\\n        _collGasCompensation[i].tokenAddress,\\n        true,\\n        PoolType.Active,\\n        _collGasCompensation[i].amount\\n      );\\n    }\\n  }\\n\\n  function _emitLiquidationSummaryEvent(LocalVariables_OuterLiquidationFunction memory vars) internal {\\n    TokenAmount[] memory liquidatedColl = new TokenAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < vars.collTokenAddresses.length; i++) {\\n      liquidatedColl[i] = TokenAmount(\\n        vars.collTokenAddresses[i],\\n        vars.tokensToRedistribute[i].amount // works because of the initialisation of the array (first debts, then colls)\\n      );\\n    }\\n\\n    TokenAmount[] memory liquidatedDebt = new TokenAmount[](vars.remainingStabilities.length);\\n    for (uint i = 0; i < vars.remainingStabilities.length; i++) {\\n      RemainingStability memory remainingStability = vars.remainingStabilities[i];\\n\\n      uint redistributed = vars.tokensToRedistribute[vars.collTokenAddresses.length + i].amount; // has the same token order in the array\\n      liquidatedDebt[i] = TokenAmount(remainingStability.tokenAddress, remainingStability.debtToOffset + redistributed);\\n\\n      for (uint ii = 0; ii < vars.collTokenAddresses.length; ii++) {\\n        liquidatedColl[ii].amount += remainingStability.collGained[ii].amount;\\n      }\\n    }\\n\\n    emit LiquidationSummary(\\n      liquidatedDebt,\\n      liquidatedColl,\\n      vars.totalStableCoinGasCompensation,\\n      vars.totalCollGasCompensation\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x43dc47b9ed634686fbb5f9be393c0dd2f7a56fcd628081fb46f42c09eeff6931\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612db480620000ab6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063741bef1a116100de578063cda775f911610097578063eaa8ba7f11610071578063eaa8ba7f14610369578063ec671c831461037c578063f2fde38b14610386578063f92d3433146101fc57600080fd5b8063cda775f914610339578063ddbeb7141461034c578063e67729e31461035f57600080fd5b8063741bef1a146102a2578063794e5724146102b55780638d63c665146102c45780638da5cb5b146102d4578063943ebeae146102e5578063a3f4df7e146102f857600080fd5b80633d83908a1161014b578063522a86fe11610125578063522a86fe146102695780635733d58f1461027c578063715018a61461028b57806372fe25aa1461029357600080fd5b80633d83908a146102305780634870dd9a14610243578063502afb041461024b57600080fd5b806309230ad3146101935780631e8b1c2b146101cb57806324092669146101e057806328d28b5b146101fc5780632f2b4e901461020a5780632f8655681461021d575b600080fd5b6101ae73f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101de6101d9366004612386565b610399565b005b6101ee66b1a2bc2ec5000081565b6040519081526020016101c2565b6101ee6611c37937e0800081565b6006546101ae906001600160a01b031681565b6101de61022b366004612424565b61096f565b6001546101ae906001600160a01b031681565b6101ee60c881565b610254610bb881565b60405163ffffffff90911681526020016101c2565b6004546101ae906001600160a01b031681565b6101ee6714d1120d7b16000081565b6101de6109d2565b6101ee670de0b6b3a764000081565b6003546101ae906001600160a01b031681565b6101ee670f43fc2c04ee000081565b6101ee680ad78ebc5ac620000081565b6000546001600160a01b03166101ae565b6005546101ae906001600160a01b031681565b61032c604051806040016040528060158152602001744c69717569646174696f6e4f7065726174696f6e7360581b81525081565b6040516101c29190612441565b6007546101ae906001600160a01b031681565b6002546101ae906001600160a01b031681565b610254620f424081565b6101de61037736600461248f565b6109e6565b6102546207a12081565b6101de610394366004612424565b610b13565b80516000036103bb5760405163521299a960e01b815260040160405180910390fd5b6104136040518061014001604052806060815260200160608152602001606081526020016060815260200160008152602001606081526020016000815260200160008152602001600081526020016000151581525090565b600560009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa158015610466573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048e9190810190612535565b8152600254604080516321d0927d60e11b815290516001600160a01b03909216916343a124fa916004808201926080929091908290030181865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe91906125d3565b60e085015260c0840152610100830152151561012082015260065481516040516312fd572560e01b81526001600160a01b03909216916312fd57259161054691600401612654565b600060405180830381865afa158015610563573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058b9190810190612667565b602082015261059981610b56565b6000805b83518110156106fa5760008482815181106105ba576105ba612811565b60209081029190910101516001546040516301b9ad5160e51b81526001600160a01b038084166004830152929350911690633735aa2090602401602060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612827565b61063f57506106e8565b60018060009054906101000a90046001600160a01b03166001600160a01b03166349eefeee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190612842565b116106c257506106e8565b60006106ce8583610ee8565b90508080156106db575083155b156106e557600193505b50505b806106f281612871565b91505061059d565b5080610719576040516321aacc4b60e11b815260040160405180910390fd5b6006546020830151604051639e3c475360e01b81526001600160a01b0390921691639e3c47539161074c916004016128ce565b600060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b505060015484516040808701519051632c89c7cd60e11b81526001600160a01b0390931694506359138f9a93506107b39260040161296f565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b5050505060005b8260600151518110156108e8578260600151818151811061080b5761080b612811565b602002602001015160200151600003156108d657600254600754606085015180516001600160a01b039384169363b403b997931691908590811061085157610851612811565b602002602001015160000151600160008860600151878151811061087757610877612811565b6020026020010151602001516040518663ffffffff1660e01b81526004016108a3959493929190612a01565b600060405180830381600087803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b505050505b806108e081612871565b9150506107e8565b5060015460a0830151604051631071929160e01b81526001600160a01b039092169163107192919161091c91600401612a3e565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506109613383608001518460a0015161141d565b61096a82611600565b505050565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106109a5576109a5612811565b60200260200101906001600160a01b031690816001600160a01b0316815250506109ce81610399565b5050565b6109da6118eb565b6109e46000611918565b565b6109ee6118eb565b6109f787611968565b610a0086611968565b610a0985611968565b610a1284611968565b610a1b83611968565b610a2482611968565b610a2d81611968565b600180546001600160a01b038981166001600160a01b03199283168117909355600280548a83169084168117909155600380548a84169085168117909155600480548a85169086168117909155600580548a86169087168117909155600680548a8716908816811790915560078054968a16969097168617909655604080519788526020880194909452928601919091526060850152608084015260a083019190915260c08201527f1669c6fdd5a1a887d7b0630879b829f67186ac0b925d64914815dbe436599b129060e00160405180910390a1610b0a6109d2565b50505050505050565b610b1b6118eb565b6001600160a01b038116610b4a57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610b5381611918565b50565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636060b0556040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd39190810190612535565b8251518151919250610be491612a51565b6001600160401b03811115610bfb57610bfb61229b565b604051908082528060200260200182016040528015610c4657816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610c195790505b5060408301528151516001600160401b03811115610c6657610c6661229b565b604051908082528060200260200182016040528015610cab57816020015b6040805180820190915260008082526020820152815260200190600190039081610c845790505b5060a08301528151516001600160401b03811115610ccb57610ccb61229b565b604051908082528060200260200182016040528015610d1057816020015b6040805180820190915260008082526020820152815260200190600190039081610ce95790505b50606083015260005b825151811015610e5657604051806060016040528084600001518381518110610d4457610d44612811565b60200260200101516001600160a01b03168152602001600115158152602001600081525083604001518281518110610d7e57610d7e612811565b6020026020010181905250604051806040016040528084600001518381518110610daa57610daa612811565b60200260200101516001600160a01b0316815260200160008152508360a001518281518110610ddb57610ddb612811565b6020026020010181905250604051806040016040528084600001518381518110610e0757610e07612811565b60200260200101516001600160a01b03168152602001600081525083606001518281518110610e3857610e38612811565b60200260200101819052508080610e4e90612871565b915050610d19565b5060005b815181101561096a576040518060600160405280838381518110610e8057610e80612811565b60200260200101516001600160a01b031681526020016000151581526020016000815250836040015182856000015151610eba9190612a51565b81518110610eca57610eca612811565b60200260200101819052508080610ee090612871565b915050610e5a565b6000610f1c6040518060a0016040528060008152602001606081526020016000815260200160008152602001600081525090565b600154604051632e46be5f60e21b81526001600160a01b0385811660048301529091169063b91af97c90602401600060405180830381865afa158015610f66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8e9190810190612a64565b606085015260408401819052608084018290526020840192909252610fb2916119b3565b80825261010085015111610fca576000915050611417565b8051670f43fc2c04ee000011801590610fe65750836101200151155b15610ff5576000915050611417565b61100281602001516119e9565b6001548451604051630609d6b760e11b81526001600160a01b0390921691630c13ad6e91611034918790600401612b88565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b50505050670f43fc2c04ee0000816000015110611102576110958160800151826060015183602001518760200151611aaf565b600754602082015160405163dc3f878360e01b81526001600160a01b039092169163dc3f8783916110cb91879190600401612bb2565b600060405180830381600087803b1580156110e557600080fd5b505af11580156110f9573d6000803e3d6000fd5b50505050611119565b611119816060015182602001518660200151611c4b565b60015484516101208601516001600160a01b0390921691638918b9e191908690611144576003611147565b60045b6040518463ffffffff1660e01b815260040161116593929190612c62565b600060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506111ae81602001518560a001518660600151611ca9565b6111c081602001518560400151611e2e565b680ad78ebc5ac6200000846080018181516111db9190612a51565b90525060005b8160200151518110156113e65760008260200151828151811061120657611206612811565b602090810291909101015160035481516080830151604051637d3b6e7960e11b81526001600160a01b0392831660048201526024810191909152929350169063fa76dcf290604401602060405180830381865afa15801561126b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128f9190612842565b8660c0018181516112a09190612ca4565b90525060208101511561134257600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190612842565b8660c00181815161133a9190612ca4565b9052506113d3565b600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190612842565b8660e0018181516113cf9190612ca4565b9052505b50806113de81612871565b9150506111e1565b506113f98460c001518560e001516119b3565b61010085018190526714d1120d7b1600001161012085015250600190505b92915050565b811561150a576000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149c9190612cb7565b6002805460405163b403b99760e01b81529293506001600160a01b03169163b403b997916114d69188918691600091908a90600401612a01565b600060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b50505050505b60005b81518110156115fa5781818151811061152857611528612811565b602002602001015160200151600003156115e85760025482516001600160a01b039091169063b403b99790869085908590811061156757611567612811565b6020026020010151600001516001600087878151811061158957611589612811565b6020026020010151602001516040518663ffffffff1660e01b81526004016115b5959493929190612a01565b600060405180830381600087803b1580156115cf57600080fd5b505af11580156115e3573d6000803e3d6000fd5b505050505b806115f281612871565b91505061150d565b50505050565b8051516000906001600160401b0381111561161d5761161d61229b565b60405190808252806020026020018201604052801561166257816020015b604080518082019091526000808252602082015281526020019060019003908161163b5790505b50905060005b8251518110156116fe5760405180604001604052808460000151838151811061169357611693612811565b60200260200101516001600160a01b03168152602001846040015183815181106116bf576116bf612811565b6020026020010151604001518152508282815181106116e0576116e0612811565b602002602001018190525080806116f690612871565b915050611668565b5060008260200151516001600160401b0381111561171e5761171e61229b565b60405190808252806020026020018201604052801561176357816020015b604080518082019091526000808252602082015281526020019060019003908161173c5790505b50905060005b8360200151518110156118a05760008460200151828151811061178e5761178e612811565b6020026020010151905060008560400151838760000151516117b09190612a51565b815181106117c0576117c0612811565b6020026020010151604001519050604051806040016040528083602001516001600160a01b031681526020018284606001516117fc9190612a51565b81525084848151811061181157611811612811565b602002602001018190525060005b86515181101561188a578260800151818151811061183f5761183f612811565b60200260200101516020015186828151811061185d5761185d612811565b60200260200101516020018181516118759190612a51565b9052508061188281612871565b91505061181f565b505050808061189890612871565b915050611769565b507f3513495d7fd5aeb5c4a43ca2d5bc1193321fb114b6b970ea7becb0a6ddcce840818385608001518660a001516040516118de9493929190612cd4565b60405180910390a1505050565b6000546001600160a01b031633146109e45760405163118cdaa760e01b8152336004820152602401610b41565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811661198f5760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036109ce57604051636f7c43f160e01b815260040160405180910390fd5b600081156119df57816119ce670de0b6b3a764000085612d13565b6119d89190612d2a565b9050611417565b5060001992915050565b60005b81518110156109ce576000828281518110611a0957611a09612811565b602002602001015190508060600151600003611a255750611a9d565b600254815160208301516060840151604051632f5ed88d60e11b81526001600160a01b0390941693635ebdb11a93611a699390929091600191600091600401612d4c565b600060405180830381600087803b158015611a8357600080fd5b505af1158015611a97573d6000803e3d6000fd5b50505050505b80611aa781612871565b9150506119ec565b6000611ac3670f43fc2c04ee000085612d13565b905060005b8351811015611c38576000848281518110611ae557611ae5612811565b602002602001015190508060200151611afe5750611c26565b600354815160a0830151604051637d3b6e7960e11b81526000936001600160a01b03169263fa76dcf292611b48926004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b899190612842565b9050600088611b988387612d13565b611ba29190612d2a565b6003548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190612842565b60a09093019290925250505b80611c3081612871565b915050611ac8565b50611c44848484611f3f565b5050505050565b60005b8251811015611c9d576000838281518110611c6b57611c6b612811565b60200260200101519050806020015115611c8a5760a081015160c08201525b5080611c9581612871565b915050611c4e565b5061096a838383611f3f565b60005b83518110156115fa576000848281518110611cc957611cc9612811565b602002602001015190508060200151611ce25750611e1c565b608081015115611d7d5760005b8451811015611d7b5781600001516001600160a01b0316858281518110611d1857611d18612811565b6020026020010151600001516001600160a01b031603611d69578160800151858281518110611d4957611d49612811565b6020026020010151602001818151611d619190612a51565b905250611d7b565b80611d7381612871565b915050611cef565b505b61010081015115611e1a5760005b8351811015611e185781600001516001600160a01b0316848281518110611db457611db4612811565b6020026020010151600001516001600160a01b031603611e0657816101000151848281518110611de657611de6612811565b6020026020010151602001818151611dfe9190612a51565b905250611e18565b80611e1081612871565b915050611d8b565b505b505b80611e2681612871565b915050611cac565b60005b825181101561096a576000838281518110611e4e57611e4e612811565b602002602001015190508060c00151600003611e6a5750611f2d565b60005b8351811015611f2a5781600001516001600160a01b0316848281518110611e9657611e96612811565b6020026020010151600001516001600160a01b0316141580611edd575081602001511515848281518110611ecc57611ecc612811565b602002602001015160200151151514155b611f18578160c00151848281518110611ef857611ef8612811565b6020026020010151604001818151611f109190612a51565b905250611f2a565b80611f2281612871565b915050611e6d565b50505b80611f3781612871565b915050611e31565b60005b82518110156115fa576000838281518110611f5f57611f5f612811565b60200260200101519050806020015115611f795750612271565b611fbd6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b60005b84518110156120365782600001516001600160a01b0316858281518110611fe957611fe9612811565b6020026020010151602001516001600160a01b0316036120245784818151811061201557612015612811565b60200260200101519150612036565b8061202e81612871565b915050611fc0565b50604081015115612252576120538260a001518260400151612283565b60e0830181905260608201805161206b908390612a51565b90525060e0820151604082018051612084908390612ca4565b905250600354825160e0840151604051637d3b6e7960e11b81526001600160a01b03928316600482015260248101919091526000928992670de0b6b3a76400009291169063fa76dcf290604401602060405180830381865afa1580156120ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121129190612842565b61211c9190612d13565b6121269190612d2a565b905060005b865181101561224f57600087828151811061214857612148612811565b602002602001015190508060200151612161575061223d565b670de0b6b3a7640000838260a0015161217a9190612d13565b6121849190612d2a565b60e0820181905260c08201805161219c908390612ca4565b90525060005b84608001515181101561223a5781600001516001600160a01b0316856080015182815181106121d3576121d3612811565b6020026020010151600001516001600160a01b031603612228578160e001518560800151828151811061220857612208612811565b60200260200101516020018181516122209190612a51565b90525061223a565b8061223281612871565b9150506121a2565b50505b8061224781612871565b91505061212b565b50505b8160e001518260a001516122669190612ca4565b60c090920191909152505b8061227b81612871565b915050611f42565b60008183106122925781612294565b825b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156122d3576122d361229b565b60405290565b604080519081016001600160401b03811182821017156122d3576122d361229b565b60405161012081016001600160401b03811182821017156122d3576122d361229b565b604051601f8201601f191681016001600160401b03811182821017156123465761234661229b565b604052919050565b60006001600160401b038211156123675761236761229b565b5060051b60200190565b6001600160a01b0381168114610b5357600080fd5b6000602080838503121561239957600080fd5b82356001600160401b038111156123af57600080fd5b8301601f810185136123c057600080fd5b80356123d36123ce8261234e565b61231e565b81815260059190911b820183019083810190878311156123f257600080fd5b928401925b8284101561241957833561240a81612371565b825292840192908401906123f7565b979650505050505050565b60006020828403121561243657600080fd5b813561229481612371565b600060208083528351808285015260005b8181101561246e57858101830151858201604001528201612452565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a0312156124aa57600080fd5b87356124b581612371565b965060208801356124c581612371565b955060408801356124d581612371565b945060608801356124e581612371565b935060808801356124f581612371565b925060a088013561250581612371565b915060c088013561251581612371565b8091505092959891949750929550565b805161253081612371565b919050565b6000602080838503121561254857600080fd5b82516001600160401b0381111561255e57600080fd5b8301601f8101851361256f57600080fd5b805161257d6123ce8261234e565b81815260059190911b8201830190838101908783111561259c57600080fd5b928401925b828410156124195783516125b481612371565b825292840192908401906125a1565b8051801515811461253057600080fd5b600080600080608085870312156125e957600080fd5b6125f2856125c3565b60208601516040870151606090970151919890975090945092505050565b600081518084526020808501945080840160005b838110156126495781516001600160a01b031687529582019590820190600101612624565b509495945050505050565b6020815260006122946020830184612610565b60006020828403121561267957600080fd5b81516001600160401b038082111561269057600080fd5b818401915084601f8301126126a457600080fd5b81516126b26123ce8261234e565b8082825260208201915060208360051b8601019250878311156126d457600080fd5b602085015b83811015612805578051858111156126f057600080fd5b860160a0818b03601f1901121561270657600080fd5b61270e6122b1565b602082015161271c81612371565b8152604082015161272c81612371565b6020820152606082810151604083015260808301519082015260a08201518781111561275757600080fd5b8083019250508a603f83011261276c57600080fd5b602082015161277d6123ce8261234e565b81815260069190911b83016040019060208101908d83111561279e57600080fd5b6040850194505b828510156127ef576040858f0312156127bd57600080fd5b6127c56122d9565b85516127d081612371565b81526020868101518183015290835260409095019491909101906127a5565b60808401525050845250602092830192016126d9565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561283957600080fd5b612294826125c3565b60006020828403121561285457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016128835761288361285b565b5060010190565b600081518084526020808501945080840160005b8381101561264957815180516001600160a01b03168852830151838801526040909601959082019060010161289e565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561296157888303603f19018552815180516001600160a01b03908116855288820151168885015286810151878501526060808201519085015260809081015160a09185018290529061294d8186018361288a565b9689019694505050908601906001016128f5565b509098975050505050505050565b6000604080835261298281840186612610565b83810360208581019190915285518083528682019282019060005b8181101561296157845180516001600160a01b0316845284810151151585850152860151868401529383019360609092019160010161299d565b634e487b7160e01b600052602160045260246000fd5b600381106129fd576129fd6129d7565b9052565b6001600160a01b03868116825285166020820152831515604082015260a08101612a2e60608301856129ed565b8260808301529695505050505050565b602081526000612294602083018461288a565b808201808211156114175761141761285b565b6000806000806080808688031215612a7b57600080fd5b85516001600160401b03811115612a9157600080fd5b8601601f81018813612aa257600080fd5b80516020612ab26123ce8361234e565b828152610120928302840182019282820191908c851115612ad257600080fd5b948301945b84861015612b655780868e031215612aef5760008081fd5b612af76122fb565b612b0087612525565b8152612b0d8588016125c3565b818601526040878101519082015260608088015190820152878701518882015260a0808801519082015260c0808801519082015260e08088015190820152610100808801519082015283529485019491830191612ad7565b50918a015160408b01516060909b0151929c909b50919850909650505050505050565b604081526000612b9b6040830185612610565b905060018060a01b03831660208301529392505050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015612c5257815180518716855285810151151586860152888101518986015287810151888601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010090810151908501526101209093019290840190600101612be2565b50919a9950505050505050505050565b606081526000612c756060830186612610565b6001600160a01b0385166020840152905060058310612c9657612c966129d7565b826040830152949350505050565b818103818111156114175761141761285b565b600060208284031215612cc957600080fd5b815161229481612371565b608081526000612ce7608083018761288a565b8281036020840152612cf9818761288a565b90508460408401528281036060840152612419818561288a565b80820281158282048414176114175761141761285b565b600082612d4757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0386168152841515602082015260a08101612d7160408301866129ed565b612a2e60608301856129ed56fea2646970667358221220722b6c14a2c29460f06839ab3feda3c7420a00ca14f699f26442e7a36d2f91b164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063741bef1a116100de578063cda775f911610097578063eaa8ba7f11610071578063eaa8ba7f14610369578063ec671c831461037c578063f2fde38b14610386578063f92d3433146101fc57600080fd5b8063cda775f914610339578063ddbeb7141461034c578063e67729e31461035f57600080fd5b8063741bef1a146102a2578063794e5724146102b55780638d63c665146102c45780638da5cb5b146102d4578063943ebeae146102e5578063a3f4df7e146102f857600080fd5b80633d83908a1161014b578063522a86fe11610125578063522a86fe146102695780635733d58f1461027c578063715018a61461028b57806372fe25aa1461029357600080fd5b80633d83908a146102305780634870dd9a14610243578063502afb041461024b57600080fd5b806309230ad3146101935780631e8b1c2b146101cb57806324092669146101e057806328d28b5b146101fc5780632f2b4e901461020a5780632f8655681461021d575b600080fd5b6101ae73f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101de6101d9366004612386565b610399565b005b6101ee66b1a2bc2ec5000081565b6040519081526020016101c2565b6101ee6611c37937e0800081565b6006546101ae906001600160a01b031681565b6101de61022b366004612424565b61096f565b6001546101ae906001600160a01b031681565b6101ee60c881565b610254610bb881565b60405163ffffffff90911681526020016101c2565b6004546101ae906001600160a01b031681565b6101ee6714d1120d7b16000081565b6101de6109d2565b6101ee670de0b6b3a764000081565b6003546101ae906001600160a01b031681565b6101ee670f43fc2c04ee000081565b6101ee680ad78ebc5ac620000081565b6000546001600160a01b03166101ae565b6005546101ae906001600160a01b031681565b61032c604051806040016040528060158152602001744c69717569646174696f6e4f7065726174696f6e7360581b81525081565b6040516101c29190612441565b6007546101ae906001600160a01b031681565b6002546101ae906001600160a01b031681565b610254620f424081565b6101de61037736600461248f565b6109e6565b6102546207a12081565b6101de610394366004612424565b610b13565b80516000036103bb5760405163521299a960e01b815260040160405180910390fd5b6104136040518061014001604052806060815260200160608152602001606081526020016060815260200160008152602001606081526020016000815260200160008152602001600081526020016000151581525090565b600560009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa158015610466573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048e9190810190612535565b8152600254604080516321d0927d60e11b815290516001600160a01b03909216916343a124fa916004808201926080929091908290030181865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe91906125d3565b60e085015260c0840152610100830152151561012082015260065481516040516312fd572560e01b81526001600160a01b03909216916312fd57259161054691600401612654565b600060405180830381865afa158015610563573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058b9190810190612667565b602082015261059981610b56565b6000805b83518110156106fa5760008482815181106105ba576105ba612811565b60209081029190910101516001546040516301b9ad5160e51b81526001600160a01b038084166004830152929350911690633735aa2090602401602060405180830381865afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612827565b61063f57506106e8565b60018060009054906101000a90046001600160a01b03166001600160a01b03166349eefeee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190612842565b116106c257506106e8565b60006106ce8583610ee8565b90508080156106db575083155b156106e557600193505b50505b806106f281612871565b91505061059d565b5080610719576040516321aacc4b60e11b815260040160405180910390fd5b6006546020830151604051639e3c475360e01b81526001600160a01b0390921691639e3c47539161074c916004016128ce565b600060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b505060015484516040808701519051632c89c7cd60e11b81526001600160a01b0390931694506359138f9a93506107b39260040161296f565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b5050505060005b8260600151518110156108e8578260600151818151811061080b5761080b612811565b602002602001015160200151600003156108d657600254600754606085015180516001600160a01b039384169363b403b997931691908590811061085157610851612811565b602002602001015160000151600160008860600151878151811061087757610877612811565b6020026020010151602001516040518663ffffffff1660e01b81526004016108a3959493929190612a01565b600060405180830381600087803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b505050505b806108e081612871565b9150506107e8565b5060015460a0830151604051631071929160e01b81526001600160a01b039092169163107192919161091c91600401612a3e565b600060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506109613383608001518460a0015161141d565b61096a82611600565b505050565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106109a5576109a5612811565b60200260200101906001600160a01b031690816001600160a01b0316815250506109ce81610399565b5050565b6109da6118eb565b6109e46000611918565b565b6109ee6118eb565b6109f787611968565b610a0086611968565b610a0985611968565b610a1284611968565b610a1b83611968565b610a2482611968565b610a2d81611968565b600180546001600160a01b038981166001600160a01b03199283168117909355600280548a83169084168117909155600380548a84169085168117909155600480548a85169086168117909155600580548a86169087168117909155600680548a8716908816811790915560078054968a16969097168617909655604080519788526020880194909452928601919091526060850152608084015260a083019190915260c08201527f1669c6fdd5a1a887d7b0630879b829f67186ac0b925d64914815dbe436599b129060e00160405180910390a1610b0a6109d2565b50505050505050565b610b1b6118eb565b6001600160a01b038116610b4a57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610b5381611918565b50565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636060b0556040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd39190810190612535565b8251518151919250610be491612a51565b6001600160401b03811115610bfb57610bfb61229b565b604051908082528060200260200182016040528015610c4657816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610c195790505b5060408301528151516001600160401b03811115610c6657610c6661229b565b604051908082528060200260200182016040528015610cab57816020015b6040805180820190915260008082526020820152815260200190600190039081610c845790505b5060a08301528151516001600160401b03811115610ccb57610ccb61229b565b604051908082528060200260200182016040528015610d1057816020015b6040805180820190915260008082526020820152815260200190600190039081610ce95790505b50606083015260005b825151811015610e5657604051806060016040528084600001518381518110610d4457610d44612811565b60200260200101516001600160a01b03168152602001600115158152602001600081525083604001518281518110610d7e57610d7e612811565b6020026020010181905250604051806040016040528084600001518381518110610daa57610daa612811565b60200260200101516001600160a01b0316815260200160008152508360a001518281518110610ddb57610ddb612811565b6020026020010181905250604051806040016040528084600001518381518110610e0757610e07612811565b60200260200101516001600160a01b03168152602001600081525083606001518281518110610e3857610e38612811565b60200260200101819052508080610e4e90612871565b915050610d19565b5060005b815181101561096a576040518060600160405280838381518110610e8057610e80612811565b60200260200101516001600160a01b031681526020016000151581526020016000815250836040015182856000015151610eba9190612a51565b81518110610eca57610eca612811565b60200260200101819052508080610ee090612871565b915050610e5a565b6000610f1c6040518060a0016040528060008152602001606081526020016000815260200160008152602001600081525090565b600154604051632e46be5f60e21b81526001600160a01b0385811660048301529091169063b91af97c90602401600060405180830381865afa158015610f66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8e9190810190612a64565b606085015260408401819052608084018290526020840192909252610fb2916119b3565b80825261010085015111610fca576000915050611417565b8051670f43fc2c04ee000011801590610fe65750836101200151155b15610ff5576000915050611417565b61100281602001516119e9565b6001548451604051630609d6b760e11b81526001600160a01b0390921691630c13ad6e91611034918790600401612b88565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b50505050670f43fc2c04ee0000816000015110611102576110958160800151826060015183602001518760200151611aaf565b600754602082015160405163dc3f878360e01b81526001600160a01b039092169163dc3f8783916110cb91879190600401612bb2565b600060405180830381600087803b1580156110e557600080fd5b505af11580156110f9573d6000803e3d6000fd5b50505050611119565b611119816060015182602001518660200151611c4b565b60015484516101208601516001600160a01b0390921691638918b9e191908690611144576003611147565b60045b6040518463ffffffff1660e01b815260040161116593929190612c62565b600060405180830381600087803b15801561117f57600080fd5b505af1158015611193573d6000803e3d6000fd5b505050506111ae81602001518560a001518660600151611ca9565b6111c081602001518560400151611e2e565b680ad78ebc5ac6200000846080018181516111db9190612a51565b90525060005b8160200151518110156113e65760008260200151828151811061120657611206612811565b602090810291909101015160035481516080830151604051637d3b6e7960e11b81526001600160a01b0392831660048201526024810191909152929350169063fa76dcf290604401602060405180830381865afa15801561126b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128f9190612842565b8660c0018181516112a09190612ca4565b90525060208101511561134257600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190612842565b8660c00181815161133a9190612ca4565b9052506113d3565b600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190612842565b8660e0018181516113cf9190612ca4565b9052505b50806113de81612871565b9150506111e1565b506113f98460c001518560e001516119b3565b61010085018190526714d1120d7b1600001161012085015250600190505b92915050565b811561150a576000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149c9190612cb7565b6002805460405163b403b99760e01b81529293506001600160a01b03169163b403b997916114d69188918691600091908a90600401612a01565b600060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b50505050505b60005b81518110156115fa5781818151811061152857611528612811565b602002602001015160200151600003156115e85760025482516001600160a01b039091169063b403b99790869085908590811061156757611567612811565b6020026020010151600001516001600087878151811061158957611589612811565b6020026020010151602001516040518663ffffffff1660e01b81526004016115b5959493929190612a01565b600060405180830381600087803b1580156115cf57600080fd5b505af11580156115e3573d6000803e3d6000fd5b505050505b806115f281612871565b91505061150d565b50505050565b8051516000906001600160401b0381111561161d5761161d61229b565b60405190808252806020026020018201604052801561166257816020015b604080518082019091526000808252602082015281526020019060019003908161163b5790505b50905060005b8251518110156116fe5760405180604001604052808460000151838151811061169357611693612811565b60200260200101516001600160a01b03168152602001846040015183815181106116bf576116bf612811565b6020026020010151604001518152508282815181106116e0576116e0612811565b602002602001018190525080806116f690612871565b915050611668565b5060008260200151516001600160401b0381111561171e5761171e61229b565b60405190808252806020026020018201604052801561176357816020015b604080518082019091526000808252602082015281526020019060019003908161173c5790505b50905060005b8360200151518110156118a05760008460200151828151811061178e5761178e612811565b6020026020010151905060008560400151838760000151516117b09190612a51565b815181106117c0576117c0612811565b6020026020010151604001519050604051806040016040528083602001516001600160a01b031681526020018284606001516117fc9190612a51565b81525084848151811061181157611811612811565b602002602001018190525060005b86515181101561188a578260800151818151811061183f5761183f612811565b60200260200101516020015186828151811061185d5761185d612811565b60200260200101516020018181516118759190612a51565b9052508061188281612871565b91505061181f565b505050808061189890612871565b915050611769565b507f3513495d7fd5aeb5c4a43ca2d5bc1193321fb114b6b970ea7becb0a6ddcce840818385608001518660a001516040516118de9493929190612cd4565b60405180910390a1505050565b6000546001600160a01b031633146109e45760405163118cdaa760e01b8152336004820152602401610b41565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811661198f5760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036109ce57604051636f7c43f160e01b815260040160405180910390fd5b600081156119df57816119ce670de0b6b3a764000085612d13565b6119d89190612d2a565b9050611417565b5060001992915050565b60005b81518110156109ce576000828281518110611a0957611a09612811565b602002602001015190508060600151600003611a255750611a9d565b600254815160208301516060840151604051632f5ed88d60e11b81526001600160a01b0390941693635ebdb11a93611a699390929091600191600091600401612d4c565b600060405180830381600087803b158015611a8357600080fd5b505af1158015611a97573d6000803e3d6000fd5b50505050505b80611aa781612871565b9150506119ec565b6000611ac3670f43fc2c04ee000085612d13565b905060005b8351811015611c38576000848281518110611ae557611ae5612811565b602002602001015190508060200151611afe5750611c26565b600354815160a0830151604051637d3b6e7960e11b81526000936001600160a01b03169263fa76dcf292611b48926004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b899190612842565b9050600088611b988387612d13565b611ba29190612d2a565b6003548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190612842565b60a09093019290925250505b80611c3081612871565b915050611ac8565b50611c44848484611f3f565b5050505050565b60005b8251811015611c9d576000838281518110611c6b57611c6b612811565b60200260200101519050806020015115611c8a5760a081015160c08201525b5080611c9581612871565b915050611c4e565b5061096a838383611f3f565b60005b83518110156115fa576000848281518110611cc957611cc9612811565b602002602001015190508060200151611ce25750611e1c565b608081015115611d7d5760005b8451811015611d7b5781600001516001600160a01b0316858281518110611d1857611d18612811565b6020026020010151600001516001600160a01b031603611d69578160800151858281518110611d4957611d49612811565b6020026020010151602001818151611d619190612a51565b905250611d7b565b80611d7381612871565b915050611cef565b505b61010081015115611e1a5760005b8351811015611e185781600001516001600160a01b0316848281518110611db457611db4612811565b6020026020010151600001516001600160a01b031603611e0657816101000151848281518110611de657611de6612811565b6020026020010151602001818151611dfe9190612a51565b905250611e18565b80611e1081612871565b915050611d8b565b505b505b80611e2681612871565b915050611cac565b60005b825181101561096a576000838281518110611e4e57611e4e612811565b602002602001015190508060c00151600003611e6a5750611f2d565b60005b8351811015611f2a5781600001516001600160a01b0316848281518110611e9657611e96612811565b6020026020010151600001516001600160a01b0316141580611edd575081602001511515848281518110611ecc57611ecc612811565b602002602001015160200151151514155b611f18578160c00151848281518110611ef857611ef8612811565b6020026020010151604001818151611f109190612a51565b905250611f2a565b80611f2281612871565b915050611e6d565b50505b80611f3781612871565b915050611e31565b60005b82518110156115fa576000838281518110611f5f57611f5f612811565b60200260200101519050806020015115611f795750612271565b611fbd6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b60005b84518110156120365782600001516001600160a01b0316858281518110611fe957611fe9612811565b6020026020010151602001516001600160a01b0316036120245784818151811061201557612015612811565b60200260200101519150612036565b8061202e81612871565b915050611fc0565b50604081015115612252576120538260a001518260400151612283565b60e0830181905260608201805161206b908390612a51565b90525060e0820151604082018051612084908390612ca4565b905250600354825160e0840151604051637d3b6e7960e11b81526001600160a01b03928316600482015260248101919091526000928992670de0b6b3a76400009291169063fa76dcf290604401602060405180830381865afa1580156120ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121129190612842565b61211c9190612d13565b6121269190612d2a565b905060005b865181101561224f57600087828151811061214857612148612811565b602002602001015190508060200151612161575061223d565b670de0b6b3a7640000838260a0015161217a9190612d13565b6121849190612d2a565b60e0820181905260c08201805161219c908390612ca4565b90525060005b84608001515181101561223a5781600001516001600160a01b0316856080015182815181106121d3576121d3612811565b6020026020010151600001516001600160a01b031603612228578160e001518560800151828151811061220857612208612811565b60200260200101516020018181516122209190612a51565b90525061223a565b8061223281612871565b9150506121a2565b50505b8061224781612871565b91505061212b565b50505b8160e001518260a001516122669190612ca4565b60c090920191909152505b8061227b81612871565b915050611f42565b60008183106122925781612294565b825b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156122d3576122d361229b565b60405290565b604080519081016001600160401b03811182821017156122d3576122d361229b565b60405161012081016001600160401b03811182821017156122d3576122d361229b565b604051601f8201601f191681016001600160401b03811182821017156123465761234661229b565b604052919050565b60006001600160401b038211156123675761236761229b565b5060051b60200190565b6001600160a01b0381168114610b5357600080fd5b6000602080838503121561239957600080fd5b82356001600160401b038111156123af57600080fd5b8301601f810185136123c057600080fd5b80356123d36123ce8261234e565b61231e565b81815260059190911b820183019083810190878311156123f257600080fd5b928401925b8284101561241957833561240a81612371565b825292840192908401906123f7565b979650505050505050565b60006020828403121561243657600080fd5b813561229481612371565b600060208083528351808285015260005b8181101561246e57858101830151858201604001528201612452565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600080600080600060e0888a0312156124aa57600080fd5b87356124b581612371565b965060208801356124c581612371565b955060408801356124d581612371565b945060608801356124e581612371565b935060808801356124f581612371565b925060a088013561250581612371565b915060c088013561251581612371565b8091505092959891949750929550565b805161253081612371565b919050565b6000602080838503121561254857600080fd5b82516001600160401b0381111561255e57600080fd5b8301601f8101851361256f57600080fd5b805161257d6123ce8261234e565b81815260059190911b8201830190838101908783111561259c57600080fd5b928401925b828410156124195783516125b481612371565b825292840192908401906125a1565b8051801515811461253057600080fd5b600080600080608085870312156125e957600080fd5b6125f2856125c3565b60208601516040870151606090970151919890975090945092505050565b600081518084526020808501945080840160005b838110156126495781516001600160a01b031687529582019590820190600101612624565b509495945050505050565b6020815260006122946020830184612610565b60006020828403121561267957600080fd5b81516001600160401b038082111561269057600080fd5b818401915084601f8301126126a457600080fd5b81516126b26123ce8261234e565b8082825260208201915060208360051b8601019250878311156126d457600080fd5b602085015b83811015612805578051858111156126f057600080fd5b860160a0818b03601f1901121561270657600080fd5b61270e6122b1565b602082015161271c81612371565b8152604082015161272c81612371565b6020820152606082810151604083015260808301519082015260a08201518781111561275757600080fd5b8083019250508a603f83011261276c57600080fd5b602082015161277d6123ce8261234e565b81815260069190911b83016040019060208101908d83111561279e57600080fd5b6040850194505b828510156127ef576040858f0312156127bd57600080fd5b6127c56122d9565b85516127d081612371565b81526020868101518183015290835260409095019491909101906127a5565b60808401525050845250602092830192016126d9565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561283957600080fd5b612294826125c3565b60006020828403121561285457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016128835761288361285b565b5060010190565b600081518084526020808501945080840160005b8381101561264957815180516001600160a01b03168852830151838801526040909601959082019060010161289e565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561296157888303603f19018552815180516001600160a01b03908116855288820151168885015286810151878501526060808201519085015260809081015160a09185018290529061294d8186018361288a565b9689019694505050908601906001016128f5565b509098975050505050505050565b6000604080835261298281840186612610565b83810360208581019190915285518083528682019282019060005b8181101561296157845180516001600160a01b0316845284810151151585850152860151868401529383019360609092019160010161299d565b634e487b7160e01b600052602160045260246000fd5b600381106129fd576129fd6129d7565b9052565b6001600160a01b03868116825285166020820152831515604082015260a08101612a2e60608301856129ed565b8260808301529695505050505050565b602081526000612294602083018461288a565b808201808211156114175761141761285b565b6000806000806080808688031215612a7b57600080fd5b85516001600160401b03811115612a9157600080fd5b8601601f81018813612aa257600080fd5b80516020612ab26123ce8361234e565b828152610120928302840182019282820191908c851115612ad257600080fd5b948301945b84861015612b655780868e031215612aef5760008081fd5b612af76122fb565b612b0087612525565b8152612b0d8588016125c3565b818601526040878101519082015260608088015190820152878701518882015260a0808801519082015260c0808801519082015260e08088015190820152610100808801519082015283529485019491830191612ad7565b50918a015160408b01516060909b0151929c909b50919850909650505050505050565b604081526000612b9b6040830185612610565b905060018060a01b03831660208301529392505050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015612c5257815180518716855285810151151586860152888101518986015287810151888601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010090810151908501526101209093019290840190600101612be2565b50919a9950505050505050505050565b606081526000612c756060830186612610565b6001600160a01b0385166020840152905060058310612c9657612c966129d7565b826040830152949350505050565b818103818111156114175761141761285b565b600060208284031215612cc957600080fd5b815161229481612371565b608081526000612ce7608083018761288a565b8281036020840152612cf9818761288a565b90508460408401528281036060840152612419818561288a565b80820281158282048414176114175761141761285b565b600082612d4757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0386168152841515602082015260a08101612d7160408301866129ed565b612a2e60608301856129ed56fea2646970667358221220722b6c14a2c29460f06839ab3feda3c7420a00ca14f699f26442e7a36d2f91b164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12067,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)12034"
      },
      {
        "astId": 12070,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "storagePool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStoragePool)11041"
      },
      {
        "astId": 12073,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 12076,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDebtTokenManager)10132"
      },
      {
        "astId": 12079,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "collTokenManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICollTokenManager)9882"
      },
      {
        "astId": 12082,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "stabilityPoolManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IStabilityPoolManager)10911"
      },
      {
        "astId": 12085,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICollSurplusPool)9858"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)9858": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollTokenManager)9882": {
        "encoding": "inplace",
        "label": "contract ICollTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)10132": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPoolManager)10911": {
        "encoding": "inplace",
        "label": "contract IStabilityPoolManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)11041": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)12034": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}