{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "name": "EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLiquidatableTrove",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storgePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolManager",
          "type": "address"
        }
      ],
      "name": "LiquidationOperationsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "liquidatedDebt",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "liquidatedColl",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStableCoinGasCompensation",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "totalCollGasCompensation",
          "type": "tuple[]"
        }
      ],
      "name": "LiquidationSummary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collTokenManager",
      "outputs": [
        {
          "internalType": "contract ICollTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolManager",
      "outputs": [
        {
          "internalType": "contract IStabilityPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6ba1d1b39405f6cbf817f263d022e8d5ffa59b89eb3203bc2b86d61bcd4db57",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2652003",
    "logsBloom": "0x
    "blockHash": "0xa3fa4b4c135d1e16c55e97d951d279c283719b5a45fd40017d614ff30cfbe1d2",
    "transactionHash": "0xb6ba1d1b39405f6cbf817f263d022e8d5ffa59b89eb3203bc2b86d61bcd4db57",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xb6ba1d1b39405f6cbf817f263d022e8d5ffa59b89eb3203bc2b86d61bcd4db57",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa3fa4b4c135d1e16c55e97d951d279c283719b5a45fd40017d614ff30cfbe1d2"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2652003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a1ba766827c404575f799519d1eb71c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLiquidatableTrove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storgePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolManager\",\"type\":\"address\"}],\"name\":\"LiquidationOperationsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"liquidatedDebt\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"liquidatedColl\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStableCoinGasCompensation\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"totalCollGasCompensation\",\"type\":\"tuple[]\"}],\"name\":\"LiquidationSummary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collTokenManager\",\"outputs\":[{\"internalType\":\"contract ICollTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolManager\",\"outputs\":[{\"internalType\":\"contract IStabilityPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidationOperations.sol\":\"LiquidationOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 3e3; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0xd635d362aeae2f89023daba55875e04566f4e35fdac4bd3895ea4969cffc1308\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n   *\\n   * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n   * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n   *\\n   * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n   * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n   *\\n   */\\n  uint internal constant NICR_PRECISION = 1e20;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) {\\n      return (_coll * NICR_PRECISION) / _debt;\\n    }\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    else {\\n      // if (_debt == 0)\\n      return 2 ** 256 - 1;\\n    }\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5234c90c541302a3eda2b75f02ae3945837771ccc5bb19e2af1839602ba35f9b\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x85f943dcc809f64cc30144f14495c5cdb556371a835f0d6022c7409a7d867fef\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICollTokenManager {\\n  // --- Events ---\\n  event CollTokenManagerInitialized(address _priceFeedAddress);\\n  event CollTokenAdded(address _collTokenAddress);\\n\\n  // --- Custom Errors ---\\n  error TokenAlreadyAdded();\\n\\n  // --- Functions ---\\n\\n  function getCollTokenAddresses() external view returns (address[] memory);\\n\\n  function addCollToken(address _tokenAddress) external;\\n}\\n\",\"keccak256\":\"0x841232977bec6eff931b093b931a48a17dec71e92b89c9d603975787f9d5ca42\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSP();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4da05b4ce909788d8e8f3129c3bb4a4da599ac75935faefb66c3b78cdecd23aa\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x9b263476d765d2c26c970271959c453c2e4607bcf2c58cea71c621d8dc714bb5\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquidationOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface ILiquidationOperations is IBBase {\\n  // --- Events ---\\n\\n  event LiquidationOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager,\\n    address _stabilityPoolManager\\n  );\\n\\n  event LiquidationSummary(\\n    TokenAmount[] liquidatedDebt,\\n    TokenAmount[] liquidatedColl,\\n    uint totalStableCoinGasCompensation,\\n    TokenAmount[] totalCollGasCompensation\\n  );\\n\\n  // --- Errors ---\\n\\n  error NoLiquidatableTrove();\\n  error EmptyArray();\\n\\n  // --- Functions ---\\n\\n  function liquidate(address _borrower) external;\\n\\n  function batchLiquidateTroves(address[] calldata _troveArray) external;\\n}\\n\",\"keccak256\":\"0xdea791097ff63d850a8f6188c03e710e60c0195342145b56abbd42e09dcdef42\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IRedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface IRedemptionOperations is IBBase {\\n  // --- structs ---\\n\\n  struct RedemptionCollAmount {\\n    address collToken;\\n    uint drawn;\\n    uint redemptionFee;\\n    uint sendToRedeemer;\\n  }\\n\\n  // --- Events ---\\n\\n  event RedemptionOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager\\n  );\\n  event SuccessfulRedemption(\\n    uint _attemptedStableAmount,\\n    uint _actualStableAmount,\\n    RedemptionCollAmount[] _collPayouts\\n  );\\n  event RedeemedFromTrove(address _borrower, uint stableAmount, TokenAmount[] _drawnCollAmounts);\\n\\n  // --- Errors ---\\n\\n  error ZeroAmount();\\n  error InvalidMaxFeePercent();\\n  error LessThanMCR();\\n  error ExceedDebtBalance();\\n  error NoRedeems();\\n  error GreaterThanTCR();\\n  error TooHighRedeemFee();\\n\\n  // --- Functions ---\\n\\n  function redeemCollateral(uint _stableCoinAmount, uint _maxFee, address[] memory _sourceTroves) external;\\n\\n  function getRedemptionRate() external view returns (uint);\\n\\n  function getRedemptionRateWithDecay() external view returns (uint);\\n\\n  function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1f64a9c3adcd6a9f87f1a7c64cdd548e0ddf88005feb8d07db04a2841a9617b5\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface IStabilityPoolManager is IBBase {\\n  // --- Events ---\\n\\n  event StabilityPoolManagerInitiated(\\n    address liquidationOperationsAddress,\\n    address storgePoolAddress,\\n    address reservePoolAddress,\\n    address debtTokenManagerAddress,\\n    address priceFeedAddress\\n  );\\n  event StabilityPoolAdded(address stabilityPoolAddress);\\n\\n  // --- Custom Errors ---\\n  error NotFromLiquidationOps();\\n  error NotFromReservePool();\\n  error PoolNotExist();\\n  error PoolExist();\\n  error Unauthorized();\\n\\n  // --- Functions ---\\n  function getStabilityPool(IDebtToken _debtToken) external view returns (IStabilityPool);\\n\\n  function getRemainingStability(\\n    address[] memory collTokenAddresses\\n  ) external view returns (RemainingStability[] memory);\\n\\n  function getTotalDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getTotalDeposit(address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getDepositorDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorDeposit(address _depositor, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getCompoundedDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCompoundedDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view returns (uint amount);\\n\\n  function getDepositorCompoundedDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCollGains(\\n    address _depositor,\\n    address[] memory collTokenAddresses\\n  ) external view returns (TokenAmount[] memory collGains);\\n\\n  function provideStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawGains() external;\\n\\n  function offset(RemainingStability[] memory _toOffset) external;\\n\\n  function addStabilityPool(IDebtToken _debtToken) external;\\n}\\n\",\"keccak256\":\"0x2143d797199cdfc6918f43fe576542938ed8dc7ea1a8f616ca27e334f222726b\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\n// Common interface for the Pools.\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0x5fab91bf7a2ce4ff43aea3b6ccc34b56d96dac82f287867384cd92e5db0f8cc8\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event BaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error ExceedDebtBalance();\\n  error OnlyOneTrove();\\n  error ZeroAmount();\\n  error LessThanMCR();\\n  error InvalidMaxFeePercent();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getNominalICR(address _borrower) external returns (uint);\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate() external view returns (uint);\\n\\n  function getBorrowingRateWithDecay() external view returns (uint);\\n\\n  function getBorrowingFee(uint LUSDDebt) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\\n\\n  function decayBaseRateFromBorrowing() external;\\n\\n  function updateBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc91fe5746ad02a514565adf54bb16d28d1c60110001b1c9f9bac9966757f0ea5\",\"license\":\"MIT\"},\"contracts/LiquidationOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ICollTokenManager.sol';\\nimport './Interfaces/IRedemptionOperations.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/ILiquidationOperations.sol';\\nimport './Interfaces/IStabilityPoolManager.sol';\\n\\ncontract LiquidationOperations is LiquityBase, Ownable(msg.sender), CheckContract, ILiquidationOperations {\\n  string public constant NAME = 'LiquidationOperations';\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IStoragePool public storagePool;\\n  IPriceFeed public priceFeed;\\n  IDebtTokenManager public debtTokenManager;\\n  ICollTokenManager public collTokenManager;\\n  IStabilityPoolManager public stabilityPoolManager;\\n\\n  // --- Data structures ---\\n\\n  struct LocalVariables_OuterLiquidationFunction {\\n    address[] collTokenAddresses;\\n    //\\n    RemainingStability[] remainingStabilities;\\n    CAmount[] tokensToRedistribute;\\n    //\\n    uint totalStableCoinGasCompensation; // paid out to the liquidator\\n    TokenAmount[] totalCollGasCompensation; // paid out to the liquidator\\n    //\\n    uint entireSystemCollInUSD;\\n    uint entireSystemDebtInUSD;\\n  }\\n\\n  struct LocalVariables_LiquidationSequence {\\n    //\\n    bool backToNormalMode;\\n    //\\n    uint ICR;\\n    address user;\\n    //\\n    RAmount[] troveAmountsIncludingRewards;\\n    uint troveDebtInUSD;\\n    uint troveDebtInUSDWithoutGasCompensation;\\n    uint troveCollInUSD;\\n  }\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _stabilityPoolManagerAddress\\n  ) external onlyOwner {\\n    checkContract(_troveManagerAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManagerAddress);\\n    checkContract(_collTokenManagerAddress);\\n    checkContract(_stabilityPoolManagerAddress);\\n\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    debtTokenManager = IDebtTokenManager(_debtTokenManagerAddress);\\n    collTokenManager = ICollTokenManager(_collTokenManagerAddress);\\n    stabilityPoolManager = IStabilityPoolManager(_stabilityPoolManagerAddress);\\n\\n    emit LiquidationOperationsInitialized(\\n      _troveManagerAddress,\\n      _storagePoolAddress,\\n      _priceFeedAddress,\\n      _debtTokenManagerAddress,\\n      _collTokenManagerAddress,\\n      _stabilityPoolManagerAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  // Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n  function liquidate(address _borrower) public override {\\n    address[] memory borrowers = new address[](1);\\n    borrowers[0] = _borrower;\\n    batchLiquidateTroves(borrowers);\\n  }\\n\\n  /*\\n   * Attempt to liquidate a custom list of troves provided by the caller.\\n   */\\n  function batchLiquidateTroves(address[] memory _troveArray) public override {\\n    if (_troveArray.length == 0) revert EmptyArray();\\n\\n    LocalVariables_OuterLiquidationFunction memory vars;\\n    vars.collTokenAddresses = collTokenManager.getCollTokenAddresses();\\n\\n    bool recoveryModeAtStart;\\n    (recoveryModeAtStart, , vars.entireSystemCollInUSD, vars.entireSystemDebtInUSD) = storagePool.checkRecoveryMode();\\n    vars.remainingStabilities = stabilityPoolManager.getRemainingStability(vars.collTokenAddresses);\\n    _initializeEmptyTokensToRedistribute(vars); // all set to 0 (nothing to redistribute)\\n\\n    bool atLeastOneTroveLiquidated;\\n    if (recoveryModeAtStart) atLeastOneTroveLiquidated = _getTotalFromBatchLiquidate_RecoveryMode(vars, _troveArray);\\n    else atLeastOneTroveLiquidated = _getTotalsFromBatchLiquidate_NormalMode(vars, _troveArray);\\n\\n    if (!atLeastOneTroveLiquidated) revert NoLiquidatableTrove();\\n\\n    // move tokens into the stability pools\\n    stabilityPoolManager.offset(vars.remainingStabilities);\\n\\n    // and redistribute the rest (which could not be handled by the stability pool)\\n    troveManager.redistributeDebtAndColl(vars.collTokenAddresses, vars.tokensToRedistribute);\\n\\n    // Update system snapshots\\n    troveManager.updateSystemSnapshots_excludeCollRemainder(vars.totalCollGasCompensation);\\n\\n    // Send gas compensation to caller\\n    _sendGasCompensation(msg.sender, vars.totalStableCoinGasCompensation, vars.totalCollGasCompensation);\\n\\n    // liquidation event\\n    _emitLiquidationSummaryEvent(vars);\\n  }\\n\\n  function _initializeEmptyTokensToRedistribute(LocalVariables_OuterLiquidationFunction memory vars) internal view {\\n    address[] memory debtTokenAddresses = debtTokenManager.getDebtTokenAddresses();\\n\\n    vars.tokensToRedistribute = new CAmount[](debtTokenAddresses.length + vars.collTokenAddresses.length);\\n    vars.totalCollGasCompensation = new TokenAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < vars.collTokenAddresses.length; i++) {\\n      vars.tokensToRedistribute[i] = CAmount(vars.collTokenAddresses[i], true, 0);\\n      vars.totalCollGasCompensation[i] = TokenAmount(vars.collTokenAddresses[i], 0);\\n    }\\n    for (uint i = 0; i < debtTokenAddresses.length; i++)\\n      vars.tokensToRedistribute[vars.collTokenAddresses.length + i] = CAmount(debtTokenAddresses[i], false, 0);\\n  }\\n\\n  /*\\n   * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n   * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n   */\\n  function _getTotalFromBatchLiquidate_RecoveryMode(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    address[] memory _troveArray\\n  ) internal returns (bool atLeastOneTroveLiquidated) {\\n    LocalVariables_LiquidationSequence memory vars;\\n    vars.backToNormalMode = false; // rechecked after every liquidated trove, to adapt strategy\\n\\n    for (uint i = 0; i < _troveArray.length; i++) {\\n      vars.user = _troveArray[i];\\n      if (troveManager.isTroveActive(vars.user) == false) continue; // Skip non-active troves\\n\\n      bool liquidated = _executeTroveLiquidation_RecoveryMode(outerVars, vars);\\n      if (liquidated) atLeastOneTroveLiquidated = true;\\n    }\\n\\n    return atLeastOneTroveLiquidated;\\n  }\\n\\n  function _getTotalsFromBatchLiquidate_NormalMode(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    address[] memory _troveArray\\n  ) internal returns (bool atLeastOneTroveLiquidated) {\\n    LocalVariables_LiquidationSequence memory vars;\\n\\n    for (uint i = 0; i < _troveArray.length; i++) {\\n      vars.user = _troveArray[i];\\n      if (troveManager.isTroveActive(vars.user) == false) continue; // Skip non-active troves\\n\\n      bool liquidated = _executeTroveLiquidation_NormalMode(outerVars, vars);\\n      if (liquidated) atLeastOneTroveLiquidated = true;\\n    }\\n\\n    return atLeastOneTroveLiquidated;\\n  }\\n\\n  function _executeTroveLiquidation_RecoveryMode(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    LocalVariables_LiquidationSequence memory vars\\n  ) internal returns (bool liquidated) {\\n    (\\n      vars.troveAmountsIncludingRewards,\\n      vars.troveCollInUSD,\\n      vars.troveDebtInUSD,\\n      vars.troveDebtInUSDWithoutGasCompensation\\n    ) = troveManager.getEntireDebtAndColl(vars.user);\\n    vars.ICR = LiquityMath._computeCR(vars.troveCollInUSD, vars.troveDebtInUSD);\\n\\n    if (!vars.backToNormalMode) {\\n      if (troveManager.getTroveOwnersCount() <= 1) return false; // don't liquidate if last trove\\n\\n      // Break the loop if ICR is greater than MCR and Stability Pool is empty\\n      // todo check if that makes sense, why do we not redistribute that trove?!\\n      // todo we are checking now if there is enough stability for every debt token, if one is not covered, we skip the hole trove liquidation, is that correct?!\\n      if (\\n        vars.ICR >= MCR &&\\n        _existsEnoughRemainingStabilities(outerVars.remainingStabilities, vars.troveAmountsIncludingRewards)\\n      ) return false;\\n\\n      uint TCR = LiquityMath._computeCR(outerVars.entireSystemCollInUSD, outerVars.entireSystemDebtInUSD);\\n      _liquidateRecoveryMode(\\n        outerVars.remainingStabilities,\\n        outerVars.collTokenAddresses,\\n        vars.user,\\n        vars.ICR,\\n        vars.troveCollInUSD,\\n        vars.troveDebtInUSDWithoutGasCompensation,\\n        TCR,\\n        vars.troveAmountsIncludingRewards\\n      );\\n\\n      // updating total system debt and collateral\\n      for (uint a = 0; a < vars.troveAmountsIncludingRewards.length; a++) {\\n        RAmount memory rAmount = vars.troveAmountsIncludingRewards[a];\\n        outerVars.entireSystemCollInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.gasCompensation);\\n        if (rAmount.isColl)\\n          outerVars.entireSystemCollInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toOffset);\\n        else outerVars.entireSystemDebtInUSD -= priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toOffset);\\n      }\\n\\n      vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n        outerVars.entireSystemCollInUSD,\\n        outerVars.entireSystemDebtInUSD\\n      );\\n    } else if (vars.backToNormalMode && vars.ICR < MCR) {\\n      _liquidateNormalMode(\\n        outerVars,\\n        vars.user,\\n        vars.troveDebtInUSDWithoutGasCompensation,\\n        vars.troveAmountsIncludingRewards\\n      );\\n    } else return false; // break if the loop reaches a Trove with ICR >= MCR\\n\\n    // not liquidated\\n    if (vars.troveAmountsIncludingRewards.length == 0) return false;\\n\\n    _mergeCollGasCompensation(vars.troveAmountsIncludingRewards, outerVars.totalCollGasCompensation);\\n    _mergeTokensToRedistribute(vars.troveAmountsIncludingRewards, outerVars.tokensToRedistribute);\\n    outerVars.totalStableCoinGasCompensation += STABLE_COIN_GAS_COMPENSATION;\\n    return true;\\n  }\\n\\n  // Liquidate one trove, in Recovery Mode.\\n  function _liquidateRecoveryMode(\\n    RemainingStability[] memory remainingStabilities,\\n    address[] memory collTokenAddresses,\\n    address _borrower,\\n    uint _ICR,\\n    uint _troveCollInUSD,\\n    uint _troveDebtInUSDWithoutGasCompensation,\\n    uint _TCR,\\n    RAmount[] memory troveAmountsIncludingRewards\\n  ) internal {\\n    // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n    if (_ICR <= _100pct) {\\n      _movePendingTroveRewardsToActivePool(troveAmountsIncludingRewards);\\n      troveManager.removeStake(collTokenAddresses, _borrower);\\n      for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n        RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n        rAmount.toRedistribute = rAmount.toLiquidate;\\n        // todo gas comp missing\\n      }\\n\\n      troveManager.closeTroveByProtocol(collTokenAddresses, _borrower, Status.closedByLiquidationInRecoveryMode);\\n\\n      // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n    } else if ((_ICR > _100pct) && (_ICR < MCR)) {\\n      _movePendingTroveRewardsToActivePool(troveAmountsIncludingRewards);\\n      troveManager.removeStake(collTokenAddresses, _borrower);\\n      _getOffsetAndRedistributionVals(\\n        _troveDebtInUSDWithoutGasCompensation,\\n        troveAmountsIncludingRewards,\\n        remainingStabilities\\n      );\\n\\n      troveManager.closeTroveByProtocol(collTokenAddresses, _borrower, Status.closedByLiquidationInRecoveryMode);\\n\\n      /*\\n       * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n       * and there is enough debt in the Stability Pool (checked already before), only offset, with no redistribution,\\n       * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n       * The remaining collateral, due to the capped rate, will remain in the trove.\\n       */\\n    } else if ((_ICR >= MCR) && (_ICR < _TCR)) {\\n      _movePendingTroveRewardsToActivePool(troveAmountsIncludingRewards);\\n      troveManager.removeStake(collTokenAddresses, _borrower);\\n      _getCappedOffsetVals(\\n        _troveCollInUSD,\\n        _troveDebtInUSDWithoutGasCompensation,\\n        troveAmountsIncludingRewards,\\n        remainingStabilities\\n      );\\n\\n      troveManager.closeTroveByProtocol(collTokenAddresses, _borrower, Status.closedByLiquidationInNormalMode);\\n    } else {\\n      // if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > debtInStabPool))\\n    }\\n  }\\n\\n  function _executeTroveLiquidation_NormalMode(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    LocalVariables_LiquidationSequence memory vars\\n  ) internal returns (bool liquidated) {\\n    (\\n      vars.troveAmountsIncludingRewards,\\n      vars.troveCollInUSD,\\n      vars.troveDebtInUSD,\\n      vars.troveDebtInUSDWithoutGasCompensation\\n    ) = troveManager.getEntireDebtAndColl(vars.user);\\n\\n    vars.ICR = LiquityMath._computeCR(vars.troveCollInUSD, vars.troveDebtInUSD);\\n    if (vars.ICR >= MCR) return false; // trove is collatoralized enough, skip the liquidation\\n\\n    _liquidateNormalMode(\\n      outerVars,\\n      vars.user,\\n      vars.troveDebtInUSDWithoutGasCompensation,\\n      vars.troveAmountsIncludingRewards\\n    );\\n\\n    _mergeCollGasCompensation(vars.troveAmountsIncludingRewards, outerVars.totalCollGasCompensation);\\n    _mergeTokensToRedistribute(vars.troveAmountsIncludingRewards, outerVars.tokensToRedistribute);\\n    outerVars.totalStableCoinGasCompensation += STABLE_COIN_GAS_COMPENSATION;\\n    return true;\\n  }\\n\\n  // Liquidate one trove, in Normal Mode.\\n  function _liquidateNormalMode(\\n    LocalVariables_OuterLiquidationFunction memory outerVars,\\n    address _borrower,\\n    uint _troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards\\n  ) internal {\\n    _movePendingTroveRewardsToActivePool(troveAmountsIncludingRewards);\\n    troveManager.removeStake(outerVars.collTokenAddresses, _borrower);\\n    _getOffsetAndRedistributionVals(\\n      _troveDebtInUSDWithoutGasCompensation,\\n      troveAmountsIncludingRewards,\\n      outerVars.remainingStabilities\\n    );\\n    troveManager.closeTroveByProtocol(outerVars.collTokenAddresses, _borrower, Status.closedByLiquidationInNormalMode);\\n  }\\n\\n  function _existsEnoughRemainingStabilities(\\n    RemainingStability[] memory _remainingStabilities,\\n    RAmount[] memory troveAmounts\\n  ) internal pure returns (bool) {\\n    for (uint a = 0; a < troveAmounts.length; a++) {\\n      RAmount memory troveAmount = troveAmounts[a];\\n      if (troveAmount.isColl) continue;\\n\\n      bool tokenChecked = false;\\n      for (uint b = 0; b < _remainingStabilities.length; b++) {\\n        if (_remainingStabilities[b].tokenAddress != troveAmount.tokenAddress) continue;\\n        if (_remainingStabilities[b].remaining < troveAmount.toLiquidate) return false;\\n        tokenChecked = true;\\n        break;\\n      }\\n      if (!tokenChecked) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  // Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\n  function _checkPotentialRecoveryMode(uint _entireSystemColl, uint _entireSystemDebt) internal pure returns (bool) {\\n    uint TCR = LiquityMath._computeCR(_entireSystemColl, _entireSystemDebt);\\n    return TCR < CCR;\\n  }\\n\\n  // adding up the coll gas compensation\\n  function _mergeCollGasCompensation(\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    TokenAmount[] memory totalCollGasCompensation\\n  ) internal pure {\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (rAmount.gasCompensation == 0 || !rAmount.isColl) continue;\\n\\n      for (uint ib = 0; ib < totalCollGasCompensation.length; ib++) {\\n        if (totalCollGasCompensation[ib].tokenAddress != rAmount.tokenAddress) continue;\\n\\n        totalCollGasCompensation[ib].amount += rAmount.gasCompensation;\\n        break;\\n      }\\n    }\\n  }\\n\\n  // adding up the token to redistribute\\n  function _mergeTokensToRedistribute(\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    CAmount[] memory tokensToRedistribute\\n  ) internal pure {\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (rAmount.toRedistribute == 0) continue;\\n\\n      for (uint ib = 0; ib < tokensToRedistribute.length; ib++) {\\n        if (\\n          tokensToRedistribute[ib].tokenAddress != rAmount.tokenAddress ||\\n          tokensToRedistribute[ib].isColl != rAmount.isColl\\n        ) continue;\\n\\n        tokensToRedistribute[ib].amount += rAmount.toRedistribute;\\n        break;\\n      }\\n    }\\n  }\\n\\n  // Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n  function _movePendingTroveRewardsToActivePool(RAmount[] memory _troveAmountsIncludingRewards) internal {\\n    for (uint i = 0; i < _troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = _troveAmountsIncludingRewards[i];\\n      if (rAmount.pendingReward == 0) continue;\\n\\n      storagePool.transferBetweenTypes(\\n        rAmount.tokenAddress,\\n        rAmount.isColl,\\n        PoolType.Default,\\n        PoolType.Active,\\n        rAmount.pendingReward\\n      );\\n    }\\n  }\\n\\n  /* In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n   * redistributed to active troves.\\n   */\\n  function _getOffsetAndRedistributionVals(\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    /*\\n     * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n     * between all active troves.\\n     *\\n     *  If the trove's debt is larger than the deposited LUSD in the Stability Pool:\\n     *\\n     *  - Offset an amount of the trove's debt equal to the LUSD in the Stability Pool\\n     *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n     *\\n     */\\n\\n    // by default the entire coll needs to be redistributed\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (rAmount.isColl) rAmount.toRedistribute = rAmount.toLiquidate;\\n    }\\n\\n    _debtOffset(troveDebtInUSDWithoutGasCompensation, troveAmountsIncludingRewards, remainingStabilities);\\n  }\\n\\n  // Get its offset coll/debt and gas comp.\\n  function _getCappedOffsetVals(\\n    uint troveCollInUSD,\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    // capping the to be liquidated collateral to 1.1 * the total debts value\\n    uint cappedLimit = troveDebtInUSDWithoutGasCompensation * MCR; // total debt * 1.1\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmount = troveAmountsIncludingRewards[i];\\n      if (!rAmount.isColl) continue; // coll will be handled later in the debts loop\\n      // priceFeed.getUSDValue(rAmount.tokenAddress, rAmount.toLiquidate)\\n      uint cappedColl = (cappedLimit * rAmount.toLiquidate) / troveCollInUSD;\\n      rAmount.toLiquidate = LiquityMath._min(cappedColl, rAmount.toLiquidate);\\n    }\\n\\n    _debtOffset(troveDebtInUSDWithoutGasCompensation, troveAmountsIncludingRewards, remainingStabilities);\\n  }\\n\\n  function _debtOffset(\\n    uint troveDebtInUSDWithoutGasCompensation,\\n    RAmount[] memory troveAmountsIncludingRewards,\\n    RemainingStability[] memory remainingStabilities\\n  ) internal view {\\n    // checking if some debt can be offset by the matching stability pool\\n    for (uint i = 0; i < troveAmountsIncludingRewards.length; i++) {\\n      RAmount memory rAmountDebt = troveAmountsIncludingRewards[i];\\n      if (rAmountDebt.isColl) continue; // coll will be handled by the debts loop\\n\\n      // find the right remainingStability entry for the current debt token\\n      RemainingStability memory remainingStability;\\n      for (uint ii = 0; ii < remainingStabilities.length; ii++) {\\n        if (remainingStabilities[ii].tokenAddress == rAmountDebt.tokenAddress) {\\n          remainingStability = remainingStabilities[ii];\\n          break;\\n        }\\n      }\\n\\n      // trying to hand the debt over to the stability pool\\n      if (remainingStability.remaining > 0) {\\n        rAmountDebt.toOffset = LiquityMath._min(rAmountDebt.toLiquidate, remainingStability.remaining);\\n        remainingStability.debtToOffset += rAmountDebt.toOffset;\\n        remainingStability.remaining -= rAmountDebt.toOffset;\\n\\n        uint offsetPercentage = (priceFeed.getUSDValue(rAmountDebt.tokenAddress, rAmountDebt.toOffset) *\\n          DECIMAL_PRECISION) / troveDebtInUSDWithoutGasCompensation; // relative to the troves total debt\\n\\n        // moving the offsetPercentage of each coll into the stable pool\\n        for (uint ii = 0; ii < troveAmountsIncludingRewards.length; ii++) {\\n          RAmount memory rAmountColl = troveAmountsIncludingRewards[ii];\\n          if (!rAmountColl.isColl) continue; // debt already handled one step above\\n\\n          rAmountColl.toOffset = (rAmountColl.toLiquidate * offsetPercentage) / DECIMAL_PRECISION;\\n          rAmountColl.toRedistribute -= rAmountColl.toOffset;\\n\\n          // find the right collGained entry and add the value\\n          for (uint iii = 0; iii < remainingStability.collGained.length; iii++) {\\n            if (remainingStability.collGained[iii].tokenAddress != rAmountColl.tokenAddress) continue;\\n\\n            remainingStability.collGained[iii].amount += rAmountColl.toOffset;\\n            break;\\n          }\\n        }\\n      }\\n\\n      // remaining debt needs to be redistributed\\n      rAmountDebt.toRedistribute = rAmountDebt.toLiquidate - rAmountDebt.toOffset;\\n    }\\n  }\\n\\n  function _sendGasCompensation(\\n    address _liquidator,\\n    uint _stableCoinGasCompensation,\\n    TokenAmount[] memory _collGasCompensation\\n  ) internal {\\n    // stable payout\\n    if (_stableCoinGasCompensation != 0) {\\n      IDebtToken stableCoin = debtTokenManager.getStableCoin();\\n      storagePool.withdrawalValue(\\n        _liquidator,\\n        address(stableCoin),\\n        false,\\n        PoolType.GasCompensation,\\n        _stableCoinGasCompensation\\n      );\\n    }\\n\\n    // coll payout\\n    for (uint i = 0; i < _collGasCompensation.length; i++) {\\n      if (_collGasCompensation[i].amount == 0) continue;\\n      storagePool.withdrawalValue(\\n        _liquidator,\\n        _collGasCompensation[i].tokenAddress,\\n        true,\\n        PoolType.Active,\\n        _collGasCompensation[i].amount\\n      );\\n    }\\n  }\\n\\n  function _emitLiquidationSummaryEvent(LocalVariables_OuterLiquidationFunction memory vars) internal {\\n    TokenAmount[] memory liquidatedColl = new TokenAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < vars.collTokenAddresses.length; i++) {\\n      liquidatedColl[i] = TokenAmount(\\n        vars.collTokenAddresses[i],\\n        vars.tokensToRedistribute[i].amount // works because of the initialisation of the array (first debts, then colls)\\n      );\\n    }\\n\\n    TokenAmount[] memory liquidatedDebt = new TokenAmount[](vars.remainingStabilities.length);\\n    for (uint i = 0; i < vars.remainingStabilities.length; i++) {\\n      RemainingStability memory remainingStability = vars.remainingStabilities[i];\\n\\n      uint redistributed = vars.tokensToRedistribute[vars.collTokenAddresses.length + i].amount; // has the same token order in the array\\n      liquidatedDebt[i] = TokenAmount(remainingStability.tokenAddress, remainingStability.debtToOffset + redistributed);\\n\\n      for (uint ii = 0; ii < vars.collTokenAddresses.length; ii++) {\\n        liquidatedColl[ii].amount += remainingStability.collGained[ii].amount;\\n      }\\n    }\\n\\n    emit LiquidationSummary(\\n      liquidatedDebt,\\n      liquidatedColl,\\n      vars.totalStableCoinGasCompensation,\\n      vars.totalCollGasCompensation\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x860067278e4f27ae45ff522c1880c5fa71c78dcae348aa155a15d6b186c49f55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612e8b80620000ab6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063943ebeae1161007c578063943ebeae1461029c578063a3f4df7e146102af578063ddbeb714146102f0578063e67729e314610303578063f2fde38b1461030d578063f92d34331461018857600080fd5b8063715018a61461024257806372fe25aa1461024a578063741bef1a14610259578063794e57241461026c5780638d63c6651461027b5780638da5cb5b1461028b57600080fd5b80633d83908a116101155780633d83908a146101d45780634870dd9a146101e7578063502afb04146101ef578063522a86fe1461020d5780635733d58f146102205780636cfb6bf91461022f57600080fd5b80631e8b1c2b14610152578063240926691461016757806328d28b5b146101885780632f2b4e90146101965780632f865568146101c1575b600080fd5b610165610160366004612532565b610320565b005b61017566b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b6101756611c37937e0800081565b6006546101a9906001600160a01b031681565b6040516001600160a01b03909116815260200161017f565b6101656101cf3660046125d0565b610695565b6001546101a9906001600160a01b031681565b61017560c881565b6101f8610bb881565b60405163ffffffff909116815260200161017f565b6004546101a9906001600160a01b031681565b6101756714d1120d7b16000081565b61016561023d3660046125ed565b6106f8565b610165610804565b610175670de0b6b3a764000081565b6003546101a9906001600160a01b031681565b610175670f43fc2c04ee000081565b610175680ad78ebc5ac620000081565b6000546001600160a01b03166101a9565b6005546101a9906001600160a01b031681565b6102e3604051806040016040528060158152602001744c69717569646174696f6e4f7065726174696f6e7360581b81525081565b60405161017f919061266f565b6002546101a9906001600160a01b031681565b6101f8620f424081565b61016561031b3660046125d0565b610818565b80516000036103425760405163521299a960e01b815260040160405180910390fd5b6103826040518060e00160405280606081526020016060815260200160608152602001600081526020016060815260200160008152602001600081525090565b600560009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fd91908101906126bd565b8152600254604080516321d0927d60e11b815290516000926001600160a01b0316916343a124fa9160048083019260809291908290030181865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190612760565b60c086015260a08501525060065483516040516312fd572560e01b81529293506001600160a01b03909116916312fd5725916104ab916004016127e1565b600060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f091908101906127f4565b60208301526104fe8261085b565b60008115610517576105108385610b30565b9050610524565b6105218385610c19565b90505b80610542576040516321aacc4b60e11b815260040160405180910390fd5b6006546020840151604051639e3c475360e01b81526001600160a01b0390921691639e3c475391610575916004016129e2565b600060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505060015485516040808801519051632c89c7cd60e11b81526001600160a01b0390931694506359138f9a93506105dc92600401612a83565b600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b50506001546080860151604051631071929160e01b81526001600160a01b0390921693506310719291925061064191600401612aeb565b600060405180830381600087803b15801561065b57600080fd5b505af115801561066f573d6000803e3d6000fd5b505050506106863384606001518560800151610cf6565b61068f83610ed3565b50505050565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106106cb576106cb612afe565b60200260200101906001600160a01b031690816001600160a01b0316815250506106f481610320565b5050565b6107006111be565b610709866111eb565b610712856111eb565b61071b846111eb565b610724836111eb565b61072d826111eb565b610736816111eb565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f0790df4d7a0f302edbb8a8eee49211c9ddfe6e3b3541fbcd5733df44592662aa9060c00160405180910390a16107fc610804565b505050505050565b61080c6111be565b6108166000611236565b565b6108206111be565b6001600160a01b03811661084f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61085881611236565b50565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636060b0556040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d891908101906126bd565b82515181519192506108e991612b2a565b6001600160401b0381111561090057610900612447565b60405190808252806020026020018201604052801561094b57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161091e5790505b5060408301528151516001600160401b0381111561096b5761096b612447565b6040519080825280602002602001820160405280156109b057816020015b60408051808201909152600080825260208201528152602001906001900390816109895790505b50608083015260005b825151811015610a99576040518060600160405280846000015183815181106109e4576109e4612afe565b60200260200101516001600160a01b03168152602001600115158152602001600081525083604001518281518110610a1e57610a1e612afe565b6020026020010181905250604051806040016040528084600001518381518110610a4a57610a4a612afe565b60200260200101516001600160a01b03168152602001600081525083608001518281518110610a7b57610a7b612afe565b60200260200101819052508080610a9190612b3d565b9150506109b9565b5060005b8151811015610b2b576040518060600160405280838381518110610ac357610ac3612afe565b60200260200101516001600160a01b031681526020016000151581526020016000815250836040015182856000015151610afd9190612b2a565b81518110610b0d57610b0d612afe565b60200260200101819052508080610b2390612b3d565b915050610a9d565b505050565b6000610b3a6123ff565b60008082525b8351811015610c1057838181518110610b5b57610b5b612afe565b60209081029190910101516001600160a01b03908116604084810182905260015490516301b9ad5160e51b8152600481019290925290911690633735aa2090602401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612b56565b15610bfe576000610bef8684611286565b90508015610bfc57600193505b505b80610c0881612b3d565b915050610b40565b50505b92915050565b6000610c236123ff565b60005b8351811015610c1057838181518110610c4157610c41612afe565b60209081029190910101516001600160a01b03908116604084810182905260015490516301b9ad5160e51b8152600481019290925290911690633735aa2090602401602060405180830381865afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190612b56565b15610ce4576000610cd586846116f4565b90508015610ce257600193505b505b80610cee81612b3d565b915050610c26565b8115610de3576000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d759190612b71565b6002805460405163b403b99760e01b81529293506001600160a01b03169163b403b99791610daf9188918691600091908a90600401612bb8565b600060405180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b50505050505b60005b815181101561068f57818181518110610e0157610e01612afe565b60200260200101516020015160000315610ec15760025482516001600160a01b039091169063b403b997908690859085908110610e4057610e40612afe565b60200260200101516000015160016000878781518110610e6257610e62612afe565b6020026020010151602001516040518663ffffffff1660e01b8152600401610e8e959493929190612bb8565b600060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050505b80610ecb81612b3d565b915050610de6565b8051516000906001600160401b03811115610ef057610ef0612447565b604051908082528060200260200182016040528015610f3557816020015b6040805180820190915260008082526020820152815260200190600190039081610f0e5790505b50905060005b825151811015610fd157604051806040016040528084600001518381518110610f6657610f66612afe565b60200260200101516001600160a01b0316815260200184604001518381518110610f9257610f92612afe565b602002602001015160400151815250828281518110610fb357610fb3612afe565b60200260200101819052508080610fc990612b3d565b915050610f3b565b5060008260200151516001600160401b03811115610ff157610ff1612447565b60405190808252806020026020018201604052801561103657816020015b604080518082019091526000808252602082015281526020019060019003908161100f5790505b50905060005b8360200151518110156111735760008460200151828151811061106157611061612afe565b6020026020010151905060008560400151838760000151516110839190612b2a565b8151811061109357611093612afe565b6020026020010151604001519050604051806040016040528083602001516001600160a01b031681526020018284606001516110cf9190612b2a565b8152508484815181106110e4576110e4612afe565b602002602001018190525060005b86515181101561115d578260800151818151811061111257611112612afe565b60200260200101516020015186828151811061113057611130612afe565b60200260200101516020018181516111489190612b2a565b9052508061115581612b3d565b9150506110f2565b505050808061116b90612b3d565b91505061103c565b507f3513495d7fd5aeb5c4a43ca2d5bc1193321fb114b6b970ea7becb0a6ddcce8408183856060015186608001516040516111b19493929190612bf5565b60405180910390a1505050565b6000546001600160a01b031633146108165760405163118cdaa760e01b8152336004820152602401610846565b6001600160a01b0381166112125760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036106f457604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040828101519051632e46be5f60e21b81526001600160a01b039182166004820152600092919091169063b91af97c90602401600060405180830381865afa1580156112d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113019190810190612c34565b60a08601526080850181905260c085018290526060850192909252611325916117c8565b602083015281516116515760018060009054906101000a90046001600160a01b03166001600160a01b03166349eefeee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a89190612d52565b116113b557506000610c13565b670f43fc2c04ee00008260200151101580156113de57506113de836020015183606001516117fe565b156113eb57506000610c13565b60006113ff8460a001518560c001516117c8565b905061142d84602001518560000151856040015186602001518760c001518860a00151878a60600151611902565b60005b8360600151518110156116355760008460600151828151811061145557611455612afe565b602090810291909101015160035481516080830151604051637d3b6e7960e11b81526001600160a01b0392831660048201526024810191909152929350169063fa76dcf290604401602060405180830381865afa1580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190612d52565b8660a0018181516114ef9190612d6b565b90525060208101511561159157600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115789190612d52565b8660a0018181516115899190612d6b565b905250611622565b600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d9190612d52565b8660c00181815161161e9190612d6b565b9052505b508061162d81612b3d565b915050611430565b506116488460a001518560c00151611bd6565b15835250611694565b8151801561166a5750670f43fc2c04ee00008260200151105b1561168c576116878383604001518460a001518560600151611bf5565b611694565b506000610c13565b8160600151516000036116a957506000610c13565b6116bb82606001518460800151611cd4565b6116cd82606001518460400151611dc2565b680ad78ebc5ac6200000836060018181516116e89190612b2a565b90525060019392505050565b6001546040828101519051632e46be5f60e21b81526001600160a01b039182166004820152600092919091169063b91af97c90602401600060405180830381865afa158015611747573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261176f9190810190612c34565b60a08601526080850181905260c085018290526060850192909252611793916117c8565b60208301819052670f43fc2c04ee0000116117b057506000610c13565b6116a98383604001518460a001518560600151611bf5565b600081156117f457816117e3670de0b6b3a764000085612d7e565b6117ed9190612d95565b9050610c13565b5060001992915050565b6000805b82518110156118f857600083828151811061181f5761181f612afe565b6020026020010151905080602001511561183957506118e6565b6000805b86518110156118d15782600001516001600160a01b031687828151811061186657611866612afe565b6020026020010151602001516001600160a01b0316036118bf578260a0015187828151811061189757611897612afe565b60200260200101516040015110156118b6576000945050505050610c13565b600191506118d1565b806118c981612b3d565b91505061183d565b50806118e35760009350505050610c13565b50505b806118f081612b3d565b915050611802565b5060019392505050565b670de0b6b3a76400008511611a335761191a81611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e9061194c908a908a90600401612db7565b600060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b5050505060005b81518110156119c757600082828151811061199e5761199e612afe565b602090810291909101015160a081015160c09091015250806119bf81612b3d565b915050611981565b50600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a906004908101612de1565b600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b50505050611bcc565b670de0b6b3a764000085118015611a515750670f43fc2c04ee000085105b15611b0257611a5f81611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e90611a91908a908a90600401612db7565b600060405180830381600087803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b50505050611ace83828a611f99565b600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a906004908101612de1565b670f43fc2c04ee00008510158015611b1957508185105b15611bcc57611b2781611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e90611b59908a908a90600401612db7565b600060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b50505050611b978484838b611ff7565b600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a90600390600401612de1565b5050505050505050565b600080611be384846117c8565b6714d1120d7b16000011949350505050565b611bfe81611ed3565b6001548451604051630609d6b760e11b81526001600160a01b0390921691630c13ad6e91611c30918790600401612db7565b600060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b50505050611c7182828660200151611f99565b6001548451604051638918b9e160e01b81526001600160a01b0390921691638918b9e191611ca6918790600390600401612de1565b600060405180830381600087803b158015611cc057600080fd5b505af1158015611bcc573d6000803e3d6000fd5b60005b8251811015610b2b576000838281518110611cf457611cf4612afe565b60200260200101519050806080015160001480611d1357508060200151155b15611d1e5750611db0565b60005b8351811015611dad5781600001516001600160a01b0316848281518110611d4a57611d4a612afe565b6020026020010151600001516001600160a01b031603611d9b578160800151848281518110611d7b57611d7b612afe565b6020026020010151602001818151611d939190612b2a565b905250611dad565b80611da581612b3d565b915050611d21565b50505b80611dba81612b3d565b915050611cd7565b60005b8251811015610b2b576000838281518110611de257611de2612afe565b602002602001015190508060c00151600003611dfe5750611ec1565b60005b8351811015611ebe5781600001516001600160a01b0316848281518110611e2a57611e2a612afe565b6020026020010151600001516001600160a01b0316141580611e71575081602001511515848281518110611e6057611e60612afe565b602002602001015160200151151514155b611eac578160c00151848281518110611e8c57611e8c612afe565b6020026020010151604001818151611ea49190612b2a565b905250611ebe565b80611eb681612b3d565b915050611e01565b50505b80611ecb81612b3d565b915050611dc5565b60005b81518110156106f4576000828281518110611ef357611ef3612afe565b602002602001015190508060600151600003611f0f5750611f87565b600254815160208301516060840151604051632f5ed88d60e11b81526001600160a01b0390941693635ebdb11a93611f539390929091600191600091600401612e23565b600060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b50505050505b80611f9181612b3d565b915050611ed6565b60005b8251811015611feb576000838281518110611fb957611fb9612afe565b60200260200101519050806020015115611fd85760a081015160c08201525b5080611fe381612b3d565b915050611f9c565b50610b2b8383836120a3565b600061200b670f43fc2c04ee000085612d7e565b905060005b835181101561209057600084828151811061202d5761202d612afe565b602002602001015190508060200151612046575061207e565b6000878260a00151856120599190612d7e565b6120639190612d95565b9050612073818360a001516123e7565b60a090920191909152505b8061208881612b3d565b915050612010565b5061209c8484846120a3565b5050505050565b60005b825181101561068f5760008382815181106120c3576120c3612afe565b602002602001015190508060200151156120dd57506123d5565b6121216040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b60005b845181101561219a5782600001516001600160a01b031685828151811061214d5761214d612afe565b6020026020010151602001516001600160a01b0316036121885784818151811061217957612179612afe565b6020026020010151915061219a565b8061219281612b3d565b915050612124565b506040810151156123b6576121b78260a0015182604001516123e7565b60e083018190526060820180516121cf908390612b2a565b90525060e08201516040820180516121e8908390612d6b565b905250600354825160e0840151604051637d3b6e7960e11b81526001600160a01b03928316600482015260248101919091526000928992670de0b6b3a76400009291169063fa76dcf290604401602060405180830381865afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190612d52565b6122809190612d7e565b61228a9190612d95565b905060005b86518110156123b35760008782815181106122ac576122ac612afe565b6020026020010151905080602001516122c557506123a1565b670de0b6b3a7640000838260a001516122de9190612d7e565b6122e89190612d95565b60e0820181905260c082018051612300908390612d6b565b90525060005b84608001515181101561239e5781600001516001600160a01b03168560800151828151811061233757612337612afe565b6020026020010151600001516001600160a01b03160361238c578160e001518560800151828151811061236c5761236c612afe565b60200260200101516020018181516123849190612b2a565b90525061239e565b8061239681612b3d565b915050612306565b50505b806123ab81612b3d565b91505061228f565b50505b8160e001518260a001516123ca9190612d6b565b60c090920191909152505b806123df81612b3d565b9150506120a6565b60008183106123f657816123f8565b825b9392505050565b6040518060e001604052806000151581526020016000815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561247f5761247f612447565b60405290565b604080519081016001600160401b038111828210171561247f5761247f612447565b60405161010081016001600160401b038111828210171561247f5761247f612447565b604051601f8201601f191681016001600160401b03811182821017156124f2576124f2612447565b604052919050565b60006001600160401b0382111561251357612513612447565b5060051b60200190565b6001600160a01b038116811461085857600080fd5b6000602080838503121561254557600080fd5b82356001600160401b0381111561255b57600080fd5b8301601f8101851361256c57600080fd5b803561257f61257a826124fa565b6124ca565b81815260059190911b8201830190838101908783111561259e57600080fd5b928401925b828410156125c55783356125b68161251d565b825292840192908401906125a3565b979650505050505050565b6000602082840312156125e257600080fd5b81356123f88161251d565b60008060008060008060c0878903121561260657600080fd5b86356126118161251d565b955060208701356126218161251d565b945060408701356126318161251d565b935060608701356126418161251d565b925060808701356126518161251d565b915060a08701356126618161251d565b809150509295509295509295565b600060208083528351808285015260005b8181101561269c57858101830151858201604001528201612680565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208083850312156126d057600080fd5b82516001600160401b038111156126e657600080fd5b8301601f810185136126f757600080fd5b805161270561257a826124fa565b81815260059190911b8201830190838101908783111561272457600080fd5b928401925b828410156125c557835161273c8161251d565b82529284019290840190612729565b8051801515811461275b57600080fd5b919050565b6000806000806080858703121561277657600080fd5b61277f8561274b565b60208601516040870151606090970151919890975090945092505050565b600081518084526020808501945080840160005b838110156127d65781516001600160a01b0316875295820195908201906001016127b1565b509495945050505050565b6020815260006123f8602083018461279d565b60006020828403121561280657600080fd5b81516001600160401b038082111561281d57600080fd5b818401915084601f83011261283157600080fd5b815161283f61257a826124fa565b8082825260208201915060208360051b86010192508783111561286157600080fd5b602085015b838110156129925780518581111561287d57600080fd5b860160a0818b03601f1901121561289357600080fd5b61289b61245d565b60208201516128a98161251d565b815260408201516128b98161251d565b6020820152606082810151604083015260808301519082015260a0820151878111156128e457600080fd5b8083019250508a603f8301126128f957600080fd5b602082015161290a61257a826124fa565b81815260069190911b83016040019060208101908d83111561292b57600080fd5b6040850194505b8285101561297c576040858f03121561294a57600080fd5b612952612485565b855161295d8161251d565b8152602086810151818301529083526040909501949190910190612932565b6080840152505084525060209283019201612866565b50979650505050505050565b600081518084526020808501945080840160005b838110156127d657815180516001600160a01b0316885283015183880152604090960195908201906001016129b2565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612a7557888303603f19018552815180516001600160a01b03908116855288820151168885015286810151878501526060808201519085015260809081015160a091850182905290612a618186018361299e565b968901969450505090860190600101612a09565b509098975050505050505050565b60006040808352612a968184018661279d565b83810360208581019190915285518083528682019282019060005b81811015612a7557845180516001600160a01b03168452848101511515858501528601518684015293830193606090920191600101612ab1565b6020815260006123f8602083018461299e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610c1357610c13612b14565b600060018201612b4f57612b4f612b14565b5060010190565b600060208284031215612b6857600080fd5b6123f88261274b565b600060208284031215612b8357600080fd5b81516123f88161251d565b634e487b7160e01b600052602160045260246000fd5b60038110612bb457612bb4612b8e565b9052565b6001600160a01b03868116825285166020820152831515604082015260a08101612be56060830185612ba4565b8260808301529695505050505050565b608081526000612c08608083018761299e565b8281036020840152612c1a818761299e565b905084604084015282810360608401526125c5818561299e565b6000806000806080808688031215612c4b57600080fd5b85516001600160401b03811115612c6157600080fd5b8601601f81018813612c7257600080fd5b80516020612c8261257a836124fa565b82815260089290921b8301810191818101908b841115612ca157600080fd5b938201935b83851015612d3057610100858d031215612cc05760008081fd5b612cc86124a7565b8551612cd38161251d565b8152612ce086850161274b565b818501526040868101519082015260608087015190820152868601518782015260a0808701519082015260c0808701519082015260e0808701519082015282526101009094019390820190612ca6565b918a015160408b01516060909b0151929c909b50919850909650505050505050565b600060208284031215612d6457600080fd5b5051919050565b81810381811115610c1357610c13612b14565b8082028115828204841417610c1357610c13612b14565b600082612db257634e487b7160e01b600052601260045260246000fd5b500490565b604081526000612dca604083018561279d565b905060018060a01b03831660208301529392505050565b606081526000612df4606083018661279d565b6001600160a01b0385166020840152905060058310612e1557612e15612b8e565b826040830152949350505050565b6001600160a01b0386168152841515602082015260a08101612e486040830186612ba4565b612be56060830185612ba456fea2646970667358221220100249ca07f0cd561b00a7c84acf70bd89007e69e24e24ea3c81e8681a0aaf2c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063943ebeae1161007c578063943ebeae1461029c578063a3f4df7e146102af578063ddbeb714146102f0578063e67729e314610303578063f2fde38b1461030d578063f92d34331461018857600080fd5b8063715018a61461024257806372fe25aa1461024a578063741bef1a14610259578063794e57241461026c5780638d63c6651461027b5780638da5cb5b1461028b57600080fd5b80633d83908a116101155780633d83908a146101d45780634870dd9a146101e7578063502afb04146101ef578063522a86fe1461020d5780635733d58f146102205780636cfb6bf91461022f57600080fd5b80631e8b1c2b14610152578063240926691461016757806328d28b5b146101885780632f2b4e90146101965780632f865568146101c1575b600080fd5b610165610160366004612532565b610320565b005b61017566b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b6101756611c37937e0800081565b6006546101a9906001600160a01b031681565b6040516001600160a01b03909116815260200161017f565b6101656101cf3660046125d0565b610695565b6001546101a9906001600160a01b031681565b61017560c881565b6101f8610bb881565b60405163ffffffff909116815260200161017f565b6004546101a9906001600160a01b031681565b6101756714d1120d7b16000081565b61016561023d3660046125ed565b6106f8565b610165610804565b610175670de0b6b3a764000081565b6003546101a9906001600160a01b031681565b610175670f43fc2c04ee000081565b610175680ad78ebc5ac620000081565b6000546001600160a01b03166101a9565b6005546101a9906001600160a01b031681565b6102e3604051806040016040528060158152602001744c69717569646174696f6e4f7065726174696f6e7360581b81525081565b60405161017f919061266f565b6002546101a9906001600160a01b031681565b6101f8620f424081565b61016561031b3660046125d0565b610818565b80516000036103425760405163521299a960e01b815260040160405180910390fd5b6103826040518060e00160405280606081526020016060815260200160608152602001600081526020016060815260200160008152602001600081525090565b600560009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fd91908101906126bd565b8152600254604080516321d0927d60e11b815290516000926001600160a01b0316916343a124fa9160048083019260809291908290030181865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190612760565b60c086015260a08501525060065483516040516312fd572560e01b81529293506001600160a01b03909116916312fd5725916104ab916004016127e1565b600060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f091908101906127f4565b60208301526104fe8261085b565b60008115610517576105108385610b30565b9050610524565b6105218385610c19565b90505b80610542576040516321aacc4b60e11b815260040160405180910390fd5b6006546020840151604051639e3c475360e01b81526001600160a01b0390921691639e3c475391610575916004016129e2565b600060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505060015485516040808801519051632c89c7cd60e11b81526001600160a01b0390931694506359138f9a93506105dc92600401612a83565b600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b50506001546080860151604051631071929160e01b81526001600160a01b0390921693506310719291925061064191600401612aeb565b600060405180830381600087803b15801561065b57600080fd5b505af115801561066f573d6000803e3d6000fd5b505050506106863384606001518560800151610cf6565b61068f83610ed3565b50505050565b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106106cb576106cb612afe565b60200260200101906001600160a01b031690816001600160a01b0316815250506106f481610320565b5050565b6107006111be565b610709866111eb565b610712856111eb565b61071b846111eb565b610724836111eb565b61072d826111eb565b610736816111eb565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f0790df4d7a0f302edbb8a8eee49211c9ddfe6e3b3541fbcd5733df44592662aa9060c00160405180910390a16107fc610804565b505050505050565b61080c6111be565b6108166000611236565b565b6108206111be565b6001600160a01b03811661084f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61085881611236565b50565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316636060b0556040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d891908101906126bd565b82515181519192506108e991612b2a565b6001600160401b0381111561090057610900612447565b60405190808252806020026020018201604052801561094b57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161091e5790505b5060408301528151516001600160401b0381111561096b5761096b612447565b6040519080825280602002602001820160405280156109b057816020015b60408051808201909152600080825260208201528152602001906001900390816109895790505b50608083015260005b825151811015610a99576040518060600160405280846000015183815181106109e4576109e4612afe565b60200260200101516001600160a01b03168152602001600115158152602001600081525083604001518281518110610a1e57610a1e612afe565b6020026020010181905250604051806040016040528084600001518381518110610a4a57610a4a612afe565b60200260200101516001600160a01b03168152602001600081525083608001518281518110610a7b57610a7b612afe565b60200260200101819052508080610a9190612b3d565b9150506109b9565b5060005b8151811015610b2b576040518060600160405280838381518110610ac357610ac3612afe565b60200260200101516001600160a01b031681526020016000151581526020016000815250836040015182856000015151610afd9190612b2a565b81518110610b0d57610b0d612afe565b60200260200101819052508080610b2390612b3d565b915050610a9d565b505050565b6000610b3a6123ff565b60008082525b8351811015610c1057838181518110610b5b57610b5b612afe565b60209081029190910101516001600160a01b03908116604084810182905260015490516301b9ad5160e51b8152600481019290925290911690633735aa2090602401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612b56565b15610bfe576000610bef8684611286565b90508015610bfc57600193505b505b80610c0881612b3d565b915050610b40565b50505b92915050565b6000610c236123ff565b60005b8351811015610c1057838181518110610c4157610c41612afe565b60209081029190910101516001600160a01b03908116604084810182905260015490516301b9ad5160e51b8152600481019290925290911690633735aa2090602401602060405180830381865afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190612b56565b15610ce4576000610cd586846116f4565b90508015610ce257600193505b505b80610cee81612b3d565b915050610c26565b8115610de3576000600460009054906101000a90046001600160a01b03166001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d759190612b71565b6002805460405163b403b99760e01b81529293506001600160a01b03169163b403b99791610daf9188918691600091908a90600401612bb8565b600060405180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b50505050505b60005b815181101561068f57818181518110610e0157610e01612afe565b60200260200101516020015160000315610ec15760025482516001600160a01b039091169063b403b997908690859085908110610e4057610e40612afe565b60200260200101516000015160016000878781518110610e6257610e62612afe565b6020026020010151602001516040518663ffffffff1660e01b8152600401610e8e959493929190612bb8565b600060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050505b80610ecb81612b3d565b915050610de6565b8051516000906001600160401b03811115610ef057610ef0612447565b604051908082528060200260200182016040528015610f3557816020015b6040805180820190915260008082526020820152815260200190600190039081610f0e5790505b50905060005b825151811015610fd157604051806040016040528084600001518381518110610f6657610f66612afe565b60200260200101516001600160a01b0316815260200184604001518381518110610f9257610f92612afe565b602002602001015160400151815250828281518110610fb357610fb3612afe565b60200260200101819052508080610fc990612b3d565b915050610f3b565b5060008260200151516001600160401b03811115610ff157610ff1612447565b60405190808252806020026020018201604052801561103657816020015b604080518082019091526000808252602082015281526020019060019003908161100f5790505b50905060005b8360200151518110156111735760008460200151828151811061106157611061612afe565b6020026020010151905060008560400151838760000151516110839190612b2a565b8151811061109357611093612afe565b6020026020010151604001519050604051806040016040528083602001516001600160a01b031681526020018284606001516110cf9190612b2a565b8152508484815181106110e4576110e4612afe565b602002602001018190525060005b86515181101561115d578260800151818151811061111257611112612afe565b60200260200101516020015186828151811061113057611130612afe565b60200260200101516020018181516111489190612b2a565b9052508061115581612b3d565b9150506110f2565b505050808061116b90612b3d565b91505061103c565b507f3513495d7fd5aeb5c4a43ca2d5bc1193321fb114b6b970ea7becb0a6ddcce8408183856060015186608001516040516111b19493929190612bf5565b60405180910390a1505050565b6000546001600160a01b031633146108165760405163118cdaa760e01b8152336004820152602401610846565b6001600160a01b0381166112125760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036106f457604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040828101519051632e46be5f60e21b81526001600160a01b039182166004820152600092919091169063b91af97c90602401600060405180830381865afa1580156112d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113019190810190612c34565b60a08601526080850181905260c085018290526060850192909252611325916117c8565b602083015281516116515760018060009054906101000a90046001600160a01b03166001600160a01b03166349eefeee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a89190612d52565b116113b557506000610c13565b670f43fc2c04ee00008260200151101580156113de57506113de836020015183606001516117fe565b156113eb57506000610c13565b60006113ff8460a001518560c001516117c8565b905061142d84602001518560000151856040015186602001518760c001518860a00151878a60600151611902565b60005b8360600151518110156116355760008460600151828151811061145557611455612afe565b602090810291909101015160035481516080830151604051637d3b6e7960e11b81526001600160a01b0392831660048201526024810191909152929350169063fa76dcf290604401602060405180830381865afa1580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190612d52565b8660a0018181516114ef9190612d6b565b90525060208101511561159157600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115789190612d52565b8660a0018181516115899190612d6b565b905250611622565b600354815160e0830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d9190612d52565b8660c00181815161161e9190612d6b565b9052505b508061162d81612b3d565b915050611430565b506116488460a001518560c00151611bd6565b15835250611694565b8151801561166a5750670f43fc2c04ee00008260200151105b1561168c576116878383604001518460a001518560600151611bf5565b611694565b506000610c13565b8160600151516000036116a957506000610c13565b6116bb82606001518460800151611cd4565b6116cd82606001518460400151611dc2565b680ad78ebc5ac6200000836060018181516116e89190612b2a565b90525060019392505050565b6001546040828101519051632e46be5f60e21b81526001600160a01b039182166004820152600092919091169063b91af97c90602401600060405180830381865afa158015611747573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261176f9190810190612c34565b60a08601526080850181905260c085018290526060850192909252611793916117c8565b60208301819052670f43fc2c04ee0000116117b057506000610c13565b6116a98383604001518460a001518560600151611bf5565b600081156117f457816117e3670de0b6b3a764000085612d7e565b6117ed9190612d95565b9050610c13565b5060001992915050565b6000805b82518110156118f857600083828151811061181f5761181f612afe565b6020026020010151905080602001511561183957506118e6565b6000805b86518110156118d15782600001516001600160a01b031687828151811061186657611866612afe565b6020026020010151602001516001600160a01b0316036118bf578260a0015187828151811061189757611897612afe565b60200260200101516040015110156118b6576000945050505050610c13565b600191506118d1565b806118c981612b3d565b91505061183d565b50806118e35760009350505050610c13565b50505b806118f081612b3d565b915050611802565b5060019392505050565b670de0b6b3a76400008511611a335761191a81611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e9061194c908a908a90600401612db7565b600060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b5050505060005b81518110156119c757600082828151811061199e5761199e612afe565b602090810291909101015160a081015160c09091015250806119bf81612b3d565b915050611981565b50600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a906004908101612de1565b600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b50505050611bcc565b670de0b6b3a764000085118015611a515750670f43fc2c04ee000085105b15611b0257611a5f81611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e90611a91908a908a90600401612db7565b600060405180830381600087803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b50505050611ace83828a611f99565b600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a906004908101612de1565b670f43fc2c04ee00008510158015611b1957508185105b15611bcc57611b2781611ed3565b600154604051630609d6b760e11b81526001600160a01b0390911690630c13ad6e90611b59908a908a90600401612db7565b600060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b50505050611b978484838b611ff7565b600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e1906119fc908a908a90600390600401612de1565b5050505050505050565b600080611be384846117c8565b6714d1120d7b16000011949350505050565b611bfe81611ed3565b6001548451604051630609d6b760e11b81526001600160a01b0390921691630c13ad6e91611c30918790600401612db7565b600060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b50505050611c7182828660200151611f99565b6001548451604051638918b9e160e01b81526001600160a01b0390921691638918b9e191611ca6918790600390600401612de1565b600060405180830381600087803b158015611cc057600080fd5b505af1158015611bcc573d6000803e3d6000fd5b60005b8251811015610b2b576000838281518110611cf457611cf4612afe565b60200260200101519050806080015160001480611d1357508060200151155b15611d1e5750611db0565b60005b8351811015611dad5781600001516001600160a01b0316848281518110611d4a57611d4a612afe565b6020026020010151600001516001600160a01b031603611d9b578160800151848281518110611d7b57611d7b612afe565b6020026020010151602001818151611d939190612b2a565b905250611dad565b80611da581612b3d565b915050611d21565b50505b80611dba81612b3d565b915050611cd7565b60005b8251811015610b2b576000838281518110611de257611de2612afe565b602002602001015190508060c00151600003611dfe5750611ec1565b60005b8351811015611ebe5781600001516001600160a01b0316848281518110611e2a57611e2a612afe565b6020026020010151600001516001600160a01b0316141580611e71575081602001511515848281518110611e6057611e60612afe565b602002602001015160200151151514155b611eac578160c00151848281518110611e8c57611e8c612afe565b6020026020010151604001818151611ea49190612b2a565b905250611ebe565b80611eb681612b3d565b915050611e01565b50505b80611ecb81612b3d565b915050611dc5565b60005b81518110156106f4576000828281518110611ef357611ef3612afe565b602002602001015190508060600151600003611f0f5750611f87565b600254815160208301516060840151604051632f5ed88d60e11b81526001600160a01b0390941693635ebdb11a93611f539390929091600191600091600401612e23565b600060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b50505050505b80611f9181612b3d565b915050611ed6565b60005b8251811015611feb576000838281518110611fb957611fb9612afe565b60200260200101519050806020015115611fd85760a081015160c08201525b5080611fe381612b3d565b915050611f9c565b50610b2b8383836120a3565b600061200b670f43fc2c04ee000085612d7e565b905060005b835181101561209057600084828151811061202d5761202d612afe565b602002602001015190508060200151612046575061207e565b6000878260a00151856120599190612d7e565b6120639190612d95565b9050612073818360a001516123e7565b60a090920191909152505b8061208881612b3d565b915050612010565b5061209c8484846120a3565b5050505050565b60005b825181101561068f5760008382815181106120c3576120c3612afe565b602002602001015190508060200151156120dd57506123d5565b6121216040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b60005b845181101561219a5782600001516001600160a01b031685828151811061214d5761214d612afe565b6020026020010151602001516001600160a01b0316036121885784818151811061217957612179612afe565b6020026020010151915061219a565b8061219281612b3d565b915050612124565b506040810151156123b6576121b78260a0015182604001516123e7565b60e083018190526060820180516121cf908390612b2a565b90525060e08201516040820180516121e8908390612d6b565b905250600354825160e0840151604051637d3b6e7960e11b81526001600160a01b03928316600482015260248101919091526000928992670de0b6b3a76400009291169063fa76dcf290604401602060405180830381865afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190612d52565b6122809190612d7e565b61228a9190612d95565b905060005b86518110156123b35760008782815181106122ac576122ac612afe565b6020026020010151905080602001516122c557506123a1565b670de0b6b3a7640000838260a001516122de9190612d7e565b6122e89190612d95565b60e0820181905260c082018051612300908390612d6b565b90525060005b84608001515181101561239e5781600001516001600160a01b03168560800151828151811061233757612337612afe565b6020026020010151600001516001600160a01b03160361238c578160e001518560800151828151811061236c5761236c612afe565b60200260200101516020018181516123849190612b2a565b90525061239e565b8061239681612b3d565b915050612306565b50505b806123ab81612b3d565b91505061228f565b50505b8160e001518260a001516123ca9190612d6b565b60c090920191909152505b806123df81612b3d565b9150506120a6565b60008183106123f657816123f8565b825b9392505050565b6040518060e001604052806000151581526020016000815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561247f5761247f612447565b60405290565b604080519081016001600160401b038111828210171561247f5761247f612447565b60405161010081016001600160401b038111828210171561247f5761247f612447565b604051601f8201601f191681016001600160401b03811182821017156124f2576124f2612447565b604052919050565b60006001600160401b0382111561251357612513612447565b5060051b60200190565b6001600160a01b038116811461085857600080fd5b6000602080838503121561254557600080fd5b82356001600160401b0381111561255b57600080fd5b8301601f8101851361256c57600080fd5b803561257f61257a826124fa565b6124ca565b81815260059190911b8201830190838101908783111561259e57600080fd5b928401925b828410156125c55783356125b68161251d565b825292840192908401906125a3565b979650505050505050565b6000602082840312156125e257600080fd5b81356123f88161251d565b60008060008060008060c0878903121561260657600080fd5b86356126118161251d565b955060208701356126218161251d565b945060408701356126318161251d565b935060608701356126418161251d565b925060808701356126518161251d565b915060a08701356126618161251d565b809150509295509295509295565b600060208083528351808285015260005b8181101561269c57858101830151858201604001528201612680565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208083850312156126d057600080fd5b82516001600160401b038111156126e657600080fd5b8301601f810185136126f757600080fd5b805161270561257a826124fa565b81815260059190911b8201830190838101908783111561272457600080fd5b928401925b828410156125c557835161273c8161251d565b82529284019290840190612729565b8051801515811461275b57600080fd5b919050565b6000806000806080858703121561277657600080fd5b61277f8561274b565b60208601516040870151606090970151919890975090945092505050565b600081518084526020808501945080840160005b838110156127d65781516001600160a01b0316875295820195908201906001016127b1565b509495945050505050565b6020815260006123f8602083018461279d565b60006020828403121561280657600080fd5b81516001600160401b038082111561281d57600080fd5b818401915084601f83011261283157600080fd5b815161283f61257a826124fa565b8082825260208201915060208360051b86010192508783111561286157600080fd5b602085015b838110156129925780518581111561287d57600080fd5b860160a0818b03601f1901121561289357600080fd5b61289b61245d565b60208201516128a98161251d565b815260408201516128b98161251d565b6020820152606082810151604083015260808301519082015260a0820151878111156128e457600080fd5b8083019250508a603f8301126128f957600080fd5b602082015161290a61257a826124fa565b81815260069190911b83016040019060208101908d83111561292b57600080fd5b6040850194505b8285101561297c576040858f03121561294a57600080fd5b612952612485565b855161295d8161251d565b8152602086810151818301529083526040909501949190910190612932565b6080840152505084525060209283019201612866565b50979650505050505050565b600081518084526020808501945080840160005b838110156127d657815180516001600160a01b0316885283015183880152604090960195908201906001016129b2565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612a7557888303603f19018552815180516001600160a01b03908116855288820151168885015286810151878501526060808201519085015260809081015160a091850182905290612a618186018361299e565b968901969450505090860190600101612a09565b509098975050505050505050565b60006040808352612a968184018661279d565b83810360208581019190915285518083528682019282019060005b81811015612a7557845180516001600160a01b03168452848101511515858501528601518684015293830193606090920191600101612ab1565b6020815260006123f8602083018461299e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610c1357610c13612b14565b600060018201612b4f57612b4f612b14565b5060010190565b600060208284031215612b6857600080fd5b6123f88261274b565b600060208284031215612b8357600080fd5b81516123f88161251d565b634e487b7160e01b600052602160045260246000fd5b60038110612bb457612bb4612b8e565b9052565b6001600160a01b03868116825285166020820152831515604082015260a08101612be56060830185612ba4565b8260808301529695505050505050565b608081526000612c08608083018761299e565b8281036020840152612c1a818761299e565b905084604084015282810360608401526125c5818561299e565b6000806000806080808688031215612c4b57600080fd5b85516001600160401b03811115612c6157600080fd5b8601601f81018813612c7257600080fd5b80516020612c8261257a836124fa565b82815260089290921b8301810191818101908b841115612ca157600080fd5b938201935b83851015612d3057610100858d031215612cc05760008081fd5b612cc86124a7565b8551612cd38161251d565b8152612ce086850161274b565b818501526040868101519082015260608087015190820152868601518782015260a0808701519082015260c0808701519082015260e0808701519082015282526101009094019390820190612ca6565b918a015160408b01516060909b0151929c909b50919850909650505050505050565b600060208284031215612d6457600080fd5b5051919050565b81810381811115610c1357610c13612b14565b8082028115828204841417610c1357610c13612b14565b600082612db257634e487b7160e01b600052601260045260246000fd5b500490565b604081526000612dca604083018561279d565b905060018060a01b03831660208301529392505050565b606081526000612df4606083018661279d565b6001600160a01b0385166020840152905060058310612e1557612e15612b8e565b826040830152949350505050565b6001600160a01b0386168152841515602082015260a08101612e486040830186612ba4565b612be56060830185612ba456fea2646970667358221220100249ca07f0cd561b00a7c84acf70bd89007e69e24e24ea3c81e8681a0aaf2c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8774,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)8742"
      },
      {
        "astId": 8777,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "storagePool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStoragePool)7863"
      },
      {
        "astId": 8780,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPriceFeed)7272"
      },
      {
        "astId": 8783,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDebtTokenManager)7138"
      },
      {
        "astId": 8786,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "collTokenManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICollTokenManager)6894"
      },
      {
        "astId": 8789,
        "contract": "contracts/LiquidationOperations.sol:LiquidationOperations",
        "label": "stabilityPoolManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IStabilityPoolManager)7735"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICollTokenManager)6894": {
        "encoding": "inplace",
        "label": "contract ICollTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)7138": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)7272": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPoolManager)7735": {
        "encoding": "inplace",
        "label": "contract IStabilityPoolManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)7863": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)8742": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}