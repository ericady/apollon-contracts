{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "ExceedDebtBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GreaterThanTCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxFeePercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LessThanMCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRedeems",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooHighRedeemFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_drawnCollAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "RedeemedFromTrove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storgePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collTokenManager",
          "type": "address"
        }
      ],
      "name": "RedemptionOperationsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedStableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualStableAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "drawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendToRedeemer",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRedemptionOperations.RedemptionCollAmount[]",
          "name": "_collPayouts",
          "type": "tuple[]"
        }
      ],
      "name": "SuccessfulRedemption",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collTokenManager",
      "outputs": [
        {
          "internalType": "contract ICollTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stableCoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_sourceTroves",
          "type": "address[]"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x83569de123d3424a1f0d3b0bbb55272e6e5d5c3f89860b4a6946203ec08c8f9e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1951924",
    "logsBloom": "0x
    "blockHash": "0xd54c21c9486729c7d74c4d2a89baa45df18a346bb8bcb70493190f8ed18d0dde",
    "transactionHash": "0x83569de123d3424a1f0d3b0bbb55272e6e5d5c3f89860b4a6946203ec08c8f9e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x83569de123d3424a1f0d3b0bbb55272e6e5d5c3f89860b4a6946203ec08c8f9e",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd54c21c9486729c7d74c4d2a89baa45df18a346bb8bcb70493190f8ed18d0dde"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1951924",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a6d55ae1f6eb61d657352227caab6412",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExceedDebtBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GreaterThanTCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxFeePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThanMCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRedeems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooHighRedeemFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_drawnCollAmounts\",\"type\":\"tuple[]\"}],\"name\":\"RedeemedFromTrove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storgePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collTokenManager\",\"type\":\"address\"}],\"name\":\"RedemptionOperationsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedStableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualStableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"drawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendToRedeemer\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRedemptionOperations.RedemptionCollAmount[]\",\"name\":\"_collPayouts\",\"type\":\"tuple[]\"}],\"name\":\"SuccessfulRedemption\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collTokenManager\",\"outputs\":[{\"internalType\":\"contract ICollTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableCoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_sourceTroves\",\"type\":\"address[]\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedemptionOperations.sol\":\"RedemptionOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 3e3; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0xd635d362aeae2f89023daba55875e04566f4e35fdac4bd3895ea4969cffc1308\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n   *\\n   * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n   * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n   *\\n   * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n   * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n   *\\n   */\\n  uint internal constant NICR_PRECISION = 1e20;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) {\\n      return (_coll * NICR_PRECISION) / _debt;\\n    }\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    else {\\n      // if (_debt == 0)\\n      return 2 ** 256 - 1;\\n    }\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5234c90c541302a3eda2b75f02ae3945837771ccc5bb19e2af1839602ba35f9b\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x85f943dcc809f64cc30144f14495c5cdb556371a835f0d6022c7409a7d867fef\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICollTokenManager {\\n  // --- Events ---\\n  event CollTokenManagerInitialized(address _priceFeedAddress);\\n  event CollTokenAdded(address _collTokenAddress);\\n\\n  // --- Custom Errors ---\\n  error TokenAlreadyAdded();\\n\\n  // --- Functions ---\\n\\n  function getCollTokenAddresses() external view returns (address[] memory);\\n\\n  function addCollToken(address _tokenAddress) external;\\n}\\n\",\"keccak256\":\"0x841232977bec6eff931b093b931a48a17dec71e92b89c9d603975787f9d5ca42\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSP();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4da05b4ce909788d8e8f3129c3bb4a4da599ac75935faefb66c3b78cdecd23aa\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x9b263476d765d2c26c970271959c453c2e4607bcf2c58cea71c621d8dc714bb5\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IRedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface IRedemptionOperations is IBBase {\\n  // --- structs ---\\n\\n  struct RedemptionCollAmount {\\n    address collToken;\\n    uint drawn;\\n    uint redemptionFee;\\n    uint sendToRedeemer;\\n  }\\n\\n  // --- Events ---\\n\\n  event RedemptionOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager\\n  );\\n  event SuccessfulRedemption(\\n    uint _attemptedStableAmount,\\n    uint _actualStableAmount,\\n    RedemptionCollAmount[] _collPayouts\\n  );\\n  event RedeemedFromTrove(address _borrower, uint stableAmount, TokenAmount[] _drawnCollAmounts);\\n\\n  // --- Errors ---\\n\\n  error ZeroAmount();\\n  error InvalidMaxFeePercent();\\n  error LessThanMCR();\\n  error ExceedDebtBalance();\\n  error NoRedeems();\\n  error GreaterThanTCR();\\n  error TooHighRedeemFee();\\n\\n  // --- Functions ---\\n\\n  function redeemCollateral(uint _stableCoinAmount, uint _maxFee, address[] memory _sourceTroves) external;\\n\\n  function getRedemptionRate() external view returns (uint);\\n\\n  function getRedemptionRateWithDecay() external view returns (uint);\\n\\n  function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1f64a9c3adcd6a9f87f1a7c64cdd548e0ddf88005feb8d07db04a2841a9617b5\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\n// Common interface for the Pools.\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0x5fab91bf7a2ce4ff43aea3b6ccc34b56d96dac82f287867384cd92e5db0f8cc8\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event BaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error ExceedDebtBalance();\\n  error OnlyOneTrove();\\n  error ZeroAmount();\\n  error LessThanMCR();\\n  error InvalidMaxFeePercent();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getNominalICR(address _borrower) external returns (uint);\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate() external view returns (uint);\\n\\n  function getBorrowingRateWithDecay() external view returns (uint);\\n\\n  function getBorrowingFee(uint LUSDDebt) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\\n\\n  function decayBaseRateFromBorrowing() external;\\n\\n  function updateBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc91fe5746ad02a514565adf54bb16d28d1c60110001b1c9f9bac9966757f0ea5\",\"license\":\"MIT\"},\"contracts/RedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IStabilityPool.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ICollTokenManager.sol';\\nimport './Interfaces/IRedemptionOperations.sol';\\nimport './Interfaces/ITroveManager.sol';\\n\\ncontract RedemptionOperations is LiquityBase, Ownable(msg.sender), CheckContract, IRedemptionOperations {\\n  string public constant NAME = 'RedemptionOperations';\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IDebtTokenManager public debtTokenManager;\\n  ICollTokenManager public collTokenManager;\\n  IStoragePool public storagePool;\\n  IPriceFeed public priceFeed;\\n\\n  // --- Data structures ---\\n\\n  struct RedemptionVariables {\\n    address[] collTokenAddresses;\\n    //\\n    uint totalStableSupplyAtStart;\\n    uint totalRedeemedStable;\\n    //\\n    uint totalETHDrawn;\\n    uint ETHFee;\\n    uint ETHToSendToRedeemer;\\n    uint decayedBaseRate;\\n  }\\n\\n  struct SingleRedemptionVariables {\\n    uint stableCoinLot;\\n    TokenAmount[] collLots;\\n    //\\n    TokenAmount stableCoinEntry;\\n    uint troveCollInUSD;\\n    uint troveDebtInUSD;\\n  }\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress\\n  ) external onlyOwner {\\n    checkContract(_troveManagerAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManagerAddress);\\n    checkContract(_collTokenManagerAddress);\\n\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    debtTokenManager = IDebtTokenManager(_debtTokenManagerAddress);\\n    collTokenManager = ICollTokenManager(_collTokenManagerAddress);\\n\\n    emit RedemptionOperationsInitialized(\\n      _troveManagerAddress,\\n      _storagePoolAddress,\\n      _priceFeedAddress,\\n      _debtTokenManagerAddress,\\n      _collTokenManagerAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  /* Send stable coin to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n   * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n   *\\n   * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n   * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n   *\\n   * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n   * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n   * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n   * costs can vary.\\n   *\\n   * All Troves that are redeemed from, will end up with no stable coin debt left.\\n   *\\n   * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n   * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n   * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining stable amount, which they can attempt\\n   * to redeem later.\\n   */\\n  function redeemCollateral(\\n    uint _stableCoinAmount,\\n    uint _maxFeePercentage,\\n    address[] memory _sourceTroves\\n  ) external override {\\n    RedemptionVariables memory vars;\\n    vars.collTokenAddresses = collTokenManager.getCollTokenAddresses();\\n    IDebtToken stableCoin = debtTokenManager.getStableCoin();\\n\\n    if (_stableCoinAmount == 0) revert ZeroAmount();\\n    if (_maxFeePercentage < REDEMPTION_FEE_FLOOR || _maxFeePercentage > DECIMAL_PRECISION)\\n      revert InvalidMaxFeePercent();\\n    if (_stableCoinAmount > stableCoin.balanceOf(msg.sender)) revert ExceedDebtBalance();\\n    (, uint TCR, , ) = storagePool.checkRecoveryMode();\\n    if (TCR < MCR) revert LessThanMCR();\\n\\n    vars.totalStableSupplyAtStart =\\n      storagePool.getValue(address(stableCoin), false, PoolType.Active) +\\n      storagePool.getValue(address(stableCoin), false, PoolType.Default);\\n\\n    // Confirm redeemer's balance is less than total stable coin supply\\n    assert(stableCoin.balanceOf(msg.sender) <= vars.totalStableSupplyAtStart);\\n\\n    // seed drawn coll\\n    RedemptionCollAmount[] memory totalCollDrawn = new RedemptionCollAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < totalCollDrawn.length; i++) totalCollDrawn[i].collToken = vars.collTokenAddresses[i];\\n\\n    // Loop through the stable coin source troves\\n    assert(_sourceTroves.length >= 1);\\n    for (uint i = 0; i < _sourceTroves.length; i++) {\\n      address currentBorrower = _sourceTroves[i];\\n      if (currentBorrower == address(0) || _stableCoinAmount - vars.totalRedeemedStable == 0) continue;\\n\\n      SingleRedemptionVariables memory singleRedemption = _redeemCollateralFromTrove(\\n        vars,\\n        currentBorrower,\\n        _stableCoinAmount - vars.totalRedeemedStable\\n      );\\n\\n      // sum up redeemed stable and drawn collateral\\n      vars.totalRedeemedStable += singleRedemption.stableCoinLot;\\n      for (uint a = 0; a < singleRedemption.collLots.length; a++) {\\n        for (uint b = 0; b < totalCollDrawn.length; b++) {\\n          if (singleRedemption.collLots[a].tokenAddress != vars.collTokenAddresses[b]) continue;\\n\\n          totalCollDrawn[b].drawn += singleRedemption.collLots[a].amount;\\n          break;\\n        }\\n      }\\n    }\\n\\n    if (vars.totalRedeemedStable == 0) revert NoRedeems();\\n\\n    // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n    // Use the saved total stable supply value, from before it was reduced by the redemption.\\n    troveManager.updateBaseRateFromRedemption(vars.totalRedeemedStable, vars.totalStableSupplyAtStart);\\n\\n    // Calculate the redemption fee\\n    for (uint i = 0; i < totalCollDrawn.length; i++) {\\n      RedemptionCollAmount memory collEntry = totalCollDrawn[i];\\n\\n      collEntry.redemptionFee = _getRedemptionFee(collEntry.drawn);\\n      collEntry.sendToRedeemer = collEntry.drawn - collEntry.redemptionFee;\\n\\n      _requireUserAcceptsFee(collEntry.redemptionFee, collEntry.drawn, _maxFeePercentage);\\n    }\\n\\n    // Burn the total stable coin that is cancelled with debt, and send the redeemed coll to msg.sender\\n    storagePool.subtractValue(address(stableCoin), false, PoolType.Active, vars.totalRedeemedStable);\\n    stableCoin.burn(msg.sender, vars.totalRedeemedStable);\\n\\n    // transfer the drawn collateral to the redeemer\\n    for (uint i = 0; i < totalCollDrawn.length; i++) {\\n      RedemptionCollAmount memory collEntry = totalCollDrawn[i];\\n      if (collEntry.sendToRedeemer == 0) continue;\\n\\n      storagePool.withdrawalValue(\\n        msg.sender,\\n        vars.collTokenAddresses[i],\\n        true,\\n        PoolType.Active,\\n        collEntry.sendToRedeemer\\n      );\\n\\n      // todo jelly handover\\n      //    // Send the fee to the gov token staking contract\\n      //    contractsCache.activePool.sendETH(address(contractsCache.lqtyStaking), vars.ETHFee);\\n    }\\n\\n    emit SuccessfulRedemption(_stableCoinAmount, vars.totalRedeemedStable, totalCollDrawn);\\n  }\\n\\n  // Redeem as much collateral as possible from _borrower's Trove in exchange for stable coin up to _redeemMaxAmount\\n  function _redeemCollateralFromTrove(\\n    RedemptionVariables memory outerVars,\\n    address _borrower,\\n    uint _redeemMaxAmount\\n  ) internal returns (SingleRedemptionVariables memory vars) {\\n    troveManager.applyPendingRewards(_borrower);\\n\\n    (vars.collLots, vars.stableCoinEntry, vars.troveCollInUSD, vars.troveDebtInUSD) = _prepareTroveRedemption(\\n      _borrower\\n    );\\n\\n    // todo stable coin only CRs are needed here, all the other debt tokens need to be excluded.\\n    // also just < TCR is not enough, if the user whats to redeem more then 50% of the stable coin supply...\\n    uint preCR = LiquityMath._computeCR(vars.troveCollInUSD, vars.troveDebtInUSD);\\n    (, uint TCR, , ) = storagePool.checkRecoveryMode();\\n    // TroveManager: Source troves CR is not under the TCR.\\n    if (preCR >= TCR) revert GreaterThanTCR();\\n\\n    // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n    vars.stableCoinLot = LiquityMath._min(_redeemMaxAmount, vars.stableCoinEntry.amount - STABLE_COIN_GAS_COMPENSATION);\\n\\n    // calculate the coll lot\\n    uint newCollInUSD = vars.troveCollInUSD;\\n    for (uint i = 0; i < vars.collLots.length; i++) {\\n      TokenAmount memory collEntry = vars.collLots[i];\\n\\n      uint collEntryInUSD = priceFeed.getUSDValue(collEntry.tokenAddress, collEntry.amount);\\n      uint collToRedeemInUSD = (vars.stableCoinLot * collEntryInUSD) / vars.troveCollInUSD;\\n\\n      collEntry.amount = priceFeed.getAmountFromUSDValue(collEntry.tokenAddress, collToRedeemInUSD);\\n      newCollInUSD -= collToRedeemInUSD;\\n    }\\n\\n    /*\\n     * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n     * certainly result in running out of gas.\\n     *\\n     * If the resultant net debt of the partial is less than the minimum, net debt we bail.\\n     */\\n\\n    // updating the troves stable debt and coll\\n    DebtTokenAmount[] memory debtDecrease = new DebtTokenAmount[](1);\\n    debtDecrease[0] = DebtTokenAmount(debtTokenManager.getStableCoin(), vars.stableCoinLot, 0);\\n    troveManager.decreaseTroveDebt(_borrower, debtDecrease);\\n    troveManager.increaseTroveColl(_borrower, vars.collLots);\\n    troveManager.updateStakeAndTotalStakes(outerVars.collTokenAddresses, _borrower);\\n\\n    emit RedeemedFromTrove(_borrower, vars.stableCoinLot, vars.collLots);\\n    return vars;\\n  }\\n\\n  function _prepareTroveRedemption(\\n    address _borrower\\n  )\\n    internal\\n    view\\n    returns (TokenAmount[] memory amounts, TokenAmount memory stableCoinEntry, uint troveCollInUSD, uint troveDebtInUSD)\\n  {\\n    address stableCoinAddress = address(debtTokenManager.getStableCoin());\\n\\n    // stable coin debt should always exists because of the gas comp\\n    TokenAmount[] memory troveDebt = troveManager.getTroveDebt(_borrower);\\n    for (uint i = 0; i < troveDebt.length; i++) {\\n      TokenAmount memory debtEntry = troveDebt[i];\\n\\n      if (debtEntry.tokenAddress == stableCoinAddress) stableCoinEntry = debtEntry;\\n      troveDebtInUSD += priceFeed.getUSDValue(debtEntry.tokenAddress, debtEntry.amount);\\n    }\\n\\n    amounts = troveManager.getTroveColl(_borrower);\\n    for (uint i = 0; i < amounts.length; i++)\\n      troveCollInUSD += priceFeed.getUSDValue(amounts[i].tokenAddress, amounts[i].amount);\\n\\n    return (amounts, stableCoinEntry, troveCollInUSD, troveDebtInUSD);\\n  }\\n\\n  function getRedemptionRate() public view override returns (uint) {\\n    return _calcRedemptionRate(troveManager.getBaseRate());\\n  }\\n\\n  function getRedemptionRateWithDecay() public view override returns (uint) {\\n    return _calcRedemptionRate(troveManager.calcDecayedBaseRate());\\n  }\\n\\n  function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n    return\\n      LiquityMath._min(\\n        REDEMPTION_FEE_FLOOR + _baseRate,\\n        DECIMAL_PRECISION // cap at a maximum of 100%\\n      );\\n  }\\n\\n  function _getRedemptionFee(uint _collDrawn) internal view returns (uint) {\\n    return _calcRedemptionFee(getRedemptionRate(), _collDrawn);\\n  }\\n\\n  function getRedemptionFeeWithDecay(uint _collDrawn) external view override returns (uint) {\\n    return _calcRedemptionFee(getRedemptionRateWithDecay(), _collDrawn);\\n  }\\n\\n  function _calcRedemptionFee(uint _redemptionRate, uint _collDrawn) internal pure returns (uint) {\\n    if (_collDrawn == 0) return 0;\\n\\n    uint redemptionFee = (_redemptionRate * _collDrawn) / DECIMAL_PRECISION;\\n\\n    // TroveManager: Fee would eat up all returned collateral\\n    if (redemptionFee >= _collDrawn) revert TooHighRedeemFee();\\n    return redemptionFee;\\n  }\\n}\\n\",\"keccak256\":\"0xed6dba2edf95e6e12c72b12db8323246050e397652ec1775d671a23927b79eb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121e2806100a56000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063741bef1a116100c3578063c52861f21161007c578063c52861f2146102dc578063d5b35635146102e4578063ddbeb714146102f7578063e67729e31461030a578063f2fde38b14610314578063f92d34331461017e57600080fd5b8063741bef1a14610246578063794e5724146102595780638d63c665146102685780638da5cb5b14610278578063943ebeae14610289578063a3f4df7e1461029c57600080fd5b8063502afb0411610115578063502afb04146101dc578063522a86fe146101fa5780635733d58f1461020d5780635dd68acd1461021c578063715018a61461022f57806372fe25aa1461023757600080fd5b8063240926691461015d57806328d28b5b1461017e5780632b11551a1461018c5780633d83908a1461019457806342536d9c146101bf5780634870dd9a146101d4575b600080fd5b61016b66b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b61016b6611c37937e0800081565b61016b610327565b6001546101a7906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b6101d26101cd366004611ad6565b6103ad565b005b61016b60c881565b6101e5610bb881565b60405163ffffffff9091168152602001610175565b6002546101a7906001600160a01b031681565b61016b6714d1120d7b16000081565b6101d261022a366004611b8a565b610d78565b6101d2610e66565b61016b670de0b6b3a764000081565b6005546101a7906001600160a01b031681565b61016b670f43fc2c04ee000081565b61016b680ad78ebc5ac620000081565b6000546001600160a01b03166101a7565b6003546101a7906001600160a01b031681565b6102cf60405180604001604052806014815260200173526564656d7074696f6e4f7065726174696f6e7360601b81525081565b6040516101759190611bfb565b61016b610e7a565b61016b6102f2366004611c49565b610ed2565b6004546101a7906001600160a01b031681565b6101e5620f424081565b6101d2610322366004611c62565b610eeb565b60006103a8600160009054906101000a90046001600160a01b03166001600160a01b031663b655d0c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190611c7f565b610f2e565b905090565b6103ed6040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600360009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104689190810190611c98565b815260025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190611d32565b9050846000036104fb57604051631f2a200560e01b815260040160405180910390fd5b6611c37937e080008410806105175750670de0b6b3a764000084115b1561053557604051631113e26760e31b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611c7f565b8511156105bd57604051630b509b5f60e21b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190611d4f565b5050915050670f43fc2c04ee000081101561066457604051631afae4cd60e21b815260040160405180910390fd5b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161069891869160009160019101611db5565b602060405180830381865afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190611c7f565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161070c918791600091829101611db5565b602060405180830381865afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190611c7f565b6107579190611df8565b602084018190526040516370a0823160e01b81523360048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190611c7f565b11156107d4576107d4611e0b565b82515160009067ffffffffffffffff8111156107f2576107f2611a2d565b60405190808252806020026020018201604052801561085757816020015b610844604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b8152602001906001900390816108105790505b50905060005b81518110156108be57845180518290811061087a5761087a611e21565b602002602001015182828151811061089457610894611e21565b60209081029190910101516001600160a01b039091169052806108b681611e37565b91505061085d565b506001855110156108d1576108d1611e0b565b60005b8551811015610a6a5760008682815181106108f1576108f1611e21565b6020026020010151905060006001600160a01b0316816001600160a01b0316148061092857506040860151610926908a611e50565b155b156109335750610a58565b600061094f878389604001518d61094a9190611e50565b610f52565b90508060000151876040018181516109679190611df8565b90525060005b816020015151811015610a545760005b8551811015610a4157885180518290811061099a5761099a611e21565b60200260200101516001600160a01b0316836020015183815181106109c1576109c1611e21565b6020026020010151600001516001600160a01b031603610a2f57826020015182815181106109f1576109f1611e21565b602002602001015160200151868281518110610a0f57610a0f611e21565b6020026020010151602001818151610a279190611df8565b905250610a41565b80610a3981611e37565b91505061097d565b5080610a4c81611e37565b91505061096d565b5050505b80610a6281611e37565b9150506108d4565b508360400151600003610a90576040516353d77d3b60e11b815260040160405180910390fd5b600154604080860151602087015191516309d3fe0b60e41b81526001600160a01b0390931692639d3fe0b092610ad29291600401918252602082015260400190565b600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b5050505060005b8151811015610b7e576000828281518110610b2457610b24611e21565b60200260200101519050610b3b81602001516114b4565b604082018190526020820151610b519190611e50565b606082015260408101516020820151610b6b91908a6114c1565b5080610b7681611e37565b915050610b07565b506004805460408087015190516304b86aad60e21b81526001600160a01b03909216926312e1aab492610bb992889260009283929101611e63565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040848101519051632770a7eb60e21b815233600482015260248101919091526001600160a01b03841690639dc29fac90604401600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b5050505060005b8151811015610d2f576000828281518110610c7157610c71611e21565b602002602001015190508060600151600003610c8d5750610d1d565b600454865180516001600160a01b039092169163b403b99791339186908110610cb857610cb8611e21565b60200260200101516001600086606001516040518663ffffffff1660e01b8152600401610ce9959493929190611e97565b600060405180830381600087803b158015610d0357600080fd5b505af1158015610d17573d6000803e3d6000fd5b50505050505b80610d2781611e37565b915050610c54565b507f6a8329a18d9dee6a297f77526416165a730ae6c200ed723c7f29985c77d66c7a87856040015183604051610d6793929190611ed4565b60405180910390a150505050505050565b610d80611516565b610d8985611543565b610d9284611543565b610d9b83611543565b610da482611543565b610dad81611543565b600180546001600160a01b038781166001600160a01b031992831681179093556004805488831690841681179091556005805488841690851681179091556002805488851690861681179091556003805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1e5765df374d010480569094677f5313a17b1b8ff5f33b3f39f9baba9bfc1e9f9060a00160405180910390a1610e5f610e66565b5050505050565b610e6e611516565b610e786000611592565b565b60006103a8600160009054906101000a90046001600160a01b03166001600160a01b031663459799786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037f573d6000803e3d6000fd5b6000610ee5610edf610e7a565b836115e2565b92915050565b610ef3611516565b6001600160a01b038116610f2257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610f2b81611592565b50565b6000610ee5610f44836611c37937e08000611df8565b670de0b6b3a764000061163c565b610f5a6119da565b600154604051630b07655760e01b81526001600160a01b03858116600483015290911690630b07655790602401600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b50505050610fc283611652565b608085018190526060850182905260408501929092526020840192909252600091610fec916119a4565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190611d4f565b505091505080821061108c5760405163c9be08d760e01b815260040160405180910390fd5b6110b284680ad78ebc5ac62000008560400151602001516110ad9190611e50565b61163c565b8352606083015160005b84602001515181101561122f576000856020015182815181106110e1576110e1611e21565b602090810291909101810151600554815192820151604051637d3b6e7960e11b81526001600160a01b0394851660048201526024810191909152919350600092169063fa76dcf290604401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190611c7f565b9050600087606001518289600001516111869190611f50565b6111909190611f67565b6005548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190611c7f565b60208401526112178186611e50565b9450505050808061122790611e37565b9150506110bc565b50604080516001808252818301909252600091816020015b611274604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816112475750506040805160608101808352600254631bd817c960e01b90915291519293509182916001600160a01b031690631bd817c9906064808501916020918187030181865afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611d32565b6001600160a01b031681526020018660000151815260200160008152508160008151811061132d5761132d611e21565b6020908102919091010152600154604051637120442f60e11b81526001600160a01b039091169063e240885e9061136a908a908590600401611f89565b600060405180830381600087803b15801561138457600080fd5b505af1158015611398573d6000803e3d6000fd5b5050600154602088015160405163d317458f60e01b81526001600160a01b03909216935063d317458f92506113d2918b9190600401612047565b600060405180830381600087803b1580156113ec57600080fd5b505af1158015611400573d6000803e3d6000fd5b50506001548a516040516309d9efd960e21b81526001600160a01b039092169350632767bf649250611436918b9060040161206b565b600060405180830381600087803b15801561145057600080fd5b505af1158015611464573d6000803e3d6000fd5b5050865160208801516040517f39add25abad9e7cf7e17693b8dfc9aef382d8da0c8aa2e5517bcdb185695566894506114a193508b9291906120c8565b60405180910390a1505050509392505050565b6000610ee5610edf610327565b826000036114ce57505050565b6000826114e3670de0b6b3a764000086611f50565b6114ed9190611f67565b905081811115611510576040516351a2c47360e11b815260040160405180910390fd5b50505050565b6000546001600160a01b03163314610e785760405163118cdaa760e01b8152336004820152602401610f19565b6001600160a01b03811661156a5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361158e57604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816000036115f457506000610ee5565b6000670de0b6b3a76400006116098486611f50565b6116139190611f67565b905082811061163557604051633a82228b60e21b815260040160405180910390fd5b9392505050565b600081831061164b5781611635565b5090919050565b604080518082018252600080825260208083018290526002548451631bd817c960e01b81529451606095849384936001600160a01b031692631bd817c99260048082019392918290030181865afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190611d32565b60015460405163d66a255360e01b81526001600160a01b0389811660048301529293506000929091169063d66a255390602401600060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174d91908101906120f8565b905060005b815181101561183657600082828151811061176f5761176f611e21565b60200260200101519050836001600160a01b031681600001516001600160a01b03160361179a578096505b60055481516020830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa1580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190611c7f565b6118209086611df8565b945050808061182e90611e37565b915050611752565b506001546040516309019aaf60e31b81526001600160a01b0389811660048301529091169063480cd57890602401600060405180830381865afa158015611881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a991908101906120f8565b955060005b865181101561199a5760055487516001600160a01b039091169063fa76dcf2908990849081106118e0576118e0611e21565b6020026020010151600001518984815181106118fe576118fe611e21565b6020026020010151602001516040518363ffffffff1660e01b815260040161193b9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190611c7f565b6119869086611df8565b94508061199281611e37565b9150506118ae565b5050509193509193565b600081156119d057816119bf670de0b6b3a764000085611f50565b6119c99190611f67565b9050610ee5565b5060001992915050565b6040518060a001604052806000815260200160608152602001611a19604051806040016040528060006001600160a01b03168152602001600081525090565b815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611a6657611a66611a2d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a9557611a95611a2d565b604052919050565b600067ffffffffffffffff821115611ab757611ab7611a2d565b5060051b60200190565b6001600160a01b0381168114610f2b57600080fd5b600080600060608486031215611aeb57600080fd5b833592506020808501359250604085013567ffffffffffffffff811115611b1157600080fd5b8501601f81018713611b2257600080fd5b8035611b35611b3082611a9d565b611a6c565b81815260059190911b82018301908381019089831115611b5457600080fd5b928401925b82841015611b7b578335611b6c81611ac1565b82529284019290840190611b59565b80955050505050509250925092565b600080600080600060a08688031215611ba257600080fd5b8535611bad81611ac1565b94506020860135611bbd81611ac1565b93506040860135611bcd81611ac1565b92506060860135611bdd81611ac1565b91506080860135611bed81611ac1565b809150509295509295909350565b600060208083528351808285015260005b81811015611c2857858101830151858201604001528201611c0c565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611c5b57600080fd5b5035919050565b600060208284031215611c7457600080fd5b813561163581611ac1565b600060208284031215611c9157600080fd5b5051919050565b60006020808385031215611cab57600080fd5b825167ffffffffffffffff811115611cc257600080fd5b8301601f81018513611cd357600080fd5b8051611ce1611b3082611a9d565b81815260059190911b82018301908381019087831115611d0057600080fd5b928401925b82841015611d27578351611d1881611ac1565b82529284019290840190611d05565b979650505050505050565b600060208284031215611d4457600080fd5b815161163581611ac1565b60008060008060808587031215611d6557600080fd5b84518015158114611d7557600080fd5b60208601516040870151606090970151919890975090945092505050565b60038110611db157634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0384168152821515602082015260608101611dda6040830184611d93565b949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ee557610ee5611de2565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611e4957611e49611de2565b5060010190565b81810381811115610ee557610ee5611de2565b6001600160a01b0385168152831515602082015260808101611e886040830185611d93565b82606083015295945050505050565b6001600160a01b03868116825285166020820152831515604082015260a08101611ec46060830185611d93565b8260808301529695505050505050565b60006060808301868452602086818601526040838187015282875180855260809450848801915083890160005b82811015611f3f57815180516001600160a01b0316855286810151878601528581015186860152880151888501529286019290850190600101611f01565b50919b9a5050505050505050505050565b8082028115828204841417610ee557610ee5611de2565b600082611f8457634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015611fe85781518051871685528581015186860152880151888501529286019290840190600101611fb9565b50919a9950505050505050505050565b600081518084526020808501945080840160005b8381101561203c57815180516001600160a01b03168852830151838801526040909601959082019060010161200c565b509495945050505050565b6001600160a01b0383168152604060208201819052600090611dda90830184611ff8565b604080825283519082018190526000906020906060840190828701845b828110156120ad5781516001600160a01b031684529284019290840190600101612088565b5050506001600160a01b039490941692019190915250919050565b60018060a01b03841681528260208201526060604082015260006120ef6060830184611ff8565b95945050505050565b6000602080838503121561210b57600080fd5b825167ffffffffffffffff81111561212257600080fd5b8301601f8101851361213357600080fd5b8051612141611b3082611a9d565b81815260069190911b8201830190838101908783111561216057600080fd5b928401925b82841015611d27576040848903121561217e5760008081fd5b612186611a43565b845161219181611ac1565b8152848601518682015282526040909301929084019061216556fea26469706673582212205c3ebdb55bd39523098f83bdf6e75dea33215421f072bd7d8ab5e1af7950955c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063741bef1a116100c3578063c52861f21161007c578063c52861f2146102dc578063d5b35635146102e4578063ddbeb714146102f7578063e67729e31461030a578063f2fde38b14610314578063f92d34331461017e57600080fd5b8063741bef1a14610246578063794e5724146102595780638d63c665146102685780638da5cb5b14610278578063943ebeae14610289578063a3f4df7e1461029c57600080fd5b8063502afb0411610115578063502afb04146101dc578063522a86fe146101fa5780635733d58f1461020d5780635dd68acd1461021c578063715018a61461022f57806372fe25aa1461023757600080fd5b8063240926691461015d57806328d28b5b1461017e5780632b11551a1461018c5780633d83908a1461019457806342536d9c146101bf5780634870dd9a146101d4575b600080fd5b61016b66b1a2bc2ec5000081565b6040519081526020015b60405180910390f35b61016b6611c37937e0800081565b61016b610327565b6001546101a7906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b6101d26101cd366004611ad6565b6103ad565b005b61016b60c881565b6101e5610bb881565b60405163ffffffff9091168152602001610175565b6002546101a7906001600160a01b031681565b61016b6714d1120d7b16000081565b6101d261022a366004611b8a565b610d78565b6101d2610e66565b61016b670de0b6b3a764000081565b6005546101a7906001600160a01b031681565b61016b670f43fc2c04ee000081565b61016b680ad78ebc5ac620000081565b6000546001600160a01b03166101a7565b6003546101a7906001600160a01b031681565b6102cf60405180604001604052806014815260200173526564656d7074696f6e4f7065726174696f6e7360601b81525081565b6040516101759190611bfb565b61016b610e7a565b61016b6102f2366004611c49565b610ed2565b6004546101a7906001600160a01b031681565b6101e5620f424081565b6101d2610322366004611c62565b610eeb565b60006103a8600160009054906101000a90046001600160a01b03166001600160a01b031663b655d0c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190611c7f565b610f2e565b905090565b6103ed6040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600360009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104689190810190611c98565b815260025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190611d32565b9050846000036104fb57604051631f2a200560e01b815260040160405180910390fd5b6611c37937e080008410806105175750670de0b6b3a764000084115b1561053557604051631113e26760e31b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190611c7f565b8511156105bd57604051630b509b5f60e21b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190611d4f565b5050915050670f43fc2c04ee000081101561066457604051631afae4cd60e21b815260040160405180910390fd5b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161069891869160009160019101611db5565b602060405180830381865afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190611c7f565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161070c918791600091829101611db5565b602060405180830381865afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190611c7f565b6107579190611df8565b602084018190526040516370a0823160e01b81523360048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190611c7f565b11156107d4576107d4611e0b565b82515160009067ffffffffffffffff8111156107f2576107f2611a2d565b60405190808252806020026020018201604052801561085757816020015b610844604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b8152602001906001900390816108105790505b50905060005b81518110156108be57845180518290811061087a5761087a611e21565b602002602001015182828151811061089457610894611e21565b60209081029190910101516001600160a01b039091169052806108b681611e37565b91505061085d565b506001855110156108d1576108d1611e0b565b60005b8551811015610a6a5760008682815181106108f1576108f1611e21565b6020026020010151905060006001600160a01b0316816001600160a01b0316148061092857506040860151610926908a611e50565b155b156109335750610a58565b600061094f878389604001518d61094a9190611e50565b610f52565b90508060000151876040018181516109679190611df8565b90525060005b816020015151811015610a545760005b8551811015610a4157885180518290811061099a5761099a611e21565b60200260200101516001600160a01b0316836020015183815181106109c1576109c1611e21565b6020026020010151600001516001600160a01b031603610a2f57826020015182815181106109f1576109f1611e21565b602002602001015160200151868281518110610a0f57610a0f611e21565b6020026020010151602001818151610a279190611df8565b905250610a41565b80610a3981611e37565b91505061097d565b5080610a4c81611e37565b91505061096d565b5050505b80610a6281611e37565b9150506108d4565b508360400151600003610a90576040516353d77d3b60e11b815260040160405180910390fd5b600154604080860151602087015191516309d3fe0b60e41b81526001600160a01b0390931692639d3fe0b092610ad29291600401918252602082015260400190565b600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b5050505060005b8151811015610b7e576000828281518110610b2457610b24611e21565b60200260200101519050610b3b81602001516114b4565b604082018190526020820151610b519190611e50565b606082015260408101516020820151610b6b91908a6114c1565b5080610b7681611e37565b915050610b07565b506004805460408087015190516304b86aad60e21b81526001600160a01b03909216926312e1aab492610bb992889260009283929101611e63565b600060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040848101519051632770a7eb60e21b815233600482015260248101919091526001600160a01b03841690639dc29fac90604401600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b5050505060005b8151811015610d2f576000828281518110610c7157610c71611e21565b602002602001015190508060600151600003610c8d5750610d1d565b600454865180516001600160a01b039092169163b403b99791339186908110610cb857610cb8611e21565b60200260200101516001600086606001516040518663ffffffff1660e01b8152600401610ce9959493929190611e97565b600060405180830381600087803b158015610d0357600080fd5b505af1158015610d17573d6000803e3d6000fd5b50505050505b80610d2781611e37565b915050610c54565b507f6a8329a18d9dee6a297f77526416165a730ae6c200ed723c7f29985c77d66c7a87856040015183604051610d6793929190611ed4565b60405180910390a150505050505050565b610d80611516565b610d8985611543565b610d9284611543565b610d9b83611543565b610da482611543565b610dad81611543565b600180546001600160a01b038781166001600160a01b031992831681179093556004805488831690841681179091556005805488841690851681179091556002805488851690861681179091556003805494881694909516841790945560408051958652602086019290925290840152606083019190915260808201527f1e5765df374d010480569094677f5313a17b1b8ff5f33b3f39f9baba9bfc1e9f9060a00160405180910390a1610e5f610e66565b5050505050565b610e6e611516565b610e786000611592565b565b60006103a8600160009054906101000a90046001600160a01b03166001600160a01b031663459799786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037f573d6000803e3d6000fd5b6000610ee5610edf610e7a565b836115e2565b92915050565b610ef3611516565b6001600160a01b038116610f2257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610f2b81611592565b50565b6000610ee5610f44836611c37937e08000611df8565b670de0b6b3a764000061163c565b610f5a6119da565b600154604051630b07655760e01b81526001600160a01b03858116600483015290911690630b07655790602401600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b50505050610fc283611652565b608085018190526060850182905260408501929092526020840192909252600091610fec916119a4565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110679190611d4f565b505091505080821061108c5760405163c9be08d760e01b815260040160405180910390fd5b6110b284680ad78ebc5ac62000008560400151602001516110ad9190611e50565b61163c565b8352606083015160005b84602001515181101561122f576000856020015182815181106110e1576110e1611e21565b602090810291909101810151600554815192820151604051637d3b6e7960e11b81526001600160a01b0394851660048201526024810191909152919350600092169063fa76dcf290604401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190611c7f565b9050600087606001518289600001516111869190611f50565b6111909190611f67565b6005548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190611c7f565b60208401526112178186611e50565b9450505050808061122790611e37565b9150506110bc565b50604080516001808252818301909252600091816020015b611274604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816112475750506040805160608101808352600254631bd817c960e01b90915291519293509182916001600160a01b031690631bd817c9906064808501916020918187030181865afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611d32565b6001600160a01b031681526020018660000151815260200160008152508160008151811061132d5761132d611e21565b6020908102919091010152600154604051637120442f60e11b81526001600160a01b039091169063e240885e9061136a908a908590600401611f89565b600060405180830381600087803b15801561138457600080fd5b505af1158015611398573d6000803e3d6000fd5b5050600154602088015160405163d317458f60e01b81526001600160a01b03909216935063d317458f92506113d2918b9190600401612047565b600060405180830381600087803b1580156113ec57600080fd5b505af1158015611400573d6000803e3d6000fd5b50506001548a516040516309d9efd960e21b81526001600160a01b039092169350632767bf649250611436918b9060040161206b565b600060405180830381600087803b15801561145057600080fd5b505af1158015611464573d6000803e3d6000fd5b5050865160208801516040517f39add25abad9e7cf7e17693b8dfc9aef382d8da0c8aa2e5517bcdb185695566894506114a193508b9291906120c8565b60405180910390a1505050509392505050565b6000610ee5610edf610327565b826000036114ce57505050565b6000826114e3670de0b6b3a764000086611f50565b6114ed9190611f67565b905081811115611510576040516351a2c47360e11b815260040160405180910390fd5b50505050565b6000546001600160a01b03163314610e785760405163118cdaa760e01b8152336004820152602401610f19565b6001600160a01b03811661156a5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361158e57604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816000036115f457506000610ee5565b6000670de0b6b3a76400006116098486611f50565b6116139190611f67565b905082811061163557604051633a82228b60e21b815260040160405180910390fd5b9392505050565b600081831061164b5781611635565b5090919050565b604080518082018252600080825260208083018290526002548451631bd817c960e01b81529451606095849384936001600160a01b031692631bd817c99260048082019392918290030181865afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d59190611d32565b60015460405163d66a255360e01b81526001600160a01b0389811660048301529293506000929091169063d66a255390602401600060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174d91908101906120f8565b905060005b815181101561183657600082828151811061176f5761176f611e21565b60200260200101519050836001600160a01b031681600001516001600160a01b03160361179a578096505b60055481516020830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa1580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190611c7f565b6118209086611df8565b945050808061182e90611e37565b915050611752565b506001546040516309019aaf60e31b81526001600160a01b0389811660048301529091169063480cd57890602401600060405180830381865afa158015611881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a991908101906120f8565b955060005b865181101561199a5760055487516001600160a01b039091169063fa76dcf2908990849081106118e0576118e0611e21565b6020026020010151600001518984815181106118fe576118fe611e21565b6020026020010151602001516040518363ffffffff1660e01b815260040161193b9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190611c7f565b6119869086611df8565b94508061199281611e37565b9150506118ae565b5050509193509193565b600081156119d057816119bf670de0b6b3a764000085611f50565b6119c99190611f67565b9050610ee5565b5060001992915050565b6040518060a001604052806000815260200160608152602001611a19604051806040016040528060006001600160a01b03168152602001600081525090565b815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611a6657611a66611a2d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a9557611a95611a2d565b604052919050565b600067ffffffffffffffff821115611ab757611ab7611a2d565b5060051b60200190565b6001600160a01b0381168114610f2b57600080fd5b600080600060608486031215611aeb57600080fd5b833592506020808501359250604085013567ffffffffffffffff811115611b1157600080fd5b8501601f81018713611b2257600080fd5b8035611b35611b3082611a9d565b611a6c565b81815260059190911b82018301908381019089831115611b5457600080fd5b928401925b82841015611b7b578335611b6c81611ac1565b82529284019290840190611b59565b80955050505050509250925092565b600080600080600060a08688031215611ba257600080fd5b8535611bad81611ac1565b94506020860135611bbd81611ac1565b93506040860135611bcd81611ac1565b92506060860135611bdd81611ac1565b91506080860135611bed81611ac1565b809150509295509295909350565b600060208083528351808285015260005b81811015611c2857858101830151858201604001528201611c0c565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611c5b57600080fd5b5035919050565b600060208284031215611c7457600080fd5b813561163581611ac1565b600060208284031215611c9157600080fd5b5051919050565b60006020808385031215611cab57600080fd5b825167ffffffffffffffff811115611cc257600080fd5b8301601f81018513611cd357600080fd5b8051611ce1611b3082611a9d565b81815260059190911b82018301908381019087831115611d0057600080fd5b928401925b82841015611d27578351611d1881611ac1565b82529284019290840190611d05565b979650505050505050565b600060208284031215611d4457600080fd5b815161163581611ac1565b60008060008060808587031215611d6557600080fd5b84518015158114611d7557600080fd5b60208601516040870151606090970151919890975090945092505050565b60038110611db157634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0384168152821515602082015260608101611dda6040830184611d93565b949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ee557610ee5611de2565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611e4957611e49611de2565b5060010190565b81810381811115610ee557610ee5611de2565b6001600160a01b0385168152831515602082015260808101611e886040830185611d93565b82606083015295945050505050565b6001600160a01b03868116825285166020820152831515604082015260a08101611ec46060830185611d93565b8260808301529695505050505050565b60006060808301868452602086818601526040838187015282875180855260809450848801915083890160005b82811015611f3f57815180516001600160a01b0316855286810151878601528581015186860152880151888501529286019290850190600101611f01565b50919b9a5050505050505050505050565b8082028115828204841417610ee557610ee5611de2565b600082611f8457634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015611fe85781518051871685528581015186860152880151888501529286019290840190600101611fb9565b50919a9950505050505050505050565b600081518084526020808501945080840160005b8381101561203c57815180516001600160a01b03168852830151838801526040909601959082019060010161200c565b509495945050505050565b6001600160a01b0383168152604060208201819052600090611dda90830184611ff8565b604080825283519082018190526000906020906060840190828701845b828110156120ad5781516001600160a01b031684529284019290840190600101612088565b5050506001600160a01b039490941692019190915250919050565b60018060a01b03841681528260208201526060604082015260006120ef6060830184611ff8565b95945050505050565b6000602080838503121561210b57600080fd5b825167ffffffffffffffff81111561212257600080fd5b8301601f8101851361213357600080fd5b8051612141611b3082611a9d565b81815260069190911b8201830190838101908783111561216057600080fd5b928401925b82841015611d27576040848903121561217e5760008081fd5b612186611a43565b845161219181611ac1565b8152848601518682015282526040909301929084019061216556fea26469706673582212205c3ebdb55bd39523098f83bdf6e75dea33215421f072bd7d8ab5e1af7950955c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12841,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)10053"
      },
      {
        "astId": 12844,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDebtTokenManager)8449"
      },
      {
        "astId": 12847,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "collTokenManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICollTokenManager)8205"
      },
      {
        "astId": 12850,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "storagePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStoragePool)9174"
      },
      {
        "astId": 12853,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPriceFeed)8583"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICollTokenManager)8205": {
        "encoding": "inplace",
        "label": "contract ICollTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)8449": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)8583": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)9174": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)10053": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}