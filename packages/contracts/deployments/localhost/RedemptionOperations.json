{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "ExceedDebtBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GreaterThanTCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HintBelowMCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HintUnknown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHintLowerCRExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaxFeePercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRedemptionHint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LessThanMCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRedeems",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooHighRedeemFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_drawnCollAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "RedeemedFromTrove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storgePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_debtTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "RedemptionOperationsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedStableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualStableAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "drawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redemptionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendToRedeemer",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRedemptionOperations.RedemptionCollAmount[]",
          "name": "_collPayouts",
          "type": "tuple[]"
        }
      ],
      "name": "SuccessfulRedemption",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_redeemMaxAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_includePendingRewards",
          "type": "bool"
        }
      ],
      "name": "calculateTroveRedemption",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBase.TokenAmount",
              "name": "stableCoinEntry",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "stableCoinLot",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBase.TokenAmount[]",
              "name": "collLots",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "troveCollInUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "troveDebtInUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultingCR",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedemptionOperations.SingleRedemptionVariables",
          "name": "vars",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collTokenManager",
      "outputs": [
        {
          "internalType": "contract ICollTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stableCoinAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trove",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expectedCR",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRedemptionOperations.RedeemIteration[]",
          "name": "_iterations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcab3287fb57e13857dc2ab791591a982ca360978ef5f397edde03deb8ddff5a7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2383009",
    "logsBloom": "0x
    "blockHash": "0x4662c5780d382a6a8d21efb6af71a0c57d26e0bd0d29be378642fbe145d1cd09",
    "transactionHash": "0xcab3287fb57e13857dc2ab791591a982ca360978ef5f397edde03deb8ddff5a7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xcab3287fb57e13857dc2ab791591a982ca360978ef5f397edde03deb8ddff5a7",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4662c5780d382a6a8d21efb6af71a0c57d26e0bd0d29be378642fbe145d1cd09"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2383009",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExceedDebtBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GreaterThanTCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HintBelowMCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HintUnknown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHintLowerCRExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxFeePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRedemptionHint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThanMCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRedeems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooHighRedeemFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_drawnCollAmounts\",\"type\":\"tuple[]\"}],\"name\":\"RedeemedFromTrove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storgePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_debtTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"RedemptionOperationsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedStableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualStableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"drawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendToRedeemer\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRedemptionOperations.RedemptionCollAmount[]\",\"name\":\"_collPayouts\",\"type\":\"tuple[]\"}],\"name\":\"SuccessfulRedemption\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_includePendingRewards\",\"type\":\"bool\"}],\"name\":\"calculateTroveRedemption\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount\",\"name\":\"stableCoinEntry\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinLot\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"collLots\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"troveCollInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troveDebtInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultingCR\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedemptionOperations.SingleRedemptionVariables\",\"name\":\"vars\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collTokenManager\",\"outputs\":[{\"internalType\":\"contract ICollTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableCoinAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedCR\",\"type\":\"uint256\"}],\"internalType\":\"struct IRedemptionOperations.RedeemIteration[]\",\"name\":\"_iterations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedemptionOperations.sol\":\"RedemptionOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICollTokenManager {\\n  // --- Events ---\\n  event CollTokenManagerInitialized(address _priceFeedAddress);\\n  event CollTokenAdded(address _collTokenAddress);\\n\\n  // --- Custom Errors ---\\n  error TokenAlreadyAdded();\\n\\n  // --- Functions ---\\n\\n  function getCollTokenAddresses() external view returns (address[] memory);\\n\\n  function addCollToken(address _tokenAddress) external;\\n}\\n\",\"keccak256\":\"0x841232977bec6eff931b093b931a48a17dec71e92b89c9d603975787f9d5ca42\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IRedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\ninterface IRedemptionOperations is IBBase {\\n  // --- structs ---\\n\\n  struct RedemptionCollAmount {\\n    address collToken;\\n    uint drawn;\\n    uint redemptionFee;\\n    uint sendToRedeemer;\\n  }\\n\\n  struct RedeemIteration {\\n    address trove;\\n    address upperHint;\\n    address lowerHint;\\n    uint expectedCR;\\n  }\\n\\n  struct SingleRedemptionVariables {\\n    TokenAmount stableCoinEntry;\\n    //\\n    uint stableCoinLot; // redeemer pays for the debts of the trove owner\\n    TokenAmount[] collLots; // will be removed from the troves coll and paid to the redeemer\\n    //\\n    uint troveCollInUSD;\\n    uint troveDebtInUSD;\\n    uint resultingCR;\\n  }\\n\\n  // --- Events ---\\n\\n  event RedemptionOperationsInitialized(\\n    address _troveManager,\\n    address _storgePool,\\n    address _priceFeed,\\n    address _debtTokenManager,\\n    address _collTokenManager,\\n    address _sortedTrovesAddress\\n  );\\n  event RedeemedFromTrove(address _borrower, uint stableAmount, TokenAmount[] _drawnCollAmounts);\\n  event SuccessfulRedemption(\\n    uint _attemptedStableAmount,\\n    uint _actualStableAmount,\\n    RedemptionCollAmount[] _collPayouts\\n  );\\n\\n  // --- Errors ---\\n\\n  error ZeroAmount();\\n  error InvalidMaxFeePercent();\\n  error LessThanMCR();\\n  error ExceedDebtBalance();\\n  error NoRedeems();\\n  error GreaterThanTCR();\\n  error TooHighRedeemFee();\\n  error InvalidRedemptionHint();\\n  error HintUnknown();\\n  error HintBelowMCR();\\n  error InvalidHintLowerCRExists();\\n\\n  // --- Functions ---\\n\\n  function redeemCollateral(\\n    uint _stableCoinAmount,\\n    RedeemIteration[] memory _iterations,\\n    uint _maxFeePercentage\\n  ) external;\\n\\n  function calculateTroveRedemption(\\n    address _borrower,\\n    uint _redeemMaxAmount,\\n    bool _includePendingRewards\\n  ) external returns (SingleRedemptionVariables memory vars);\\n\\n  function getRedemptionRate() external view returns (uint);\\n\\n  function getRedemptionRateWithDecay() external view returns (uint);\\n\\n  function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa9f8b839866838838f3ea032e2845b0d88e23cb8e0057b3408d0210c2cdd124e\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISortedTroves {\\n  // --- Errors ---\\n\\n  error SizeCantBeZero();\\n  error ListIsFull();\\n  error ListAlreadyContainsNode();\\n  error ListDoesNotContainNode();\\n  error IdCantBeZero();\\n  error CRNotPositive();\\n  error CallerNotBrOrTrContract();\\n\\n  // --- Events ---\\n\\n  event SortedTrovesInitialised(\\n    address _troveManagerAddress,\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress\\n  );\\n  event NodeAdded(address _id, uint _CR);\\n  event NodeRemoved(address _id);\\n\\n  // --- Functions ---\\n\\n  function update(address _id, uint256 _newCR, uint _redeemableDebt, address _prevId, address _nextId) external;\\n\\n  function remove(address _id) external;\\n\\n  function contains(address _id) external view returns (bool);\\n\\n  function isEmpty() external view returns (bool);\\n\\n  function getSize() external view returns (uint256);\\n\\n  function getFirst() external view returns (address);\\n\\n  function getLast() external view returns (address);\\n\\n  function getNext(address _id) external view returns (address);\\n\\n  function getPrev(address _id) external view returns (address);\\n\\n  function getByIndex(uint _index) external view returns (address);\\n\\n  function getUsedCR(address _id) external view returns (uint);\\n\\n  function validInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (bool);\\n\\n  function findInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x208a8dd99f743ee53b781ac03fdfea6e079e13511378800251acfda45b4af41f\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/RedemptionOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IStabilityPool.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ICollTokenManager.sol';\\nimport './Interfaces/IRedemptionOperations.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/ISortedTroves.sol';\\n\\ncontract RedemptionOperations is LiquityBase, Ownable(msg.sender), CheckContract, IRedemptionOperations {\\n  string public constant NAME = 'RedemptionOperations';\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IDebtTokenManager public debtTokenManager;\\n  ICollTokenManager public collTokenManager;\\n  IStoragePool public storagePool;\\n  IPriceFeed public priceFeed;\\n  ISortedTroves public sortedTroves;\\n\\n  // --- Data structures ---\\n\\n  struct RedemptionVariables {\\n    address[] collTokenAddresses;\\n    RedemptionCollAmount[] totalCollDrawn;\\n    //\\n    uint totalStableSupplyAtStart;\\n    uint totalRedeemedStable;\\n  }\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _sortedTrovesAddress\\n  ) external onlyOwner {\\n    checkContract(_troveManagerAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManagerAddress);\\n    checkContract(_collTokenManagerAddress);\\n    checkContract(_sortedTrovesAddress);\\n\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    debtTokenManager = IDebtTokenManager(_debtTokenManagerAddress);\\n    collTokenManager = ICollTokenManager(_collTokenManagerAddress);\\n    sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n\\n    emit RedemptionOperationsInitialized(\\n      _troveManagerAddress,\\n      _storagePoolAddress,\\n      _priceFeedAddress,\\n      _debtTokenManagerAddress,\\n      _collTokenManagerAddress,\\n      _sortedTrovesAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  function redeemCollateral(\\n    uint _stableCoinAmount,\\n    RedeemIteration[] memory _iterations,\\n    uint _maxFeePercentage\\n  ) external override {\\n    IDebtToken stableCoin = debtTokenManager.getStableCoin();\\n    RedemptionVariables memory vars;\\n    vars.collTokenAddresses = collTokenManager.getCollTokenAddresses();\\n    vars.totalStableSupplyAtStart =\\n      storagePool.getValue(address(stableCoin), false, PoolType.Active) +\\n      storagePool.getValue(address(stableCoin), false, PoolType.Default);\\n\\n    if (_stableCoinAmount == 0) revert ZeroAmount();\\n    if (_maxFeePercentage < REDEMPTION_FEE_FLOOR || _maxFeePercentage > DECIMAL_PRECISION)\\n      revert InvalidMaxFeePercent();\\n    if (_stableCoinAmount > stableCoin.balanceOf(msg.sender)) revert ExceedDebtBalance();\\n\\n    (, uint TCR, , ) = storagePool.checkRecoveryMode();\\n    if (TCR < MCR) revert LessThanMCR();\\n\\n    // Confirm redeemer's balance is less than total stable coin supply\\n    assert(stableCoin.balanceOf(msg.sender) <= vars.totalStableSupplyAtStart);\\n\\n    // seed drawn coll\\n    vars.totalCollDrawn = new RedemptionCollAmount[](vars.collTokenAddresses.length);\\n    for (uint i = 0; i < vars.totalCollDrawn.length; i++) vars.totalCollDrawn[i].collToken = vars.collTokenAddresses[i];\\n\\n    for (uint i = 0; i < _iterations.length; i++) {\\n      RedeemIteration memory iteration = _iterations[i];\\n      checkValidRedemptionHint(iteration.trove);\\n\\n      troveManager.applyPendingRewards(iteration.trove);\\n      SingleRedemptionVariables memory troveRedemption = calculateTroveRedemption(\\n        iteration.trove,\\n        _stableCoinAmount - vars.totalRedeemedStable,\\n        false\\n      );\\n\\n      // resulting CR differs from the expected CR, we bail in that case, because all following iterations will consume too much gas by searching for a updated hints\\n      if (troveRedemption.resultingCR != iteration.expectedCR) break;\\n\\n      // updating the troves stable debt\\n      DebtTokenAmount[] memory debtDecrease = new DebtTokenAmount[](1);\\n      debtDecrease[0] = DebtTokenAmount(debtTokenManager.getStableCoin(), troveRedemption.stableCoinLot, 0);\\n      troveManager.decreaseTroveDebt(iteration.trove, debtDecrease);\\n\\n      // updating the troves stable coll\\n      troveManager.decreaseTroveColl(iteration.trove, troveRedemption.collLots);\\n      troveManager.updateStakeAndTotalStakes(vars.collTokenAddresses, iteration.trove);\\n\\n      // update the troves position in the sorted list\\n      // in case the trove was fully redeemed, it will be removed from the list\\n      sortedTroves.update(\\n        iteration.trove,\\n        troveRedemption.resultingCR,\\n        troveRedemption.stableCoinEntry.amount - troveRedemption.stableCoinLot - STABLE_COIN_GAS_COMPENSATION, // amount which is still redeemable from that trove (after the current one...)\\n        iteration.upperHint,\\n        iteration.lowerHint\\n      );\\n      emit RedeemedFromTrove(iteration.trove, troveRedemption.stableCoinLot, troveRedemption.collLots);\\n\\n      // sum up redeemed stable and drawn collateral\\n      vars.totalRedeemedStable += troveRedemption.stableCoinLot;\\n      for (uint a = 0; a < troveRedemption.collLots.length; a++) {\\n        for (uint b = 0; b < vars.totalCollDrawn.length; b++) {\\n          if (troveRedemption.collLots[a].tokenAddress != vars.collTokenAddresses[b]) continue;\\n\\n          vars.totalCollDrawn[b].drawn += troveRedemption.collLots[a].amount;\\n          break;\\n        }\\n      }\\n\\n      // we have redeemed enough\\n      if (_stableCoinAmount - vars.totalRedeemedStable == 0) break;\\n    }\\n\\n    if (vars.totalRedeemedStable == 0) revert NoRedeems();\\n\\n    // Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n    // Use the saved total stable supply value, from before it was reduced by the redemption.\\n    troveManager.updateStableCoinBaseRateFromRedemption(vars.totalRedeemedStable, vars.totalStableSupplyAtStart);\\n\\n    // Calculate the redemption fee\\n    for (uint i = 0; i < vars.totalCollDrawn.length; i++) {\\n      RedemptionCollAmount memory collEntry = vars.totalCollDrawn[i];\\n\\n      collEntry.redemptionFee = _getRedemptionFee(collEntry.drawn);\\n      collEntry.sendToRedeemer = collEntry.drawn - collEntry.redemptionFee;\\n\\n      _requireUserAcceptsFee(collEntry.redemptionFee, collEntry.drawn, _maxFeePercentage);\\n    }\\n\\n    // Burn the total stable coin that is cancelled with debt, and send the redeemed coll to msg.sender\\n    storagePool.subtractValue(address(stableCoin), false, PoolType.Active, vars.totalRedeemedStable);\\n    stableCoin.burn(msg.sender, vars.totalRedeemedStable);\\n\\n    // transfer the drawn collateral to the redeemer\\n    for (uint i = 0; i < vars.totalCollDrawn.length; i++) {\\n      RedemptionCollAmount memory collEntry = vars.totalCollDrawn[i];\\n      if (collEntry.sendToRedeemer == 0) continue;\\n\\n      storagePool.withdrawalValue(\\n        msg.sender,\\n        vars.collTokenAddresses[i],\\n        true,\\n        PoolType.Active,\\n        collEntry.sendToRedeemer\\n      );\\n      storagePool.withdrawalValue(\\n        GOV_STAKING_ADDRESS,\\n        vars.collTokenAddresses[i],\\n        true,\\n        PoolType.Active,\\n        collEntry.redemptionFee\\n      );\\n    }\\n\\n    emit SuccessfulRedemption(_stableCoinAmount, vars.totalRedeemedStable, vars.totalCollDrawn);\\n  }\\n\\n  function checkValidRedemptionHint(address _redemptionHint) internal view {\\n    if (!troveManager.isTroveActive(_redemptionHint)) revert HintUnknown();\\n\\n    // is case the sorted troves list is empty, all troves which minted stable are either redeemed or liquidated\\n    // the remaining stable is now in \\\"pending rewards\\\" of non listed troves\\n    if (sortedTroves.isEmpty()) return;\\n\\n    (uint hintCR, ) = troveManager.getCurrentICR(_redemptionHint);\\n    if (hintCR < MCR) revert HintBelowMCR(); // should be liquidated, not redeemed from\\n    if (!sortedTroves.contains(_redemptionHint)) revert InvalidRedemptionHint();\\n\\n    address nextTrove = sortedTroves.getNext(_redemptionHint);\\n    (uint nextTroveCR, ) = troveManager.getCurrentICR(nextTrove);\\n    if (nextTrove != address(0) && nextTroveCR > MCR) revert InvalidHintLowerCRExists();\\n  }\\n\\n  function calculateTroveRedemption(\\n    address _borrower,\\n    uint _redeemMaxAmount,\\n    bool _includePendingRewards\\n  ) public view override returns (SingleRedemptionVariables memory vars) {\\n    address stableCoinAddress = address(debtTokenManager.getStableCoin());\\n\\n    // stable coin debt should always exists because of the gas comp\\n    TokenAmount[] memory troveDebt = _includePendingRewards\\n      ? troveManager.getTroveRepayableDebts(_borrower, true) // with pending rewards\\n      : troveManager.getTroveDebt(_borrower); // without pending rewards\\n    if (troveDebt.length == 0) revert InvalidRedemptionHint();\\n    for (uint i = 0; i < troveDebt.length; i++) {\\n      TokenAmount memory debtEntry = troveDebt[i];\\n\\n      if (debtEntry.tokenAddress == stableCoinAddress) vars.stableCoinEntry = debtEntry;\\n      vars.troveDebtInUSD += priceFeed.getUSDValue(debtEntry.tokenAddress, debtEntry.amount);\\n    }\\n\\n    vars.collLots = _includePendingRewards\\n      ? troveManager.getTroveWithdrawableColls(_borrower)\\n      : troveManager.getTroveColl(_borrower);\\n    for (uint i = 0; i < vars.collLots.length; i++)\\n      vars.troveCollInUSD += priceFeed.getUSDValue(vars.collLots[i].tokenAddress, vars.collLots[i].amount);\\n\\n    // Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove minus the liquidation reserve\\n    vars.stableCoinLot = LiquityMath._min(_redeemMaxAmount, vars.stableCoinEntry.amount - STABLE_COIN_GAS_COMPENSATION);\\n\\n    // calculate the coll lot\\n    uint newCollInUSD = vars.troveCollInUSD;\\n    for (uint i = 0; i < vars.collLots.length; i++) {\\n      TokenAmount memory collEntry = vars.collLots[i];\\n\\n      uint collEntryInUSD = priceFeed.getUSDValue(collEntry.tokenAddress, collEntry.amount);\\n      uint collToRedeemInUSD = (vars.stableCoinLot * collEntryInUSD) / vars.troveCollInUSD;\\n      collEntry.amount = priceFeed.getAmountFromUSDValue(collEntry.tokenAddress, collToRedeemInUSD);\\n      newCollInUSD -= collToRedeemInUSD;\\n    }\\n\\n    vars.resultingCR = LiquityMath._computeCR(newCollInUSD, vars.troveDebtInUSD - vars.stableCoinLot);\\n    return vars;\\n  }\\n\\n  function getRedemptionRate() public view override returns (uint) {\\n    return _calcRedemptionRate(troveManager.getStableCoinBaseRate());\\n  }\\n\\n  function getRedemptionRateWithDecay() public view override returns (uint) {\\n    return _calcRedemptionRate(troveManager.calcDecayedStableCoinBaseRate());\\n  }\\n\\n  function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n    return\\n      LiquityMath._min(\\n        REDEMPTION_FEE_FLOOR + _baseRate,\\n        DECIMAL_PRECISION // cap at a maximum of 100%\\n      );\\n  }\\n\\n  function _getRedemptionFee(uint _collDrawn) internal view returns (uint) {\\n    return _calcRedemptionFee(getRedemptionRate(), _collDrawn);\\n  }\\n\\n  function getRedemptionFeeWithDecay(uint _collDrawn) external view override returns (uint) {\\n    return _calcRedemptionFee(getRedemptionRateWithDecay(), _collDrawn);\\n  }\\n\\n  function _calcRedemptionFee(uint _redemptionRate, uint _collDrawn) internal pure returns (uint) {\\n    if (_collDrawn == 0) return 0;\\n\\n    uint redemptionFee = (_redemptionRate * _collDrawn) / DECIMAL_PRECISION;\\n    if (redemptionFee >= _collDrawn) revert TooHighRedeemFee(); // Fee would eat up all returned collateral\\n    return redemptionFee;\\n  }\\n}\\n\",\"keccak256\":\"0x5e001d1fa607572e06c605ec67bf25394b818cd1e747be009ace2e78d139b2dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6129ae80620000a66000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063741bef1a116100f9578063c52861f211610097578063e67729e311610071578063e67729e3146103c4578063ec671c83146103ce578063f2fde38b146103d8578063f92d34331461023257600080fd5b8063c52861f214610396578063d5b356351461039e578063ddbeb714146103b157600080fd5b80638da5cb5b116100d35780638da5cb5b1461031f578063943ebeae14610330578063a3f4df7e14610343578063ae9187541461038357600080fd5b8063741bef1a146102ed578063794e5724146103005780638d63c6651461030f57600080fd5b80634870dd9a116101665780635733d58f116101405780635733d58f146102b45780636cfb6bf9146102c3578063715018a6146102d657806372fe25aa146102de57600080fd5b80634870dd9a1461027b578063502afb0414610283578063522a86fe146102a157600080fd5b806328d28b5b116101a257806328d28b5b146102325780632b11551a14610240578063325b9274146102485780633d83908a1461026857600080fd5b806309230ad3146101c95780631e25062a146102015780632409266914610216575b600080fd5b6101e473f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021461020f3660046120fc565b6103eb565b005b61022466b1a2bc2ec5000081565b6040519081526020016101f8565b6102246611c37937e0800081565b610224611205565b61025b610256366004612208565b61128b565b6040516101f8919061224a565b6001546101e4906001600160a01b031681565b61022460c881565b61028c610bb881565b60405163ffffffff90911681526020016101f8565b6002546101e4906001600160a01b031681565b6102246714d1120d7b16000081565b6102146102d1366004612300565b61191c565b610214611a28565b610224670de0b6b3a764000081565b6005546101e4906001600160a01b031681565b610224670f43fc2c04ee000081565b610224680ad78ebc5ac620000081565b6000546001600160a01b03166101e4565b6003546101e4906001600160a01b031681565b61037660405180604001604052806014815260200173526564656d7074696f6e4f7065726174696f6e7360601b81525081565b6040516101f89190612382565b6006546101e4906001600160a01b031681565b610224611a3c565b6102246103ac3660046123d0565b611a94565b6004546101e4906001600160a01b031681565b61028c620f424081565b61028c6207a12081565b6102146103e63660046123e9565b611aad565b60025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190612406565b90506104866040518060800160405280606081526020016060815260200160008152602001600081525090565b600360009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105019190810190612423565b81526004805460405162d05f3560e81b81526001600160a01b039091169163d05f350091610537918691600091600191016124df565b602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061250c565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f3500916105ab9187916000918291016124df565b602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec919061250c565b6105f6919061253b565b6040820152600085900361061d57604051631f2a200560e01b815260040160405180910390fd5b6611c37937e080008310806106395750670de0b6b3a764000083115b1561065757604051631113e26760e31b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf919061250c565b8511156106df57604051630b509b5f60e21b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061254e565b5050915050670f43fc2c04ee000081101561078657604051631afae4cd60e21b815260040160405180910390fd5b60408281015190516370a0823160e01b81523360048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f3919061250c565b11156108015761080161258d565b81515167ffffffffffffffff81111561081c5761081c612030565b60405190808252806020026020018201604052801561088157816020015b61086e604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b81526020019060019003908161083a5790505b50602083015260005b8260200151518110156108f35782518051829081106108ab576108ab6125a3565b6020026020010151836020015182815181106108c9576108c96125a3565b60209081029190910101516001600160a01b039091169052806108eb816125b9565b91505061088a565b5060005b8551811015610e49576000868281518110610914576109146125a3565b6020026020010151905061092b8160000151611af0565b6001548151604051630b07655760e01b81526001600160a01b039182166004820152911690630b07655790602401600060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505082516060870151600093506109aa92506109a3908c6125d2565b600061128b565b905081606001518160a00151146109c2575050610e49565b604080516001808252818301909252600091816020015b610a06604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816109d95750506040805160608101808352600254631bd817c960e01b90915291519293509182916001600160a01b031690631bd817c9906064808501916020918187030181865afa158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f9190612406565b6001600160a01b0316815260200183602001518152602001600081525081600081518110610abf57610abf6125a3565b60209081029190910101526001548351604051637120442f60e11b81526001600160a01b039092169163e240885e91610afc9185906004016125e5565b600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505060015485516040808701519051635988e97160e11b81526001600160a01b03909316945063b311d2e29350610b63926004016126ac565b600060405180830381600087803b158015610b7d57600080fd5b505af1158015610b91573d6000803e3d6000fd5b5050600154885186516040516309d9efd960e21b81526001600160a01b039093169450632767bf649350610bc7926004016126d0565b600060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b5050600654855160a08601516020808801518851909101516001600160a01b03909416955063ad555719945091929091680ad78ebc5ac620000091610c3a91906125d2565b610c4491906125d2565b60208801516040808a015190516001600160e01b031960e088901b1681526001600160a01b039586166004820152602481019490945260448401929092528316606483015291909116608482015260a401600060405180830381600087803b158015610caf57600080fd5b505af1158015610cc3573d6000803e3d6000fd5b50508451602085015160408087015190517f39add25abad9e7cf7e17693b8dfc9aef382d8da0c8aa2e5517bcdb18569556689550610d01945061272d565b60405180910390a1816020015186606001818151610d1f919061253b565b90525060005b826040015151811015610e145760005b876020015151811015610e01578751805182908110610d5657610d566125a3565b60200260200101516001600160a01b031684604001518381518110610d7d57610d7d6125a3565b6020026020010151600001516001600160a01b031603610def5783604001518281518110610dad57610dad6125a3565b60200260200101516020015188602001518281518110610dcf57610dcf6125a3565b6020026020010151602001818151610de7919061253b565b905250610e01565b80610df9816125b9565b915050610d35565b5080610e0c816125b9565b915050610d25565b506060860151610e24908b6125d2565b600003610e3357505050610e49565b5050508080610e41906125b9565b9150506108f7565b508160600151600003610e6f576040516353d77d3b60e11b815260040160405180910390fd5b600154606083015160408085015190516339d8814b60e11b8152600481019290925260248201526001600160a01b03909116906373b1029690604401600060405180830381600087803b158015610ec557600080fd5b505af1158015610ed9573d6000803e3d6000fd5b5050505060005b826020015151811015610f5f57600083602001518281518110610f0557610f056125a3565b60200260200101519050610f1c8160200151611e47565b604082018190526020820151610f3291906125d2565b606082015260408101516020820151610f4c919088611e54565b5080610f57816125b9565b915050610ee0565b506004805460608401516040516304b86aad60e21b81526001600160a01b03909216926312e1aab492610f9a9288926000928392910161275d565b600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506060820151604051632770a7eb60e21b815233600482015260248101919091526001600160a01b03841690639dc29fac90604401600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b5050505060005b8260200151518110156111ba5760008360200151828151811061105a5761105a6125a3565b60200260200101519050806060015160000361107657506111a8565b600454845180516001600160a01b039092169163b403b997913391869081106110a1576110a16125a3565b60200260200101516001600086606001516040518663ffffffff1660e01b81526004016110d2959493929190612791565b600060405180830381600087803b1580156110ec57600080fd5b505af1158015611100573d6000803e3d6000fd5b5050600454865180516001600160a01b03909216935063b403b997925073f39fd6e51aad88f6f4ce6ab8827279cfffb922669186908110611143576111436125a3565b60200260200101516001600086604001516040518663ffffffff1660e01b8152600401611174959493929190612791565b600060405180830381600087803b15801561118e57600080fd5b505af11580156111a2573d6000803e3d6000fd5b50505050505b806111b2816125b9565b915050611035565b50606082015160208301516040517f6a8329a18d9dee6a297f77526416165a730ae6c200ed723c7f29985c77d66c7a926111f5928a926127ce565b60405180910390a1505050505050565b6000611286600160009054906101000a90046001600160a01b03166001600160a01b0316633fd5c85a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611281919061250c565b611ea3565b905090565b6112d6604080516101008101909152600060c0820181815260e08301919091528190815260200160008152602001606081526020016000815260200160008152602001600081525090565b60025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190612406565b90506000836113c45760015460405163d66a255360e01b81526001600160a01b0388811660048301529091169063d66a255390602401600060405180830381865afa158015611397573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113bf919081019061284a565b61143e565b600180546040516310e7cc8160e01b81526001600160a01b03898116600483015260248201939093529116906310e7cc8190604401600060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261143e919081019061284a565b9050805160000361146257604051636766da4960e11b815260040160405180910390fd5b60005b8151811015611551576000828281518110611482576114826125a3565b60200260200101519050836001600160a01b031681600001516001600160a01b0316036114ad578085525b60055481516020830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611529919061250c565b8560800181815161153a919061253b565b905250819050611549816125b9565b915050611465565b50836115ce576001546040516309019aaf60e31b81526001600160a01b0388811660048301529091169063480cd57890602401600060405180830381865afa1580156115a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c9919081019061284a565b611640565b600154604051632f0f3a3160e21b81526001600160a01b0388811660048301529091169063bc3ce8c490602401600060405180830381865afa158015611618573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611640919081019061284a565b604084015260005b83604001515181101561174857600554604085015180516001600160a01b039092169163fa76dcf2919084908110611682576116826125a3565b602002602001015160000151866040015184815181106116a4576116a46125a3565b6020026020010151602001516040518363ffffffff1660e01b81526004016116e19291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611722919061250c565b84606001818151611733919061253b565b90525080611740816125b9565b915050611648565b5061176f85680ad78ebc5ac620000085600001516020015161176a91906125d2565b611ec3565b6020840152606083015160005b8460400151518110156118ef576000856040015182815181106117a1576117a16125a3565b602090810291909101810151600554815192820151604051637d3b6e7960e11b81526001600160a01b0394851660048201526024810191909152919350600092169063fa76dcf290604401602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d919061250c565b90506000876060015182896020015161184691906128fe565b6118509190612915565b6005548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c8919061250c565b60208401526118d781866125d2565b945050505080806118e7906125b9565b91505061177c565b5061190d818560200151866080015161190891906125d2565b611edb565b60a08501525050509392505050565b611924611f11565b61192d86611f3e565b61193685611f3e565b61193f84611f3e565b61194883611f3e565b61195182611f3e565b61195a81611f3e565b600180546001600160a01b038881166001600160a01b0319928316811790935560048054898316908416811790915560058054898416908516811790915560028054898516908616811790915560038054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f802fff129d001c064e5578315a3367b093ee7e6d91131fceb01f3d46062402819060c00160405180910390a1611a20611a28565b505050505050565b611a30611f11565b611a3a6000611f8d565b565b6000611286600160009054906101000a90046001600160a01b03166001600160a01b031663b22b0bcf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125d573d6000803e3d6000fd5b6000611aa7611aa1611a3c565b83611fdd565b92915050565b611ab5611f11565b6001600160a01b038116611ae457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b611aed81611f8d565b50565b6001546040516301b9ad5160e51b81526001600160a01b03838116600483015290911690633735aa2090602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e9190612937565b611b7b5760405163cb9e5f6b60e01b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663681fe70c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190612937565b15611bfa5750565b6001546040516327fb7d8960e01b81526001600160a01b03838116600483015260009216906327fb7d89906024016040805180830381865afa158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c689190612954565b509050670f43fc2c04ee0000811015611c945760405163e8978cad60e01b815260040160405180910390fd5b600654604051630bb7c8fd60e31b81526001600160a01b03848116600483015290911690635dbe47e890602401602060405180830381865afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190612937565b611d1f57604051636766da4960e11b815260040160405180910390fd5b60065460405163765e015960e01b81526001600160a01b038481166004830152600092169063765e015990602401602060405180830381865afa158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190612406565b6001546040516327fb7d8960e01b81526001600160a01b038084166004830152929350600092909116906327fb7d89906024016040805180830381865afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e019190612954565b5090506001600160a01b03821615801590611e235750670f43fc2c04ee000081115b15611e4157604051633e6e48f760e11b815260040160405180910390fd5b50505050565b6000611aa7611aa1611205565b82600003611e6157505050565b600082611e76670de0b6b3a7640000866128fe565b611e809190612915565b905081811115611e41576040516351a2c47360e11b815260040160405180910390fd5b6000611aa7611eb9836611c37937e0800061253b565b670de0b6b3a76400005b6000818310611ed25781611ed4565b825b9392505050565b60008115611f075781611ef6670de0b6b3a7640000856128fe565b611f009190612915565b9050611aa7565b5060001992915050565b6000546001600160a01b03163314611a3a5760405163118cdaa760e01b8152336004820152602401611adb565b6001600160a01b038116611f655760405163d92e233d60e01b815260040160405180910390fd5b803b6000819003611f8957604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600003611fef57506000611aa7565b6000670de0b6b3a764000061200484866128fe565b61200e9190612915565b9050828110611ed457604051633a82228b60e21b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561206957612069612030565b60405290565b6040805190810167ffffffffffffffff8111828210171561206957612069612030565b604051601f8201601f1916810167ffffffffffffffff811182821017156120bb576120bb612030565b604052919050565b600067ffffffffffffffff8211156120dd576120dd612030565b5060051b60200190565b6001600160a01b0381168114611aed57600080fd5b6000806000606080858703121561211257600080fd5b8435935060208086013567ffffffffffffffff81111561213157600080fd5b8601601f8101881361214257600080fd5b8035612155612150826120c3565b612092565b81815260079190911b8201830190838101908a83111561217457600080fd5b928401925b828410156121e4576080848c0312156121925760008081fd5b61219a612046565b84356121a5816120e7565b8152848601356121b4816120e7565b818701526040858101356121c7816120e7565b908201528487013587820152825260809093019290840190612179565b979a979950505050604095909501359450505050565b8015158114611aed57600080fd5b60008060006060848603121561221d57600080fd5b8335612228816120e7565b925060208401359150604084013561223f816121fa565b809150509250925092565b6020808252825180516001600160a01b0316838301528101516040830152600090610100830184820151606085015260408086015160e060808701528051928390528301916000906101208701905b808310156122d3576122bf82865180516001600160a01b03168252602090810151910152565b938501936001929092019190830190612299565b50606088015160a0880152608088015160c088015260a088015160e0880152809550505050505092915050565b60008060008060008060c0878903121561231957600080fd5b8635612324816120e7565b95506020870135612334816120e7565b94506040870135612344816120e7565b93506060870135612354816120e7565b92506080870135612364816120e7565b915060a0870135612374816120e7565b809150509295509295509295565b600060208083528351808285015260005b818110156123af57858101830151858201604001528201612393565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156123e257600080fd5b5035919050565b6000602082840312156123fb57600080fd5b8135611ed4816120e7565b60006020828403121561241857600080fd5b8151611ed4816120e7565b6000602080838503121561243657600080fd5b825167ffffffffffffffff81111561244d57600080fd5b8301601f8101851361245e57600080fd5b805161246c612150826120c3565b81815260059190911b8201830190838101908783111561248b57600080fd5b928401925b828410156124b25783516124a3816120e7565b82529284019290840190612490565b979650505050505050565b600381106124db57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038416815282151560208201526060810161250460408301846124bd565b949350505050565b60006020828403121561251e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611aa757611aa7612525565b6000806000806080858703121561256457600080fd5b845161256f816121fa565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016125cb576125cb612525565b5060010190565b81810381811115611aa757611aa7612525565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b828110156126445781518051871685528581015186860152880151888501529286019290840190600101612615565b50919a9950505050505050505050565b600081518084526020808501945080840160005b838110156126a15761268e87835180516001600160a01b03168252602090810151910152565b6040969096019590820190600101612668565b509495945050505050565b6001600160a01b038316815260406020820181905260009061250490830184612654565b604080825283519082018190526000906020906060840190828701845b828110156127125781516001600160a01b0316845292840192908401906001016126ed565b5050506001600160a01b039490941692019190915250919050565b60018060a01b03841681528260208201526060604082015260006127546060830184612654565b95945050505050565b6001600160a01b038516815283151560208201526080810161278260408301856124bd565b82606083015295945050505050565b6001600160a01b03868116825285166020820152831515604082015260a081016127be60608301856124bd565b8260808301529695505050505050565b60006060808301868452602086818601526040838187015282875180855260809450848801915083890160005b8281101561283957815180516001600160a01b03168552868101518786015285810151868601528801518885015292860192908501906001016127fb565b50919b9a5050505050505050505050565b6000602080838503121561285d57600080fd5b825167ffffffffffffffff81111561287457600080fd5b8301601f8101851361288557600080fd5b8051612893612150826120c3565b81815260069190911b820183019083810190878311156128b257600080fd5b928401925b828410156124b257604084890312156128d05760008081fd5b6128d861206f565b84516128e3816120e7565b815284860151868201528252604090930192908401906128b7565b8082028115828204841417611aa757611aa7612525565b60008261293257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561294957600080fd5b8151611ed4816121fa565b6000806040838503121561296757600080fd5b50508051602090910151909290915056fea26469706673582212201b89a3df660f333d2e5a5019135860301007c1f45a29a156104037b52a3770ae64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063741bef1a116100f9578063c52861f211610097578063e67729e311610071578063e67729e3146103c4578063ec671c83146103ce578063f2fde38b146103d8578063f92d34331461023257600080fd5b8063c52861f214610396578063d5b356351461039e578063ddbeb714146103b157600080fd5b80638da5cb5b116100d35780638da5cb5b1461031f578063943ebeae14610330578063a3f4df7e14610343578063ae9187541461038357600080fd5b8063741bef1a146102ed578063794e5724146103005780638d63c6651461030f57600080fd5b80634870dd9a116101665780635733d58f116101405780635733d58f146102b45780636cfb6bf9146102c3578063715018a6146102d657806372fe25aa146102de57600080fd5b80634870dd9a1461027b578063502afb0414610283578063522a86fe146102a157600080fd5b806328d28b5b116101a257806328d28b5b146102325780632b11551a14610240578063325b9274146102485780633d83908a1461026857600080fd5b806309230ad3146101c95780631e25062a146102015780632409266914610216575b600080fd5b6101e473f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021461020f3660046120fc565b6103eb565b005b61022466b1a2bc2ec5000081565b6040519081526020016101f8565b6102246611c37937e0800081565b610224611205565b61025b610256366004612208565b61128b565b6040516101f8919061224a565b6001546101e4906001600160a01b031681565b61022460c881565b61028c610bb881565b60405163ffffffff90911681526020016101f8565b6002546101e4906001600160a01b031681565b6102246714d1120d7b16000081565b6102146102d1366004612300565b61191c565b610214611a28565b610224670de0b6b3a764000081565b6005546101e4906001600160a01b031681565b610224670f43fc2c04ee000081565b610224680ad78ebc5ac620000081565b6000546001600160a01b03166101e4565b6003546101e4906001600160a01b031681565b61037660405180604001604052806014815260200173526564656d7074696f6e4f7065726174696f6e7360601b81525081565b6040516101f89190612382565b6006546101e4906001600160a01b031681565b610224611a3c565b6102246103ac3660046123d0565b611a94565b6004546101e4906001600160a01b031681565b61028c620f424081565b61028c6207a12081565b6102146103e63660046123e9565b611aad565b60025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190612406565b90506104866040518060800160405280606081526020016060815260200160008152602001600081525090565b600360009054906101000a90046001600160a01b03166001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105019190810190612423565b81526004805460405162d05f3560e81b81526001600160a01b039091169163d05f350091610537918691600091600191016124df565b602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061250c565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f3500916105ab9187916000918291016124df565b602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec919061250c565b6105f6919061253b565b6040820152600085900361061d57604051631f2a200560e01b815260040160405180910390fd5b6611c37937e080008310806106395750670de0b6b3a764000083115b1561065757604051631113e26760e31b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf919061250c565b8511156106df57604051630b509b5f60e21b815260040160405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061254e565b5050915050670f43fc2c04ee000081101561078657604051631afae4cd60e21b815260040160405180910390fd5b60408281015190516370a0823160e01b81523360048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f3919061250c565b11156108015761080161258d565b81515167ffffffffffffffff81111561081c5761081c612030565b60405190808252806020026020018201604052801561088157816020015b61086e604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b81526020019060019003908161083a5790505b50602083015260005b8260200151518110156108f35782518051829081106108ab576108ab6125a3565b6020026020010151836020015182815181106108c9576108c96125a3565b60209081029190910101516001600160a01b039091169052806108eb816125b9565b91505061088a565b5060005b8551811015610e49576000868281518110610914576109146125a3565b6020026020010151905061092b8160000151611af0565b6001548151604051630b07655760e01b81526001600160a01b039182166004820152911690630b07655790602401600060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505082516060870151600093506109aa92506109a3908c6125d2565b600061128b565b905081606001518160a00151146109c2575050610e49565b604080516001808252818301909252600091816020015b610a06604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816109d95750506040805160608101808352600254631bd817c960e01b90915291519293509182916001600160a01b031690631bd817c9906064808501916020918187030181865afa158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f9190612406565b6001600160a01b0316815260200183602001518152602001600081525081600081518110610abf57610abf6125a3565b60209081029190910101526001548351604051637120442f60e11b81526001600160a01b039092169163e240885e91610afc9185906004016125e5565b600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505060015485516040808701519051635988e97160e11b81526001600160a01b03909316945063b311d2e29350610b63926004016126ac565b600060405180830381600087803b158015610b7d57600080fd5b505af1158015610b91573d6000803e3d6000fd5b5050600154885186516040516309d9efd960e21b81526001600160a01b039093169450632767bf649350610bc7926004016126d0565b600060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b5050600654855160a08601516020808801518851909101516001600160a01b03909416955063ad555719945091929091680ad78ebc5ac620000091610c3a91906125d2565b610c4491906125d2565b60208801516040808a015190516001600160e01b031960e088901b1681526001600160a01b039586166004820152602481019490945260448401929092528316606483015291909116608482015260a401600060405180830381600087803b158015610caf57600080fd5b505af1158015610cc3573d6000803e3d6000fd5b50508451602085015160408087015190517f39add25abad9e7cf7e17693b8dfc9aef382d8da0c8aa2e5517bcdb18569556689550610d01945061272d565b60405180910390a1816020015186606001818151610d1f919061253b565b90525060005b826040015151811015610e145760005b876020015151811015610e01578751805182908110610d5657610d566125a3565b60200260200101516001600160a01b031684604001518381518110610d7d57610d7d6125a3565b6020026020010151600001516001600160a01b031603610def5783604001518281518110610dad57610dad6125a3565b60200260200101516020015188602001518281518110610dcf57610dcf6125a3565b6020026020010151602001818151610de7919061253b565b905250610e01565b80610df9816125b9565b915050610d35565b5080610e0c816125b9565b915050610d25565b506060860151610e24908b6125d2565b600003610e3357505050610e49565b5050508080610e41906125b9565b9150506108f7565b508160600151600003610e6f576040516353d77d3b60e11b815260040160405180910390fd5b600154606083015160408085015190516339d8814b60e11b8152600481019290925260248201526001600160a01b03909116906373b1029690604401600060405180830381600087803b158015610ec557600080fd5b505af1158015610ed9573d6000803e3d6000fd5b5050505060005b826020015151811015610f5f57600083602001518281518110610f0557610f056125a3565b60200260200101519050610f1c8160200151611e47565b604082018190526020820151610f3291906125d2565b606082015260408101516020820151610f4c919088611e54565b5080610f57816125b9565b915050610ee0565b506004805460608401516040516304b86aad60e21b81526001600160a01b03909216926312e1aab492610f9a9288926000928392910161275d565b600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506060820151604051632770a7eb60e21b815233600482015260248101919091526001600160a01b03841690639dc29fac90604401600060405180830381600087803b15801561101a57600080fd5b505af115801561102e573d6000803e3d6000fd5b5050505060005b8260200151518110156111ba5760008360200151828151811061105a5761105a6125a3565b60200260200101519050806060015160000361107657506111a8565b600454845180516001600160a01b039092169163b403b997913391869081106110a1576110a16125a3565b60200260200101516001600086606001516040518663ffffffff1660e01b81526004016110d2959493929190612791565b600060405180830381600087803b1580156110ec57600080fd5b505af1158015611100573d6000803e3d6000fd5b5050600454865180516001600160a01b03909216935063b403b997925073f39fd6e51aad88f6f4ce6ab8827279cfffb922669186908110611143576111436125a3565b60200260200101516001600086604001516040518663ffffffff1660e01b8152600401611174959493929190612791565b600060405180830381600087803b15801561118e57600080fd5b505af11580156111a2573d6000803e3d6000fd5b50505050505b806111b2816125b9565b915050611035565b50606082015160208301516040517f6a8329a18d9dee6a297f77526416165a730ae6c200ed723c7f29985c77d66c7a926111f5928a926127ce565b60405180910390a1505050505050565b6000611286600160009054906101000a90046001600160a01b03166001600160a01b0316633fd5c85a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611281919061250c565b611ea3565b905090565b6112d6604080516101008101909152600060c0820181815260e08301919091528190815260200160008152602001606081526020016000815260200160008152602001600081525090565b60025460408051631bd817c960e01b815290516000926001600160a01b031691631bd817c99160048083019260209291908290030181865afa158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190612406565b90506000836113c45760015460405163d66a255360e01b81526001600160a01b0388811660048301529091169063d66a255390602401600060405180830381865afa158015611397573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113bf919081019061284a565b61143e565b600180546040516310e7cc8160e01b81526001600160a01b03898116600483015260248201939093529116906310e7cc8190604401600060405180830381865afa158015611416573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261143e919081019061284a565b9050805160000361146257604051636766da4960e11b815260040160405180910390fd5b60005b8151811015611551576000828281518110611482576114826125a3565b60200260200101519050836001600160a01b031681600001516001600160a01b0316036114ad578085525b60055481516020830151604051637d3b6e7960e11b81526001600160a01b039283166004820152602481019190915291169063fa76dcf290604401602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611529919061250c565b8560800181815161153a919061253b565b905250819050611549816125b9565b915050611465565b50836115ce576001546040516309019aaf60e31b81526001600160a01b0388811660048301529091169063480cd57890602401600060405180830381865afa1580156115a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c9919081019061284a565b611640565b600154604051632f0f3a3160e21b81526001600160a01b0388811660048301529091169063bc3ce8c490602401600060405180830381865afa158015611618573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611640919081019061284a565b604084015260005b83604001515181101561174857600554604085015180516001600160a01b039092169163fa76dcf2919084908110611682576116826125a3565b602002602001015160000151866040015184815181106116a4576116a46125a3565b6020026020010151602001516040518363ffffffff1660e01b81526004016116e19291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611722919061250c565b84606001818151611733919061253b565b90525080611740816125b9565b915050611648565b5061176f85680ad78ebc5ac620000085600001516020015161176a91906125d2565b611ec3565b6020840152606083015160005b8460400151518110156118ef576000856040015182815181106117a1576117a16125a3565b602090810291909101810151600554815192820151604051637d3b6e7960e11b81526001600160a01b0394851660048201526024810191909152919350600092169063fa76dcf290604401602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d919061250c565b90506000876060015182896020015161184691906128fe565b6118509190612915565b6005548451604051632815899160e21b81526001600160a01b03918216600482015260248101849052929350169063a056264490604401602060405180830381865afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c8919061250c565b60208401526118d781866125d2565b945050505080806118e7906125b9565b91505061177c565b5061190d818560200151866080015161190891906125d2565b611edb565b60a08501525050509392505050565b611924611f11565b61192d86611f3e565b61193685611f3e565b61193f84611f3e565b61194883611f3e565b61195182611f3e565b61195a81611f3e565b600180546001600160a01b038881166001600160a01b0319928316811790935560048054898316908416811790915560058054898416908516811790915560028054898516908616811790915560038054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f802fff129d001c064e5578315a3367b093ee7e6d91131fceb01f3d46062402819060c00160405180910390a1611a20611a28565b505050505050565b611a30611f11565b611a3a6000611f8d565b565b6000611286600160009054906101000a90046001600160a01b03166001600160a01b031663b22b0bcf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125d573d6000803e3d6000fd5b6000611aa7611aa1611a3c565b83611fdd565b92915050565b611ab5611f11565b6001600160a01b038116611ae457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b611aed81611f8d565b50565b6001546040516301b9ad5160e51b81526001600160a01b03838116600483015290911690633735aa2090602401602060405180830381865afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e9190612937565b611b7b5760405163cb9e5f6b60e01b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663681fe70c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190612937565b15611bfa5750565b6001546040516327fb7d8960e01b81526001600160a01b03838116600483015260009216906327fb7d89906024016040805180830381865afa158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c689190612954565b509050670f43fc2c04ee0000811015611c945760405163e8978cad60e01b815260040160405180910390fd5b600654604051630bb7c8fd60e31b81526001600160a01b03848116600483015290911690635dbe47e890602401602060405180830381865afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190612937565b611d1f57604051636766da4960e11b815260040160405180910390fd5b60065460405163765e015960e01b81526001600160a01b038481166004830152600092169063765e015990602401602060405180830381865afa158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190612406565b6001546040516327fb7d8960e01b81526001600160a01b038084166004830152929350600092909116906327fb7d89906024016040805180830381865afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e019190612954565b5090506001600160a01b03821615801590611e235750670f43fc2c04ee000081115b15611e4157604051633e6e48f760e11b815260040160405180910390fd5b50505050565b6000611aa7611aa1611205565b82600003611e6157505050565b600082611e76670de0b6b3a7640000866128fe565b611e809190612915565b905081811115611e41576040516351a2c47360e11b815260040160405180910390fd5b6000611aa7611eb9836611c37937e0800061253b565b670de0b6b3a76400005b6000818310611ed25781611ed4565b825b9392505050565b60008115611f075781611ef6670de0b6b3a7640000856128fe565b611f009190612915565b9050611aa7565b5060001992915050565b6000546001600160a01b03163314611a3a5760405163118cdaa760e01b8152336004820152602401611adb565b6001600160a01b038116611f655760405163d92e233d60e01b815260040160405180910390fd5b803b6000819003611f8957604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600003611fef57506000611aa7565b6000670de0b6b3a764000061200484866128fe565b61200e9190612915565b9050828110611ed457604051633a82228b60e21b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561206957612069612030565b60405290565b6040805190810167ffffffffffffffff8111828210171561206957612069612030565b604051601f8201601f1916810167ffffffffffffffff811182821017156120bb576120bb612030565b604052919050565b600067ffffffffffffffff8211156120dd576120dd612030565b5060051b60200190565b6001600160a01b0381168114611aed57600080fd5b6000806000606080858703121561211257600080fd5b8435935060208086013567ffffffffffffffff81111561213157600080fd5b8601601f8101881361214257600080fd5b8035612155612150826120c3565b612092565b81815260079190911b8201830190838101908a83111561217457600080fd5b928401925b828410156121e4576080848c0312156121925760008081fd5b61219a612046565b84356121a5816120e7565b8152848601356121b4816120e7565b818701526040858101356121c7816120e7565b908201528487013587820152825260809093019290840190612179565b979a979950505050604095909501359450505050565b8015158114611aed57600080fd5b60008060006060848603121561221d57600080fd5b8335612228816120e7565b925060208401359150604084013561223f816121fa565b809150509250925092565b6020808252825180516001600160a01b0316838301528101516040830152600090610100830184820151606085015260408086015160e060808701528051928390528301916000906101208701905b808310156122d3576122bf82865180516001600160a01b03168252602090810151910152565b938501936001929092019190830190612299565b50606088015160a0880152608088015160c088015260a088015160e0880152809550505050505092915050565b60008060008060008060c0878903121561231957600080fd5b8635612324816120e7565b95506020870135612334816120e7565b94506040870135612344816120e7565b93506060870135612354816120e7565b92506080870135612364816120e7565b915060a0870135612374816120e7565b809150509295509295509295565b600060208083528351808285015260005b818110156123af57858101830151858201604001528201612393565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156123e257600080fd5b5035919050565b6000602082840312156123fb57600080fd5b8135611ed4816120e7565b60006020828403121561241857600080fd5b8151611ed4816120e7565b6000602080838503121561243657600080fd5b825167ffffffffffffffff81111561244d57600080fd5b8301601f8101851361245e57600080fd5b805161246c612150826120c3565b81815260059190911b8201830190838101908783111561248b57600080fd5b928401925b828410156124b25783516124a3816120e7565b82529284019290840190612490565b979650505050505050565b600381106124db57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038416815282151560208201526060810161250460408301846124bd565b949350505050565b60006020828403121561251e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611aa757611aa7612525565b6000806000806080858703121561256457600080fd5b845161256f816121fa565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016125cb576125cb612525565b5060010190565b81810381811115611aa757611aa7612525565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b828110156126445781518051871685528581015186860152880151888501529286019290840190600101612615565b50919a9950505050505050505050565b600081518084526020808501945080840160005b838110156126a15761268e87835180516001600160a01b03168252602090810151910152565b6040969096019590820190600101612668565b509495945050505050565b6001600160a01b038316815260406020820181905260009061250490830184612654565b604080825283519082018190526000906020906060840190828701845b828110156127125781516001600160a01b0316845292840192908401906001016126ed565b5050506001600160a01b039490941692019190915250919050565b60018060a01b03841681528260208201526060604082015260006127546060830184612654565b95945050505050565b6001600160a01b038516815283151560208201526080810161278260408301856124bd565b82606083015295945050505050565b6001600160a01b03868116825285166020820152831515604082015260a081016127be60608301856124bd565b8260808301529695505050505050565b60006060808301868452602086818601526040838187015282875180855260809450848801915083890160005b8281101561283957815180516001600160a01b03168552868101518786015285810151868601528801518885015292860192908501906001016127fb565b50919b9a5050505050505050505050565b6000602080838503121561285d57600080fd5b825167ffffffffffffffff81111561287457600080fd5b8301601f8101851361288557600080fd5b8051612893612150826120c3565b81815260069190911b820183019083810190878311156128b257600080fd5b928401925b828410156124b257604084890312156128d05760008081fd5b6128d861206f565b84516128e3816120e7565b815284860151868201528252604090930192908401906128b7565b8082028115828204841417611aa757611aa7612525565b60008261293257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561294957600080fd5b8151611ed4816121fa565b6000806040838503121561296757600080fd5b50508051602090910151909290915056fea26469706673582212201b89a3df660f333d2e5a5019135860301007c1f45a29a156104037b52a3770ae64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14518,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)12034"
      },
      {
        "astId": 14521,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDebtTokenManager)10132"
      },
      {
        "astId": 14524,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "collTokenManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICollTokenManager)9882"
      },
      {
        "astId": 14527,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "storagePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStoragePool)11041"
      },
      {
        "astId": 14530,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 14533,
        "contract": "contracts/RedemptionOperations.sol:RedemptionOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISortedTroves)10608"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICollTokenManager)9882": {
        "encoding": "inplace",
        "label": "contract ICollTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)10132": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)10608": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)11041": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)12034": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}