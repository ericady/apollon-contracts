{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrove",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromBorrowerOrRedemptionOps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOneTrove",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.CAmount[]",
          "name": "_liquidatedTokens",
          "type": "tuple[]"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "StableCoinBaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_totalStakesSnapshot",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_totalCollateralSnapshot",
          "type": "tuple[]"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_totalStakes",
          "type": "tuple[]"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.CAmount[]",
          "name": "_appliedRewards",
          "type": "tuple[]"
        }
      ],
      "name": "TroveAppliedRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBBase.Status",
          "name": "_closingState",
          "type": "uint8"
        }
      ],
      "name": "TroveClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_collTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "TroveCollChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_redemptionOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "TroveManagerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.CAmount[]",
          "name": "_liquidatedTokens",
          "type": "tuple[]"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "enum IBBase.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "index",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcDecayedStableCoinBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "enum IBBase.Status",
          "name": "closedStatus",
          "type": "uint8"
        }
      ],
      "name": "closeTroveByProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        }
      ],
      "name": "computeICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowedStable",
          "type": "uint256"
        }
      ],
      "name": "decayStableCoinBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_collTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IDebtToken",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "netDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBBase.DebtTokenAmount[]",
          "name": "_debtTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtValue",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStableCoin",
          "type": "bool"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtValue",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStableCoin",
          "type": "bool"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isStableCoin",
          "type": "bool"
        }
      ],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isStableCoin",
          "type": "bool"
        }
      ],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        }
      ],
      "name": "getCollGasCompensation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDebtInUSD",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasCompensation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toLiquidate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toRedistribute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collSurplus",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.RAmount[]",
          "name": "amounts",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "troveCollInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "troveDebtInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "troveDebtInUSDWithoutGasCompensation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "addedColl",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "removedColl",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "addedDebt",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "removedDebt",
          "type": "tuple[]"
        }
      ],
      "name": "getICRIncludingPatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ICR",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isColl",
          "type": "bool"
        }
      ],
      "name": "getLiquidatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        }
      ],
      "name": "getPendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableCoinBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "colls",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_includingStableCoinGasCompensation",
          "type": "bool"
        }
      ],
      "name": "getTroveRepayableDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_includingStableCoinGasCompensation",
          "type": "bool"
        }
      ],
      "name": "getTroveRepayableDebts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "debts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStakeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTroveStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenAddress",
          "type": "address"
        }
      ],
      "name": "getTroveWithdrawableColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveWithdrawableColls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "colls",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_collTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IDebtToken",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "netDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBBase.DebtTokenAmount[]",
          "name": "_debtTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "isTroveActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "lastErrorRedistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "liquidatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.CAmount[]",
          "name": "toRedistribute",
          "type": "tuple[]"
        }
      ],
      "name": "redistributeDebtAndColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redemptionOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "setBaseRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLastFeeOpTimeToNow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoinBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalCollateralSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalRedeemedStable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStableCoinSupply",
          "type": "uint256"
        }
      ],
      "name": "updateStableCoinBaseRateFromRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "totalCollGasCompensation",
          "type": "tuple[]"
        }
      ],
      "name": "updateSystemSnapshots_excludeCollRemainder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2236089b1f13c7cb676ddab5fe2e670d10f22ddb093e8ab0ddaa3ae7f91afdfb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4263345",
    "logsBloom": "0x
    "blockHash": "0x07760cb311314cac19f65fbf3a43f3a7f4d7d0cf04a6a24f2564bce5894f995f",
    "transactionHash": "0x2236089b1f13c7cb676ddab5fe2e670d10f22ddb093e8ab0ddaa3ae7f91afdfb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x2236089b1f13c7cb676ddab5fe2e670d10f22ddb093e8ab0ddaa3ae7f91afdfb",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x07760cb311314cac19f65fbf3a43f3a7f4d7d0cf04a6a24f2564bce5894f995f"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "4263345",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromBorrowerOrRedemptionOps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOneTrove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.CAmount[]\",\"name\":\"_liquidatedTokens\",\"type\":\"tuple[]\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"StableCoinBaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_totalStakesSnapshot\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"tuple[]\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_totalStakes\",\"type\":\"tuple[]\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.CAmount[]\",\"name\":\"_appliedRewards\",\"type\":\"tuple[]\"}],\"name\":\"TroveAppliedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBBase.Status\",\"name\":\"_closingState\",\"type\":\"uint8\"}],\"name\":\"TroveClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_collTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"TroveCollChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_redemptionOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.CAmount[]\",\"name\":\"_liquidatedTokens\",\"type\":\"tuple[]\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"enum IBBase.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"index\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcDecayedStableCoinBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"enum IBBase.Status\",\"name\":\"closedStatus\",\"type\":\"uint8\"}],\"name\":\"closeTroveByProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"computeICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedStable\",\"type\":\"uint256\"}],\"name\":\"decayStableCoinBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_collTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IBBase.DebtTokenAmount[]\",\"name\":\"_debtTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStableCoin\",\"type\":\"bool\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStableCoin\",\"type\":\"bool\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isStableCoin\",\"type\":\"bool\"}],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isStableCoin\",\"type\":\"bool\"}],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"}],\"name\":\"getCollGasCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebtInUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCompensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toRedistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collSurplus\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.RAmount[]\",\"name\":\"amounts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"troveCollInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troveDebtInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troveDebtInUSDWithoutGasCompensation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"addedColl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"removedColl\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"addedDebt\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"removedDebt\",\"type\":\"tuple[]\"}],\"name\":\"getICRIncludingPatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ICR\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"}],\"name\":\"getLiquidatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableCoinBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"colls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includingStableCoinGasCompensation\",\"type\":\"bool\"}],\"name\":\"getTroveRepayableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includingStableCoinGasCompensation\",\"type\":\"bool\"}],\"name\":\"getTroveRepayableDebts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"debts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTroveStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenAddress\",\"type\":\"address\"}],\"name\":\"getTroveWithdrawableColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveWithdrawableColls\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"colls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_collTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"increaseTroveColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IBBase.DebtTokenAmount[]\",\"name\":\"_debtTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isTroveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"lastErrorRedistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"liquidatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.CAmount[]\",\"name\":\"toRedistribute\",\"type\":\"tuple[]\"}],\"name\":\"redistributeDebtAndColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redemptionOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"setBaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLastFeeOpTimeToNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoinBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalCollateralSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRedeemedStable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStableCoinSupply\",\"type\":\"uint256\"}],\"name\":\"updateStableCoinBaseRateFromRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"totalCollGasCompensation\",\"type\":\"tuple[]\"}],\"name\":\"updateSystemSnapshots_excludeCollRemainder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getTroveStakeValue(address)\":{\"params\":{\"_borrower\":\"Address of borrower\"},\"returns\":{\"_0\":\"stakedUSDValue USD value of total staked collaterals of borrower\"}},\"getTroveStakes(address,address)\":{\"params\":{\"_borrower\":\"Address of borrower\",\"_token\":\"Address of collateral token\"},\"returns\":{\"_0\":\"stakes Staked amount of given collateral token of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTroveOwnerToArray(address)\":{\"notice\":\"trove opening + closing*\"},\"getCurrentICR(address)\":{\"notice\":\"collateral ratios*\"},\"getEntireDebtAndColl(address)\":{\"notice\":\"trove debt + coll getters*\"},\"getStableCoinBaseRate()\":{\"notice\":\"Helper*\"},\"getTroveOwnersCount()\":{\"notice\":\"troves status*\"},\"getTroveStakeValue(address)\":{\"notice\":\"Return borrowers staked value in USD\"},\"getTroveStakes(address,address)\":{\"notice\":\"Get Borrower's staked token amount, not in USD value\"},\"increaseTroveColl(address,(address,uint256)[])\":{\"notice\":\"collateral and debt setters*\"},\"redistributeDebtAndColl(address[],(address,bool,uint256)[])\":{\"notice\":\"redistribution*\"},\"updateStakeAndTotalStakes(address[],address)\":{\"notice\":\"collateral stakes*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mock/MockTroveManager.sol\":\"MockTroveManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISortedTroves {\\n  // --- Errors ---\\n\\n  error SizeCantBeZero();\\n  error ListIsFull();\\n  error ListAlreadyContainsNode();\\n  error ListDoesNotContainNode();\\n  error IdCantBeZero();\\n  error CRNotPositive();\\n  error CallerNotBrOrTrContract();\\n\\n  // --- Events ---\\n\\n  event SortedTrovesInitialised(\\n    address _troveManagerAddress,\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress\\n  );\\n  event NodeAdded(address _id, uint _CR);\\n  event NodeRemoved(address _id);\\n\\n  // --- Functions ---\\n\\n  function update(address _id, uint256 _newCR, uint _redeemableDebt, address _prevId, address _nextId) external;\\n\\n  function remove(address _id) external;\\n\\n  function contains(address _id) external view returns (bool);\\n\\n  function isEmpty() external view returns (bool);\\n\\n  function getSize() external view returns (uint256);\\n\\n  function getFirst() external view returns (address);\\n\\n  function getLast() external view returns (address);\\n\\n  function getNext(address _id) external view returns (address);\\n\\n  function getPrev(address _id) external view returns (address);\\n\\n  function getByIndex(uint _index) external view returns (address);\\n\\n  function getUsedCR(address _id) external view returns (uint);\\n\\n  function validInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (bool);\\n\\n  function findInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x208a8dd99f743ee53b781ac03fdfea6e079e13511378800251acfda45b4af41f\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/Mock/MockTroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '../TroveManager.sol';\\n\\n/* Tester contract inherits from TroveManager, and provides external functions \\nfor testing the parent's internal functions. */\\n\\ncontract MockTroveManager is TroveManager {\\n  function computeICR(uint _coll, uint _debt) external pure returns (uint) {\\n    return LiquityMath._computeCR(_coll, _debt);\\n  }\\n\\n  function getCollGasCompensation(uint _coll) external pure returns (uint) {\\n    return _getCollGasCompensation(_coll);\\n  }\\n\\n  function getLiquidatedTokens(address tokenAddress, bool isColl) external view returns (uint) {\\n    return liquidatedTokens[tokenAddress][isColl];\\n  }\\n\\n  function setLastFeeOpTimeToNow() external {\\n    lastFeeOperationTime = block.timestamp;\\n  }\\n\\n  function setBaseRate(uint _baseRate) external {\\n    stableCoinBaseRate = _baseRate;\\n  }\\n}\\n\",\"keccak256\":\"0x68fceb46dab9c2c699eb79c0ab9326ba745fdc552021bf4667efe00ecf0272a7\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ISortedTroves.sol';\\n\\ncontract TroveManager is LiquityBase, Ownable(msg.sender), CheckContract, ITroveManager {\\n  string public constant NAME = 'TroveManager';\\n\\n  // --- Connected contract declarations ---\\n\\n  address public borrowerOperationsAddress;\\n  address public redemptionOperationsAddress;\\n  address public liquidationOperationsAddress;\\n  IStoragePool public storagePool;\\n  IPriceFeed public priceFeed;\\n  ISortedTroves public sortedTroves;\\n\\n  // --- Data structures ---\\n\\n  /*\\n   * Half-life of 12h. 12h = 720 min\\n   * (1/2) = d^720 => d = (1/2)^(1/720)\\n   */\\n  uint public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n  // During bootsrap period redemptions are not allowed\\n  uint public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n  /*\\n   * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n   * Corresponds to (1 / ALPHA) in the white paper.\\n   */\\n  uint public constant BETA = 2;\\n  uint public stableCoinBaseRate;\\n\\n  // The timestamp of the latest fee operation (redemption or new dToken issuance)\\n  uint public lastFeeOperationTime;\\n\\n  // Store the neccessary data for a trove\\n  struct Trove {\\n    Status status;\\n    uint128 arrayIndex;\\n    //\\n    IDebtToken[] debtTokens;\\n    mapping(address => bool) debtsRegistered;\\n    mapping(IDebtToken => uint) debts;\\n    //\\n    address[] collTokens;\\n    mapping(address => bool) collsRegistered;\\n    mapping(address => uint) colls;\\n    //\\n    // the troves stake is depends on the current collateral token prices\\n    // therefore the partial stakes relative to the collateral needs to be stored\\n    mapping(address => uint) stakes; // [collTokenAddress] -> stake\\n  }\\n  mapping(address => Trove) public Troves;\\n\\n  // stakes gets stored relative to the coll token, total stake needs to be calculated on runtime using token prices\\n  // in token amount (not usd)\\n  mapping(address => uint) public totalStakes; // [collTokenAddress] => total system stake, relative to the coll token\\n  mapping(address => uint) public totalStakesSnapshot; // [collTokenAddress] => system stake, taken immediately after the latest liquidation (without default pool / rewards)\\n  mapping(address => uint) public totalCollateralSnapshots; // [collTokenAddress] => system stake, taken immediately after the latest liquidation (including default pool / rewards)\\n\\n  // L_Tokens track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n  // A gain of ( stake * [L_TOKEN[T] - L_TOKEN[T](0)] )\\n  // Where L_TOKEN[T](0) are snapshots of token T for the active Trove taken at the instant the stake was made\\n  //\\n  // in token amount (not usd)\\n  mapping(address => mapping(bool => uint)) public liquidatedTokens; // [tokenAddress][isColl] -> liquidated/redistributed amount, per unit staked\\n  mapping(address => mapping(address => mapping(bool => uint))) public rewardSnapshots; // [user][tokenAddress][isColl] -> value, snapshot amount, per unit staked\\n  mapping(address => mapping(bool => uint)) public lastErrorRedistribution; // [tokenAddress][isColl] -> value, Error trackers for the trove redistribution calculation\\n\\n  // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n  address[] public TroveOwners;\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  ) external onlyOwner {\\n    checkContract(_borrowerOperationsAddress);\\n    checkContract(_redemptionOperationsAddress);\\n    checkContract(_liquidationOperationsAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_sortedTrovesAddress);\\n\\n    borrowerOperationsAddress = _borrowerOperationsAddress;\\n    redemptionOperationsAddress = _redemptionOperationsAddress;\\n    liquidationOperationsAddress = _liquidationOperationsAddress;\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n\\n    emit TroveManagerInitialized(\\n      _borrowerOperationsAddress,\\n      _redemptionOperationsAddress,\\n      _liquidationOperationsAddress,\\n      _storagePoolAddress,\\n      _priceFeedAddress,\\n      _sortedTrovesAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  /**\\n   *\\n   * troves status\\n   *\\n   **/\\n\\n  function getTroveOwnersCount() external view override returns (uint) {\\n    return TroveOwners.length;\\n  }\\n\\n  function getTroveOwners() external view returns (address[] memory) {\\n    return TroveOwners;\\n  }\\n\\n  function getTroveStatus(address _borrower) external view override returns (uint) {\\n    return uint(Troves[_borrower].status);\\n  }\\n\\n  function isTroveActive(address _borrower) external view override returns (bool) {\\n    return Troves[_borrower].status == Status.active;\\n  }\\n\\n  function setTroveStatus(address _borrower, uint _num) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n    Troves[_borrower].status = Status(_num);\\n  }\\n\\n  /**\\n   *\\n   * collateral ratios\\n   *\\n   **/\\n\\n  // Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n  function getCurrentICR(address _borrower) external view override returns (uint ICR, uint currentDebtInUSD) {\\n    uint currentCollInUSD;\\n    (currentCollInUSD, currentDebtInUSD) = _getCurrentTrovesUSDValues(_borrower);\\n    ICR = LiquityMath._computeCR(currentCollInUSD, currentDebtInUSD);\\n    return (ICR, currentDebtInUSD);\\n  }\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view override returns (uint ICR) {\\n    Trove storage _trove = Troves[_borrower];\\n    if (_trove.status != Status.active) return 0;\\n\\n    (uint currentCollInUSD, uint currentDebtInUSD) = _getCurrentTrovesUSDValues(_borrower);\\n\\n    currentCollInUSD += _getCompositeUSD(addedColl);\\n    uint removedCollInUSD = _getCompositeUSD(removedColl);\\n    if (currentCollInUSD < removedCollInUSD) currentCollInUSD = 0;\\n    else currentCollInUSD -= _getCompositeUSD(removedColl);\\n\\n    currentDebtInUSD += _getCompositeUSD(addedDebt);\\n    uint removedDebtInUSD = _getCompositeUSD(removedDebt);\\n    if (currentDebtInUSD < removedDebtInUSD) currentDebtInUSD = 0;\\n    else currentDebtInUSD -= _getCompositeUSD(removedDebt);\\n\\n    return LiquityMath._computeCR(currentCollInUSD, currentDebtInUSD);\\n  }\\n\\n  function _getCompositeUSD(TokenAmount[] memory _amounts) internal view returns (uint inUSD) {\\n    for (uint i = 0; i < _amounts.length; i++)\\n      inUSD += priceFeed.getUSDValue(_amounts[i].tokenAddress, _amounts[i].amount);\\n    return inUSD;\\n  }\\n\\n  function _getCurrentTrovesUSDValues(\\n    address _borrower\\n  ) internal view returns (uint currentCollInUSD, uint currentDebtInUSD) {\\n    Trove storage _trove = Troves[_borrower];\\n\\n    for (uint i = 0; i < _trove.collTokens.length; i++) {\\n      address token = _trove.collTokens[i];\\n\\n      uint pendingRewards = getPendingReward(_borrower, token, true);\\n      currentCollInUSD += priceFeed.getUSDValue(token, _trove.colls[token] + pendingRewards);\\n    }\\n\\n    for (uint i = 0; i < _trove.debtTokens.length; i++) {\\n      IDebtToken token = _trove.debtTokens[i];\\n\\n      uint pendingRewards = getPendingReward(_borrower, address(token), true);\\n      currentDebtInUSD += priceFeed.getUSDValue(address(token), _trove.debts[token] + pendingRewards);\\n    }\\n\\n    return (currentCollInUSD, currentDebtInUSD);\\n  }\\n\\n  /**\\n   *\\n   * collateral stakes\\n   *\\n   **/\\n\\n  // Update borrower's stake based on their latest collateral value\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    TokenAmount[] memory totalStakesCopy = new TokenAmount[](collTokenAddresses.length);\\n    for (uint i = 0; i < collTokenAddresses.length; i++) {\\n      address _collAddress = collTokenAddresses[i];\\n\\n      uint newBorrowerCollStake;\\n      uint borrowersCollAmount = Troves[_borrower].colls[_collAddress];\\n\\n      uint totalCollateralSnapshot = totalCollateralSnapshots[_collAddress];\\n      if (totalCollateralSnapshot == 0) newBorrowerCollStake = borrowersCollAmount;\\n      else {\\n        /*\\n         * The following assert() holds true because:\\n         * - The system always contains >= 1 trove\\n         * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n         * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n         */\\n        uint stakedSnapshot = totalStakesSnapshot[_collAddress];\\n        assert(stakedSnapshot > 0);\\n        newBorrowerCollStake = (borrowersCollAmount * stakedSnapshot) / totalCollateralSnapshot;\\n      }\\n\\n      uint oldBorrowerStake = Troves[_borrower].stakes[_collAddress];\\n      uint newTotalStake = totalStakes[_collAddress] - oldBorrowerStake + newBorrowerCollStake;\\n      totalStakes[_collAddress] = newTotalStake;\\n      totalStakesCopy[i] = TokenAmount(_collAddress, newTotalStake);\\n      Troves[_borrower].stakes[_collAddress] = newBorrowerCollStake;\\n    }\\n\\n    emit TotalStakesUpdated(totalStakesCopy);\\n  }\\n\\n  // Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    for (uint i = 0; i < collTokenAddresses.length; i++) {\\n      address tokenAddress = collTokenAddresses[i];\\n\\n      totalStakes[tokenAddress] -= Troves[_borrower].stakes[tokenAddress];\\n      Troves[_borrower].stakes[tokenAddress] = 0;\\n    }\\n  }\\n\\n  /*\\n   * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n   * Used in a liquidation sequence.\\n   */\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external override {\\n    TokenAmount[] memory _totalStakesSnapshot = new TokenAmount[](totalCollGasCompensation.length);\\n    TokenAmount[] memory _totalCollateralSnapshots = new TokenAmount[](totalCollGasCompensation.length);\\n\\n    // totalCollGasCompensation array included every available coll in the system, even if there is 0 gas compensation\\n    for (uint i = 0; i < totalCollGasCompensation.length; i++) {\\n      address tokenAddress = totalCollGasCompensation[i].tokenAddress;\\n\\n      uint totalStake = totalStakes[tokenAddress];\\n      totalStakesSnapshot[tokenAddress] = totalStake;\\n      _totalStakesSnapshot[i] = TokenAmount(tokenAddress, totalStake);\\n\\n      uint totalCollateralSnapshot = storagePool.getValue(tokenAddress, true, PoolType.Active) +\\n        storagePool.getValue(tokenAddress, true, PoolType.Default) -\\n        totalCollGasCompensation[i].amount;\\n      totalCollateralSnapshots[tokenAddress] = totalCollateralSnapshot;\\n      _totalCollateralSnapshots[i] = TokenAmount(tokenAddress, totalCollateralSnapshot);\\n    }\\n\\n    emit SystemSnapshotsUpdated(_totalStakesSnapshot, _totalCollateralSnapshots);\\n  }\\n\\n  /**\\n   * @notice Get Borrower's staked token amount, not in USD value\\n   * @param _borrower Address of borrower\\n   * @param _token Address of collateral token\\n   * @return stakes Staked amount of given collateral token of user\\n   */\\n  function getTroveStakes(address _borrower, address _token) external view override returns (uint) {\\n    return Troves[_borrower].stakes[_token];\\n  }\\n\\n  /**\\n   * @notice Return borrowers staked value in USD\\n   * @param _borrower Address of borrower\\n   * @return stakedUSDValue USD value of total staked collaterals of borrower\\n   */\\n  function getTroveStakeValue(address _borrower) external view override returns (uint) {\\n    return _calculateTrovesStake(_borrower);\\n  }\\n\\n  // the current stake of the trove is depended on the current collateral prices\\n  function _calculateTrovesStake(address _borrower) internal view returns (uint stake) {\\n    Trove storage trove = Troves[_borrower];\\n\\n    for (uint i = 0; i < trove.collTokens.length; i++) {\\n      address tokenAddress = trove.collTokens[i];\\n      stake += priceFeed.getUSDValue(tokenAddress, trove.stakes[tokenAddress]);\\n    }\\n\\n    return stake;\\n  }\\n\\n  /**\\n   *\\n   * redistribution\\n   *\\n   **/\\n\\n  function redistributeDebtAndColl(\\n    address[] memory collTokenAddresses,\\n    CAmount[] memory toRedistribute\\n  ) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    /*\\n     * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n     * error correction, to keep the cumulative error low in the running totals:\\n     *\\n     * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n     * function was called.\\n     * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n     * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n     * 4) Store these errors for use in the next correction when this function is called.\\n     * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n     */\\n\\n    uint totalStake = _getTotalStakesValue(collTokenAddresses);\\n    CAmount[] memory _liquidatedTokens = new CAmount[](toRedistribute.length);\\n\\n    for (uint i = 0; i < toRedistribute.length; i++) {\\n      CAmount memory redistributeEntry = toRedistribute[i];\\n      if (redistributeEntry.amount == 0) continue;\\n\\n      // Get the per-unit-staked terms\\n      uint numerator = redistributeEntry.amount *\\n        DECIMAL_PRECISION +\\n        lastErrorRedistribution[redistributeEntry.tokenAddress][redistributeEntry.isColl];\\n      uint rewardPerUnitStaked = numerator / totalStake;\\n\\n      lastErrorRedistribution[redistributeEntry.tokenAddress][redistributeEntry.isColl] =\\n        numerator -\\n        (rewardPerUnitStaked * totalStake);\\n\\n      // Add per-unit-staked terms to the running totals\\n      uint liquidated = liquidatedTokens[redistributeEntry.tokenAddress][redistributeEntry.isColl] +\\n        rewardPerUnitStaked;\\n\\n      liquidatedTokens[redistributeEntry.tokenAddress][redistributeEntry.isColl] = liquidated;\\n      _liquidatedTokens[i] = CAmount(redistributeEntry.tokenAddress, redistributeEntry.isColl, liquidated);\\n\\n      storagePool.transferBetweenTypes(\\n        redistributeEntry.tokenAddress,\\n        redistributeEntry.isColl,\\n        PoolType.Active,\\n        PoolType.Default,\\n        redistributeEntry.amount\\n      );\\n    }\\n\\n    emit LTermsUpdated(_liquidatedTokens);\\n  }\\n\\n  function _getTotalStakesValue(address[] memory collTokenAddresses) internal view returns (uint stake) {\\n    for (uint i = 0; i < collTokenAddresses.length; i++) {\\n      address tokenAddress = collTokenAddresses[i];\\n      stake += priceFeed.getUSDValue(tokenAddress, totalStakes[tokenAddress]);\\n    }\\n\\n    return stake;\\n  }\\n\\n  // Get the borrower's pending accumulated rewards, earned by their stake through their redistribution\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) public view returns (uint pendingReward) {\\n    uint snapshotValue = rewardSnapshots[_borrower][_tokenAddress][_isColl];\\n    uint rewardPerUnitStaked = liquidatedTokens[_tokenAddress][_isColl] - snapshotValue;\\n    if (rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) return 0;\\n\\n    uint trovesStakeInUSD = _calculateTrovesStake(_borrower);\\n    pendingReward = (trovesStakeInUSD * rewardPerUnitStaked) / DECIMAL_PRECISION;\\n  }\\n\\n  function applyPendingRewards(address _borrower) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n    _requireTroveIsActive(_borrower);\\n\\n    Trove storage _trove = Troves[_borrower];\\n    CAmount[] memory appliedRewards = new CAmount[](_trove.collTokens.length + _trove.debtTokens.length);\\n\\n    // coll rewards\\n    for (uint i = 0; i < _trove.collTokens.length; i++) {\\n      address token = _trove.collTokens[i];\\n\\n      uint pendingRewards = getPendingReward(_borrower, token, true);\\n      appliedRewards[i] = CAmount(token, true, pendingRewards);\\n      if (pendingRewards == 0) continue;\\n\\n      _trove.colls[token] += pendingRewards;\\n      storagePool.transferBetweenTypes(token, true, PoolType.Default, PoolType.Active, pendingRewards);\\n    }\\n\\n    // debt rewards\\n    for (uint i = 0; i < _trove.debtTokens.length; i++) {\\n      IDebtToken token = _trove.debtTokens[i];\\n      address tokenAddress = address(token);\\n\\n      uint pendingRewards = getPendingReward(_borrower, tokenAddress, false);\\n      appliedRewards[_trove.collTokens.length + i] = CAmount(tokenAddress, false, pendingRewards);\\n      if (pendingRewards == 0) continue;\\n\\n      _trove.debts[token] += pendingRewards;\\n      storagePool.transferBetweenTypes(tokenAddress, false, PoolType.Default, PoolType.Active, pendingRewards);\\n    }\\n\\n    emit TroveAppliedRewards(_borrower, appliedRewards);\\n    _updateTroveRewardSnapshots(_borrower);\\n  }\\n\\n  // Update borrower's snapshots to reflect the current values\\n  function updateTroveRewardSnapshots(address _borrower) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n    return _updateTroveRewardSnapshots(_borrower);\\n  }\\n\\n  function _updateTroveRewardSnapshots(address _borrower) internal {\\n    Trove storage _trove = Troves[_borrower];\\n    CAmount[] memory _troveSnapshots = new CAmount[](_trove.collTokens.length + _trove.debtTokens.length);\\n\\n    for (uint i = 0; i < _trove.debtTokens.length; i++) {\\n      address token = address(_trove.debtTokens[i]);\\n\\n      uint snapshot = liquidatedTokens[token][false];\\n      rewardSnapshots[_borrower][token][false] = snapshot;\\n      _troveSnapshots[i] = CAmount(token, false, snapshot);\\n    }\\n    for (uint i = 0; i < _trove.collTokens.length; i++) {\\n      address token = _trove.collTokens[i];\\n\\n      uint snapshot = liquidatedTokens[token][true];\\n      rewardSnapshots[_borrower][token][true] = snapshot;\\n      _troveSnapshots[_trove.debtTokens.length + i] = CAmount(token, true, snapshot);\\n    }\\n\\n    emit TroveSnapshotsUpdated(_troveSnapshots);\\n  }\\n\\n  /**\\n   *\\n   * collateral and debt setters\\n   *\\n   **/\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    Trove storage trove = Troves[_borrower];\\n    address[] memory collTokenAddresses = new address[](_collTokenAmounts.length);\\n    for (uint i = 0; i < _collTokenAmounts.length; i++) {\\n      address tokenAddress = _collTokenAmounts[i].tokenAddress;\\n      trove.colls[tokenAddress] += _collTokenAmounts[i].amount;\\n\\n      if (!trove.collsRegistered[tokenAddress]) {\\n        trove.collsRegistered[tokenAddress] = true;\\n        trove.collTokens.push(tokenAddress);\\n      }\\n      collTokenAddresses[i] = tokenAddress;\\n    }\\n\\n    emit TroveCollChanged(_borrower, collTokenAddresses);\\n  }\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    Trove storage trove = Troves[_borrower];\\n    address[] memory collTokenAddresses = new address[](_collTokenAmounts.length);\\n\\n    for (uint i = 0; i < _collTokenAmounts.length; i++) {\\n      address tokenAddress = _collTokenAmounts[i].tokenAddress;\\n      trove.colls[tokenAddress] -= _collTokenAmounts[i].amount;\\n      collTokenAddresses[i] = tokenAddress;\\n    }\\n\\n    emit TroveCollChanged(_borrower, collTokenAddresses);\\n  }\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    Trove storage trove = Troves[_borrower];\\n    for (uint i = 0; i < _debtTokenAmounts.length; i++) {\\n      IDebtToken debtToken = _debtTokenAmounts[i].debtToken;\\n      trove.debts[debtToken] += _debtTokenAmounts[i].netDebt;\\n\\n      if (!trove.debtsRegistered[address(debtToken)]) {\\n        trove.debtsRegistered[address(debtToken)] = true;\\n        trove.debtTokens.push(debtToken);\\n      }\\n    }\\n  }\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    Trove storage trove = Troves[_borrower];\\n    for (uint i = 0; i < _debtTokenAmounts.length; i++) {\\n      trove.debts[_debtTokenAmounts[i].debtToken] -= _debtTokenAmounts[i].netDebt;\\n    }\\n  }\\n\\n  /**\\n   *\\n   * trove debt + coll getters\\n   *\\n   **/\\n\\n  // Return the Troves entire debt and coll, including pending rewards from redistributions.\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    )\\n  {\\n    Trove storage trove = Troves[_borrower];\\n    amounts = new RAmount[](trove.collTokens.length + trove.debtTokens.length);\\n\\n    // initialize empty coll tokens\\n    for (uint i = 0; i < trove.collTokens.length; i++) {\\n      address token = address(trove.collTokens[i]);\\n      amounts[i] = RAmount(token, true, trove.colls[trove.collTokens[i]], 0, 0, 0, 0, 0, 0);\\n    }\\n\\n    // initialize empty debt tokens and find the stable entry\\n    uint stableCoinIndex;\\n    for (uint i = 0; i < trove.debtTokens.length; i++) {\\n      if (trove.debtTokens[i].isStableCoin()) stableCoinIndex = i + trove.collTokens.length;\\n\\n      address token = address(trove.debtTokens[i]);\\n      amounts[i + trove.collTokens.length] = RAmount(token, false, trove.debts[trove.debtTokens[i]], 0, 0, 0, 0, 0, 0);\\n    }\\n\\n    // applying rewards (from default pool) + adding gas compensation + toLiquidate\\n    for (uint i = 0; i < amounts.length; i++) {\\n      RAmount memory amountEntry = amounts[i];\\n\\n      amountEntry.pendingReward = getPendingReward(_borrower, amountEntry.tokenAddress, amountEntry.isColl);\\n      uint totalAmount = amountEntry.amount + amountEntry.pendingReward;\\n      uint InUSD = priceFeed.getUSDValue(amountEntry.tokenAddress, totalAmount);\\n\\n      if (amountEntry.isColl) {\\n        amountEntry.gasCompensation = _getCollGasCompensation(totalAmount);\\n        amountEntry.toLiquidate = totalAmount - amountEntry.gasCompensation;\\n        troveCollInUSD += InUSD;\\n      } else {\\n        if (i == stableCoinIndex) {\\n          // stable coin gas compensation should not be liquidated, it will be paid out as reward for the liquidator\\n          amountEntry.toLiquidate = totalAmount - STABLE_COIN_GAS_COMPENSATION;\\n          troveDebtInUSDWithoutGasCompensation += priceFeed.getUSDValue(\\n            amountEntry.tokenAddress,\\n            amountEntry.toLiquidate\\n          );\\n        } else {\\n          amountEntry.toLiquidate = totalAmount;\\n          troveDebtInUSDWithoutGasCompensation += InUSD;\\n        }\\n\\n        troveDebtInUSD += InUSD;\\n      }\\n    }\\n\\n    return (amounts, troveCollInUSD, troveDebtInUSD, troveDebtInUSDWithoutGasCompensation);\\n  }\\n\\n  function getTroveDebt(address _borrower) public view override returns (TokenAmount[] memory) {\\n    Trove storage trove = Troves[_borrower];\\n    if (trove.status != Status.active) return new TokenAmount[](0);\\n\\n    TokenAmount[] memory debts = new TokenAmount[](trove.debtTokens.length);\\n    for (uint i = 0; i < debts.length; i++)\\n      debts[i] = TokenAmount(address(trove.debtTokens[i]), trove.debts[trove.debtTokens[i]]);\\n\\n    return debts;\\n  }\\n\\n  function getTroveRepayableDebt(\\n    address _borrower,\\n    address _debtTokenAddress,\\n    bool _includingStableCoinGasCompensation\\n  ) external view override returns (uint amount) {\\n    if (Troves[_borrower].status != Status.active) return 0;\\n\\n    return _getTroveRepayableDebt(\\n      _borrower,\\n      _debtTokenAddress,\\n      _includingStableCoinGasCompensation\\n    );\\n  }\\n\\n  function getTroveRepayableDebts(\\n    address _borrower,\\n    bool _includingStableCoinGasCompensation\\n  ) external view override returns (TokenAmount[] memory debts) {\\n    Trove storage trove = Troves[_borrower];\\n    if (trove.status != Status.active) return new TokenAmount[](0);\\n\\n    address debtTokenAddress;\\n    debts = new TokenAmount[](trove.debtTokens.length);\\n    for (uint i = 0; i < debts.length; i++) {\\n      debtTokenAddress = address(trove.debtTokens[i]);\\n      debts[i] = TokenAmount(\\n        debtTokenAddress,\\n        _getTroveRepayableDebt(\\n          _borrower,\\n          debtTokenAddress,\\n          _includingStableCoinGasCompensation\\n        )\\n      );\\n    }\\n\\n    return debts;\\n  }\\n\\n  function _getTroveRepayableDebt(\\n    address _borrower,\\n    address _debtTokenAddress,\\n    bool _includingStableCoinGasCompensation\\n  ) internal view returns (uint amount) {\\n    Trove storage trove = Troves[_borrower];\\n    if (trove.status != Status.active) return 0;\\n\\n    return trove.debts[IDebtToken(_debtTokenAddress)]\\n      + getPendingReward(_borrower, _debtTokenAddress, false)\\n      - (!_includingStableCoinGasCompensation && IDebtToken(_debtTokenAddress).isStableCoin()\\n        ? STABLE_COIN_GAS_COMPENSATION\\n        : 0\\n      );\\n  }\\n\\n  function getTroveColl(address _borrower) public view override returns (TokenAmount[] memory colls) {\\n    Trove storage trove = Troves[_borrower];\\n    if (trove.status != Status.active) return new TokenAmount[](0);\\n\\n    colls = new TokenAmount[](trove.collTokens.length);\\n    for (uint i = 0; i < colls.length; i++)\\n      colls[i] = TokenAmount(trove.collTokens[i], trove.colls[trove.collTokens[i]]);\\n\\n    return colls;\\n  }\\n\\n  function getTroveWithdrawableColl(\\n    address _borrower,\\n    address _collTokenAddress\\n  ) external view override returns (uint amount) {\\n    Trove storage trove = Troves[_borrower];\\n    if (trove.status != Status.active) return 0;\\n\\n    return trove.colls[_collTokenAddress] + getPendingReward(_borrower, _collTokenAddress, true);\\n  }\\n\\n  function getTroveWithdrawableColls(address _borrower) external view override returns (TokenAmount[] memory colls) {\\n    colls = getTroveColl(_borrower);\\n    for (uint i = 0; i < colls.length; i++) colls[i].amount += getPendingReward(_borrower, colls[i].tokenAddress, true);\\n\\n    return colls;\\n  }\\n\\n  /**\\n   *\\n   * trove opening + closing\\n   *\\n   **/\\n\\n  // Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n  /* Max array size is 2**128 - 1, i.e. ~3e30 troves. 3e30 LUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n  function addTroveOwnerToArray(address _borrower) external override returns (uint128 index) {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    // Push the Troveowner to the array\\n    TroveOwners.push(_borrower);\\n\\n    // Record the index of the new Troveowner on their Trove struct\\n    index = uint128(TroveOwners.length - 1);\\n    Troves[_borrower].arrayIndex = index;\\n\\n    return index;\\n  }\\n\\n  function closeTroveByProtocol(\\n    address[] memory collTokenAddresses,\\n    address _borrower,\\n    Status closedStatus\\n  ) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    assert(closedStatus != Status.nonExistent && closedStatus != Status.active);\\n\\n    uint numOfOwners = TroveOwners.length;\\n    if (numOfOwners <= 1) revert OnlyOneTrove();\\n\\n    Trove storage trove = Troves[_borrower];\\n    trove.status = closedStatus;\\n    for (uint i = 0; i < trove.debtTokens.length; i++) trove.debts[trove.debtTokens[i]] = 0;\\n    for (uint i = 0; i < trove.collTokens.length; i++) trove.colls[trove.collTokens[i]] = 0;\\n    for (uint i = 0; i < collTokenAddresses.length; i++) trove.stakes[collTokenAddresses[i]] = 0;\\n    delete trove.debtTokens;\\n    delete trove.collTokens;\\n\\n    _removeTroveOwner(_borrower, numOfOwners);\\n    sortedTroves.remove(_borrower);\\n    emit TroveClosed(_borrower, closedStatus);\\n  }\\n\\n  /*\\n   * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n   * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n   */\\n  function _removeTroveOwner(address _borrower, uint _length) internal {\\n    Status troveStatus = Troves[_borrower].status;\\n    // It\\u2019s set in caller function `_closeTrove`\\n    assert(troveStatus != Status.nonExistent && troveStatus != Status.active);\\n\\n    uint128 index = Troves[_borrower].arrayIndex;\\n\\n    assert(index <= _length - 1);\\n\\n    address addressToMove = TroveOwners[_length - 1];\\n\\n    TroveOwners[index] = addressToMove;\\n    Troves[addressToMove].arrayIndex = index;\\n    emit TroveIndexUpdated(addressToMove, index);\\n\\n    TroveOwners.pop();\\n  }\\n\\n  /**\\n   *\\n   * Helper\\n   *\\n   **/\\n\\n  function getStableCoinBaseRate() external view override returns (uint) {\\n    return stableCoinBaseRate;\\n  }\\n\\n  function getBorrowingRate(bool isStableCoin) public view override returns (uint) {\\n    if (!isStableCoin) return BORROWING_FEE_FLOOR;\\n    return _calcBorrowingRate(stableCoinBaseRate);\\n  }\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) public view override returns (uint) {\\n    if (!isStableCoin) return BORROWING_FEE_FLOOR;\\n    return _calcBorrowingRate(calcDecayedStableCoinBaseRate());\\n  }\\n\\n  function _calcBorrowingRate(uint _stableCoinBaseRate) internal pure returns (uint) {\\n    return LiquityMath._min(BORROWING_FEE_FLOOR + _stableCoinBaseRate, MAX_BORROWING_FEE);\\n  }\\n\\n  function getBorrowingFee(uint _debtValue, bool isStableCoin) external view override returns (uint) {\\n    return _calcBorrowingFee(getBorrowingRate(isStableCoin), _debtValue);\\n  }\\n\\n  function getBorrowingFeeWithDecay(uint _debtValue, bool isStableCoin) external view override returns (uint) {\\n    return _calcBorrowingFee(getBorrowingRateWithDecay(isStableCoin), _debtValue);\\n  }\\n\\n  function _calcBorrowingFee(uint _borrowingRate, uint _debtValue) internal pure returns (uint) {\\n    return (_borrowingRate * _debtValue) / DECIMAL_PRECISION;\\n  }\\n\\n  // Updates the stableCoinBaseRate state variable based on time elapsed since the last redemption or stable borrowing operation.\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    if (borrowedStable == 0) return; // only decay the stableCoinBaseRate if stable was borrowed (not stocks)\\n\\n    uint decayedStableCoinBaseRate = calcDecayedStableCoinBaseRate();\\n    assert(decayedStableCoinBaseRate <= DECIMAL_PRECISION); // The stableCoinBaseRate can decay to 0\\n    _updateLastFeeOpTime(decayedStableCoinBaseRate);\\n  }\\n\\n  /*\\n   * This function has two impacts on the stableCoinBaseRate state variable:\\n   * 1) decays the stableCoinBaseRate based on time passed since last redemption or stable coin borrowing operation.\\n   * then,\\n   * 2) increases the stableCoinBaseRate based on the amount redeemed, as a proportion of total supply\\n   */\\n  function updateStableCoinBaseRateFromRedemption(\\n    uint _totalRedeemedStable,\\n    uint _totalStableCoinSupply\\n  ) external override {\\n    _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps();\\n\\n    uint decayedStableCoinBaseRate = calcDecayedStableCoinBaseRate();\\n    uint redeemedStableFraction = (_totalRedeemedStable * DECIMAL_PRECISION) / _totalStableCoinSupply;\\n\\n    uint newStableCoinBaseRate = LiquityMath._min(\\n      decayedStableCoinBaseRate + (redeemedStableFraction / BETA),\\n      DECIMAL_PRECISION\\n    ); // cap stableCoinBaseRate at a maximum of 100%\\n    assert(newStableCoinBaseRate > 0); // Base rate is always non-zero after redemption\\n    _updateLastFeeOpTime(newStableCoinBaseRate);\\n  }\\n\\n  // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n  function _updateLastFeeOpTime(uint newStableCoinBaseRate) internal {\\n    stableCoinBaseRate = newStableCoinBaseRate; // Update the StableCoinBaseRate state variable\\n    emit StableCoinBaseRateUpdated(newStableCoinBaseRate);\\n\\n    uint timePassed = block.timestamp - lastFeeOperationTime;\\n    if (timePassed >= 1 minutes) {\\n      lastFeeOperationTime = block.timestamp;\\n      emit LastFeeOpTimeUpdated(block.timestamp);\\n    }\\n  }\\n\\n  function calcDecayedStableCoinBaseRate() public view override returns (uint) {\\n    uint minutesPassed = _minutesPassedSinceLastFeeOp();\\n    uint decayFactor = LiquityMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n\\n    return (stableCoinBaseRate * decayFactor) / DECIMAL_PRECISION;\\n  }\\n\\n  function _minutesPassedSinceLastFeeOp() internal view returns (uint) {\\n    return (block.timestamp - lastFeeOperationTime) / 1 minutes;\\n  }\\n\\n  function _requireCallerIsBorrowerOpsOrRedemptionOpsOrLiquidationOps() internal view {\\n    if (\\n      msg.sender != borrowerOperationsAddress &&\\n      msg.sender != redemptionOperationsAddress &&\\n      msg.sender != liquidationOperationsAddress\\n    ) revert NotFromBorrowerOrRedemptionOps();\\n  }\\n\\n  function _requireTroveIsActive(address _borrower) internal view {\\n    if (Troves[_borrower].status != Status.active) revert InvalidTrove();\\n  }\\n}\\n\",\"keccak256\":\"0xe01845d8a40c0500803a94ceeeb82f7dc892e1bbbc3ffcf0faea3eae05bc18ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614bad80620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106104685760003560e01c8063756b253e1161024c578063bc3ce8c411610146578063e240885e116100c3578063ec671c8311610087578063ec671c8314610ae2578063f2fde38b14610aec578063f92d343314610632578063fa973daa14610aff578063fb746c6a14610b1257600080fd5b8063e240885e14610a8c578063e5dc45a214610a9f578063e62688a314610ab2578063e67729e314610ac5578063e853753414610acf57600080fd5b8063d317458f1161010a578063d317458f14610a2a578063d380a37c14610a3d578063d66a255314610a46578063ddbeb71414610a59578063df349ed514610a6c57600080fd5b8063bc3ce8c4146109d8578063c317c460146109eb578063c35bc550146109fe578063c450952014610a08578063c7b5548114610a1b57600080fd5b80639bfc8110116101d4578063b22b0bcf11610198578063b22b0bcf1461094f578063b311d2e214610957578063b3e995381461096a578063b7f8cf9b146109a2578063b91af97c146109b557600080fd5b80639bfc8110146108be578063a3f4df7e146108d1578063a537896f14610909578063ae9187541461091c578063af3700dc1461092f57600080fd5b80638d63c6651161021b5780638d63c6651461086e5780638da5cb5b1461087e57806392da1bc61461088f578063991336b2146108a25780639b26013b146108b557600080fd5b8063756b253e14610826578063794e57241461083957806382fe3eb9146108485780638918b9e11461085b57600080fd5b80632be2615a116103685780635d6b480f116102e5578063701deb68116102a9578063701deb68146107ac578063715018a6146107e957806372fe25aa146107f157806373b1029614610800578063741bef1a1461081357600080fd5b80635d6b480f1461071257806367ab6b67146107255780636a5ab297146107385780636cfb6bf9146107585780636ef643381461076b57600080fd5b80634870dd9a1161032c5780634870dd9a146106c257806349eefeee146106ca578063502afb04146106d25780635733d58f146106f057806359138f9a146106ff57600080fd5b80632be2615a146106405780633122dfd4146106535780633735aa20146106845780633fd5c85a146106a7578063480cd578146106af57600080fd5b8063154eada4116103f657806321e37801116103ba57806321e37801146105d657806324092669146105e95780632767bf64146105f757806327fb7d891461060a57806328d28b5b1461063257600080fd5b8063154eada41461055d57806315d549f11461057057806318e730281461059b5780631bbb375c146105ae5780631d08837b146105c357600080fd5b80630b0765571161043d5780630b076557146104f15780630c13ad6e14610504578063107192911461051757806310e7cc811461052a578063129c4c611461054a57600080fd5b8061e8031461046d578063043782fb146104ab578063071a7541146104b657806309230ad3146104be575b600080fd5b61049861047b366004613fa3565b600d60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6104b442600855565b005b610498600281565b6104d973f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020016104a2565b6104b46104ff366004613fdc565b610b3d565b6104b4610512366004614120565b610ed4565b6104b46105253660046141ee565b610f8e565b61053d610538366004613fa3565b6112a0565b6040516104a29190614271565b610498610558366004614284565b611418565b61049861056b3660046142a6565b61142b565b61058361057e366004613fdc565b611504565b6040516001600160801b0390911681526020016104a2565b6104986105a93660046142f1565b6115a3565b6105b661169f565b6040516104a291906143e9565b6104b46105d13660046143fc565b600755565b6104986105e4366004613fdc565b611701565b61049866b1a2bc2ec5000081565b6104b4610605366004614120565b61172e565b61061d610618366004613fdc565b611964565b604080519283526020830191909152016104a2565b6104986611c37937e0800081565b6002546104d9906001600160a01b031681565b6104986106613660046142a6565b600e60209081526000938452604080852082529284528284209052825290205481565b610697610692366004613fdc565b611988565b60405190151581526020016104a2565b600754610498565b61053d6106bd366004613fdc565b6119c0565b61049860c881565b601054610498565b6106db610bb881565b60405163ffffffff90911681526020016104a2565b6104986714d1120d7b16000081565b6104b461070d366004614415565b611b74565b6104b461072036600461450e565b611e31565b61049861073336600461453a565b611e86565b610498610746366004613fdc565b600c6020526000908152604090205481565b6104b461076636600461455f565b611e9a565b61079e610779366004613fdc565b60096020526000908152604090205460ff81169061010090046001600160801b031682565b6040516104a292919061460b565b6104986107ba36600461462f565b6001600160a01b0391821660009081526009602090815260408083209390941682526007909201909152205490565b6104b4611fa6565b610498670de0b6b3a764000081565b6104b461080e366004614284565b611fba565b6005546104d9906001600160a01b031681565b6104d96108343660046143fc565b612039565b610498670f43fc2c04ee000081565b6104b4610856366004613fdc565b612063565b6104b461086936600461465d565b612077565b610498680ad78ebc5ac620000081565b6000546001600160a01b03166104d9565b6104b461089d3660046143fc565b612311565b6104986108b036600461462f565b612355565b61049860075481565b6104b46108cc3660046146b9565b6123cd565b6108fc6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6040516104a29190614783565b6104986109173660046143fc565b6124f9565b6006546104d9906001600160a01b031681565b61049861093d366004613fdc565b600b6020526000908152604090205481565b610498612504565b6104b46109653660046147d1565b61254f565b610498610978366004613fa3565b6001600160a01b03919091166000908152600d602090815260408083209315158352929052205490565b6001546104d9906001600160a01b031681565b6109c86109c3366004613fdc565b6126b0565b6040516104a29493929190614820565b61053d6109e6366004613fdc565b612c57565b6104986109f936600461453a565b612cde565b6104986212750081565b610498610a16366004613fdc565b612cec565b610498670ddd4b8c6c7d70d881565b6104b4610a383660046147d1565b612cf7565b61049860085481565b61053d610a54366004613fdc565b612e92565b6004546104d9906001600160a01b031681565b610498610a7a366004613fdc565b600a6020526000908152604090205481565b6104b4610a9a3660046146b9565b613013565b610498610aad3660046148d3565b6130c7565b610498610ac03660046148d3565b6130e7565b6106db620f424081565b6003546104d9906001600160a01b031681565b6106db6207a12081565b6104b4610afa366004613fdc565b61310c565b610498610b0d3660046142a6565b61314c565b610498610b20366004613fa3565b600f60209081526000928352604080842090915290825290205481565b610b45613195565b610b4e816131f0565b6001600160a01b038116600090815260096020526040812060018101546004820154919291610b7d9190614906565b6001600160401b03811115610b9457610b94613ff9565b604051908082528060200260200182016040528015610bdf57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610bb25790505b50905060005b6004830154811015610d2e576000836004018281548110610c0857610c08614919565b60009182526020822001546001600160a01b03169150610c2a8683600161142b565b90506040518060600160405280836001600160a01b0316815260200160011515815260200182815250848481518110610c6557610c65614919565b602002602001018190525080600003610c7f575050610d1c565b6001600160a01b038216600090815260068601602052604081208054839290610ca9908490614906565b909155505060048054604051632f5ed88d60e11b81526001600160a01b0390911691635ebdb11a91610ce7918691600191829160009189910161493f565b600060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b5050505050505b80610d2681614981565b915050610be5565b5060005b6001830154811015610e8c576000836001018281548110610d5557610d55614919565b60009182526020822001546001600160a01b031691508190610d7887838361142b565b604080516060810182526001600160a01b0385168152600060208201529081018290526004880154919250908690610db1908790614906565b81518110610dc157610dc1614919565b602002602001018190525080600003610ddc57505050610e7a565b6001600160a01b038316600090815260038701602052604081208054839290610e06908490614906565b909155505060048054604051632f5ed88d60e11b81526001600160a01b0390911691635ebdb11a91610e44918691600091600191839189910161493f565b600060405180830381600087803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b505050505050505b80610e8481614981565b915050610d32565b507fda8ffab61fa593ea6420900af565f92a0767a66267f33bca2da03984f7e804678382604051610ebe9291906149eb565b60405180910390a1610ecf8361323d565b505050565b610edc613195565b60005b8251811015610ecf576000838281518110610efc57610efc614919565b6020908102919091018101516001600160a01b03808616600090815260098452604080822092841682526007909201845281812054600a909452908120805492945091610f4a908490614a0f565b90915550506001600160a01b038084166000908152600960209081526040808320949093168252600790930190925281205580610f8681614981565b915050610edf565b600081516001600160401b03811115610fa957610fa9613ff9565b604051908082528060200260200182016040528015610fee57816020015b6040805180820190915260008082526020820152815260200190600190039081610fc75790505b509050600082516001600160401b0381111561100c5761100c613ff9565b60405190808252806020026020018201604052801561105157816020015b604080518082019091526000808252602082015281526020019060019003908161102a5790505b50905060005b835181101561126157600084828151811061107457611074614919565b602090810291909101810151516001600160a01b0381166000818152600a8452604080822054600b86529181902082905580518082019091529182529281018390528651919350908690859081106110ce576110ce614919565b602002602001018190525060008684815181106110ed576110ed614919565b60209081029190910181015101516004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161112e918891600191829101614a22565b602060405180830381865afa15801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190614a47565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f3500916111a391899160019160009101614a22565b602060405180830381865afa1580156111c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e49190614a47565b6111ee9190614906565b6111f89190614a0f565b6001600160a01b0384166000818152600c6020908152604091829020849055815180830190925291815290810182905286519192509086908690811061124057611240614919565b6020026020010181905250505050808061125990614981565b915050611057565b507f0b113662e7f3724dcab94c25a8a8a1502a01b92efa7b717d154889c962f0e5728282604051611293929190614a60565b60405180910390a1505050565b6001600160a01b03821660009081526009602052604090206060906001815460ff1660048111156112d3576112d36145e1565b1461131e576040805160008082526020820190925290611315565b60408051808201909152600080825260208201528152602001906001900390816112ee5790505b50915050611412565b60018101546000906001600160401b0381111561133d5761133d613ff9565b60405190808252806020026020018201604052801561138257816020015b604080518082019091526000808252602082015281526020019060019003908161135b5790505b50925060005b835181101561140e578260010181815481106113a6576113a6614919565b60009182526020918290200154604080518082019091526001600160a01b0390911680825293509081016113db888589613497565b8152508482815181106113f0576113f0614919565b6020026020010181905250808061140690614981565b915050611388565b5050505b92915050565b60006114248383613592565b9392505050565b6001600160a01b038084166000908152600e6020908152604080832093861680845293825280832085151580855290835281842054948452600d83528184209084529091528120549091908290611483908390614a0f565b90508015806114bf575060016001600160a01b03871660009081526009602052604090205460ff1660048111156114bc576114bc6145e1565b14155b156114cf57600092505050611424565b60006114da876135c8565b9050670de0b6b3a76400006114ef8383614a85565b6114f99190614ab2565b979650505050505050565b600061150e613195565b601080546001808201835560008390527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180546001600160a01b0319166001600160a01b03861617905590546115679190614a0f565b6001600160a01b039290921660009081526009602052604090208054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03851660009081526009602052604081206001815460ff1660048111156115d3576115d36145e1565b146115e2576000915050611696565b6000806115ee896136bd565b915091506115fb886138f8565b6116059083614906565b91506000611612886138f8565b905080831015611625576000925061163b565b61162e886138f8565b6116389084614a0f565b92505b611644876138f8565b61164e9083614906565b9150600061165b876138f8565b90508083101561166e5760009250611684565b611677876138f8565b6116819084614a0f565b92505b61168e8484613592565b955050505050505b95945050505050565b606060108054806020026020016040519081016040528092919081815260200182805480156116f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116d9575b5050505050905090565b6001600160a01b03811660009081526009602052604081205460ff166004811115611412576114126145e1565b611736613195565b600082516001600160401b0381111561175157611751613ff9565b60405190808252806020026020018201604052801561179657816020015b604080518082019091526000808252602082015281526020019060019003908161176f5790505b50905060005b83518110156119345760008482815181106117b9576117b9614919565b6020908102919091018101516001600160a01b03808716600090815260098452604080822092841682526006909201845281812054600c90945290812054919350919080830361180b5781925061184a565b6001600160a01b0384166000908152600b60205260409020548061183157611831614ac6565b8161183c8285614a85565b6118469190614ab2565b9350505b6001600160a01b03808816600090815260096020908152604080832093881683526007909301815282822054600a90915291812054859061188c908490614a0f565b6118969190614906565b6001600160a01b0387166000818152600a602090815260409182902084905581518083019092529181529081018290528951919250908990899081106118de576118de614919565b6020908102919091018101919091526001600160a01b03808b1660009081526009835260408082209990921681526007909801909152909520939093555083925061192c9150829050614981565b91505061179c565b507f3a8e5aaec2e69068b6cd3e9b5a0c3b92e3f98d87152c8dfc28d4fb8b5fe728c6816040516112939190614271565b6000806000611972846136bd565b925090506119808183613592565b925050915091565b600060016001600160a01b03831660009081526009602052604090205460ff1660048111156119b9576119b96145e1565b1492915050565b6001600160a01b03811660009081526009602052604090206060906001815460ff1660048111156119f3576119f36145e1565b14611a3d576040805160008082526020820190925290611a35565b6040805180820190915260008082526020820152815260200190600190039081611a0e5790505b509392505050565b60048101546001600160401b03811115611a5957611a59613ff9565b604051908082528060200260200182016040528015611a9e57816020015b6040805180820190915260008082526020820152815260200190600190039081611a775790505b50915060005b8251811015611b6d576040518060400160405280836004018381548110611acd57611acd614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03168152602001836006016000856004018581548110611b1457611b14614919565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490528351849083908110611b4f57611b4f614919565b60200260200101819052508080611b6590614981565b915050611aa4565b5050919050565b611b7c613195565b6000611b87836139e8565b9050600082516001600160401b03811115611ba457611ba4613ff9565b604051908082528060200260200182016040528015611bef57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611bc25790505b50905060005b8351811015611df3576000848281518110611c1257611c12614919565b602002602001015190508060400151600003611c2e5750611de1565b80516001600160a01b03166000908152600f6020908152604080832082850151151584529091528082205490830151611c7090670de0b6b3a764000090614a85565b611c7a9190614906565b90506000611c888683614ab2565b9050611c948682614a85565b611c9e9083614a0f565b83516001600160a01b039081166000908152600f602090815260408083208289018051151585529083528184209590955587519093168252600d815282822093511515825292909252812054611cf5908390614906565b84516001600160a01b039081166000908152600d60209081526040808320828a018051151585529083529281902085905580516060810182528951909416845291511515908301528101829052875191925090879087908110611d5a57611d5a614919565b602090810291909101810191909152600480548651928701516040808901519051632f5ed88d60e11b81526001600160a01b0390931694635ebdb11a94611daa949193926000926001920161493f565b600060405180830381600087803b158015611dc457600080fd5b505af1158015611dd8573d6000803e3d6000fd5b50505050505050505b80611deb81614981565b915050611bf5565b507f2ac60741d0d223c005a44c990e184f1cc93da96536581c94a3fb486bcd44ed2081604051611e239190614adc565b60405180910390a150505050565b611e39613195565b806004811115611e4b57611e4b6145e1565b6001600160a01b0383166000908152600960205260409020805460ff19166001836004811115611e7d57611e7d6145e1565b02179055505050565b6000611424611e94836130e7565b84613abc565b611ea2613adb565b611eab86613b08565b611eb485613b08565b611ebd84613b08565b611ec683613b08565b611ecf82613b08565b611ed881613b08565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f70e5fc7545fd5ed4b490af5340c109d70c05d49a6f65f4a61cc74d5f0b2ddd659060c00160405180910390a1611f9e611fa6565b505050505050565b611fae613adb565b611fb86000613b53565b565b611fc2613195565b6000611fcc612504565b9050600082611fe3670de0b6b3a764000086614a85565b611fed9190614ab2565b90506000612017611fff600284614ab2565b6120099085614906565b670de0b6b3a7640000613ba3565b90506000811161202957612029614ac6565b61203281613bb9565b5050505050565b6010818154811061204957600080fd5b6000918252602090912001546001600160a01b0316905081565b61206b613195565b6120748161323d565b50565b61207f613195565b6000816004811115612093576120936145e1565b141580156120b3575060018160048111156120b0576120b06145e1565b14155b6120bf576120bf614ac6565b601054600181116120e3576040516361cf517160e11b815260040160405180910390fd5b6001600160a01b038316600090815260096020526040902080548390829060ff19166001836004811115612119576121196145e1565b021790555060005b600182015481101561218157600082600301600084600101848154811061214a5761214a614919565b60009182526020808320909101546001600160a01b031683528201929092526040019020558061217981614981565b915050612121565b5060005b60048201548110156121e55760008260060160008460040184815481106121ae576121ae614919565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806121dd81614981565b915050612185565b5060005b855181101561224b57600082600701600088848151811061220c5761220c614919565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061224390614981565b9150506121e9565b5061225a600182016000613f4e565b612268600482016000613f4e565b6122728483613c48565b600654604051631484968760e11b81526001600160a01b038681166004830152909116906329092d0e90602401600060405180830381600087803b1580156122b957600080fd5b505af11580156122cd573d6000803e3d6000fd5b505050507fb4fbcc4163ee36a65844a40f5a765e6e21f48dc4eb3bcc9555391aa1fd4bd56f8484604051612302929190614aef565b60405180910390a15050505050565b612319613195565b806000036123245750565b600061232e612504565b9050670de0b6b3a764000081111561234857612348614ac6565b61235181613bb9565b5050565b6001600160a01b03821660009081526009602052604081206001815460ff166004811115612385576123856145e1565b14612394576000915050611412565b6123a08484600161142b565b6001600160a01b03841660009081526006830160205260409020546123c59190614906565b949350505050565b6123d5613195565b6001600160a01b0382166000908152600960205260408120905b82518110156124f357600083828151811061240c5761240c614919565b602002602001015160000151905083828151811061242c5761242c614919565b602002602001015160200151836003016000836001600160a01b03166001600160a01b03168152602001908152602001600020600082825461246e9190614906565b90915550506001600160a01b038116600090815260028401602052604090205460ff166124e0576001600160a01b038116600081815260028501602090815260408220805460ff1916600190811790915586810180549182018155835291200180546001600160a01b03191690911790555b50806124eb81614981565b9150506123ef565b50505050565b600061141282613e11565b60008061250f613e1e565b90506000612525670ddd4b8c6c7d70d883613e3f565b9050670de0b6b3a76400008160075461253e9190614a85565b6125489190614ab2565b9250505090565b612557613195565b6001600160a01b038216600090815260096020526040812082519091906001600160401b0381111561258b5761258b613ff9565b6040519080825280602002602001820160405280156125b4578160200160208202803683370190505b50905060005b835181101561267e5760008482815181106125d7576125d7614919565b60200260200101516000015190508482815181106125f7576125f7614919565b602002602001015160200151846006016000836001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126399190614a0f565b925050819055508083838151811061265357612653614919565b6001600160a01b0390921660209283029190910190910152508061267681614981565b9150506125ba565b507fdbd562e51efd47eea69731879ae11fb05e3aede1c50496b27e5fa842f9473ecc8482604051611e23929190614b0c565b6001600160a01b03811660009081526009602052604081206001810154600482015460609392839283926126e49190614906565b6001600160401b038111156126fb576126fb613ff9565b60405190808252806020026020018201604052801561278657816020015b61277360405180610120016040528060006001600160a01b03168152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816127195790505b50945060005b60048201548110156128ab5760008260040182815481106127af576127af614919565b9060005260206000200160009054906101000a90046001600160a01b03169050604051806101200160405280826001600160a01b0316815260200160011515815260200184600601600086600401868154811061280e5761280e614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205481526020016000815260200160008152602001600081526020016000815260200160008152602001600081525087838151811061288c5761288c614919565b60200260200101819052505080806128a390614981565b91505061278c565b506000805b6001830154811015612a60578260010181815481106128d1576128d1614919565b600091825260209182902001546040805163b55fe4e760e01b815290516001600160a01b039092169263b55fe4e7926004808401938290030181865afa15801561291f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129439190614b30565b1561295a5760048301546129579082614906565b91505b600083600101828154811061297157612971614919565b9060005260206000200160009054906101000a90046001600160a01b03169050604051806101200160405280826001600160a01b031681526020016000151581526020018560030160008760010186815481106129d0576129d0614919565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181205484529183018290528201819052606082018190526080820181905260a0820181905260c09091015260048501548990612a319085614906565b81518110612a4157612a41614919565b6020026020010181905250508080612a5890614981565b9150506128b0565b5060005b8651811015612c4d576000878281518110612a8157612a81614919565b60200260200101519050612a9e898260000151836020015161142b565b606082018190526040820151600091612ab691614906565b6005548351604051637d3b6e7960e11b81526001600160a01b0391821660048201526024810184905292935060009291169063fa76dcf290604401602060405180830381865afa158015612b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b329190614a47565b9050826020015115612b6e57612b4782613e11565b60808401819052612b589083614a0f565b60a0840152612b67818a614906565b9850612c37565b848403612c1657612b88680ad78ebc5ac620000083614a0f565b60a084018190526005548451604051637d3b6e7960e11b81526001600160a01b0391821660048201526024810193909352169063fa76dcf290604401602060405180830381865afa158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190614a47565b612c0f9088614906565b9650612c2a565b60a08301829052612c278188614906565b96505b612c348189614906565b97505b5050508080612c4590614981565b915050612a64565b5050509193509193565b6060612c62826119c0565b905060005b8151811015612cd857612c9983838381518110612c8657612c86614919565b602002602001015160000151600161142b565b828281518110612cab57612cab614919565b6020026020010151602001818151612cc39190614906565b90525080612cd081614981565b915050612c67565b50919050565b6000611424611e94836130c7565b6000611412826135c8565b612cff613195565b6001600160a01b038216600090815260096020526040812082519091906001600160401b03811115612d3357612d33613ff9565b604051908082528060200260200182016040528015612d5c578160200160208202803683370190505b50905060005b835181101561267e576000848281518110612d7f57612d7f614919565b6020026020010151600001519050848281518110612d9f57612d9f614919565b602002602001015160200151846006016000836001600160a01b03166001600160a01b031681526020019081526020016000206000828254612de19190614906565b90915550506001600160a01b038116600090815260058501602052604090205460ff16612e54576001600160a01b038116600081815260058601602090815260408220805460ff191660019081179091556004880180549182018155835291200180546001600160a01b03191690911790555b80838381518110612e6757612e67614919565b6001600160a01b03909216602092830291909101909101525080612e8a81614981565b915050612d62565b6001600160a01b03811660009081526009602052604090206060906001815460ff166004811115612ec557612ec56145e1565b14612ee0576040805160008082526020820190925290611a35565b60018101546000906001600160401b03811115612eff57612eff613ff9565b604051908082528060200260200182016040528015612f4457816020015b6040805180820190915260008082526020820152815260200190600190039081612f1d5790505b50905060005b8151811015611a35576040518060400160405280846001018381548110612f7357612f73614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03168152602001846003016000866001018581548110612fba57612fba614919565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490528251839083908110612ff557612ff5614919565b6020026020010181905250808061300b90614981565b915050612f4a565b61301b613195565b6001600160a01b0382166000908152600960205260408120905b82518110156124f35782818151811061305057613050614919565b60200260200101516020015182600301600085848151811061307457613074614919565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546130af9190614a0f565b909155508190506130bf81614981565b915050613035565b6000816130dc57506611c37937e08000919050565b611412600754613ef4565b6000816130fc57506611c37937e08000919050565b611412613107612504565b613ef4565b613114613adb565b6001600160a01b03811661314357604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61207481613b53565b600060016001600160a01b03851660009081526009602052604090205460ff16600481111561317d5761317d6145e1565b1461318a57506000611424565b6123c5848484613497565b6001546001600160a01b031633148015906131bb57506002546001600160a01b03163314155b80156131d257506003546001600160a01b03163314155b15611fb85760405163c5676b0760e01b815260040160405180910390fd5b60016001600160a01b03821660009081526009602052604090205460ff16600481111561321f5761321f6145e1565b1461207457604051630bc5fd6f60e21b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604081206001810154600482015491929161326c9190614906565b6001600160401b0381111561328357613283613ff9565b6040519080825280602002602001820160405280156132ce57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816132a15790505b50905060005b60018301548110156133945760008360010182815481106132f7576132f7614919565b60009182526020808320909101546001600160a01b03908116808452600d83526040808520858052845280852054928a168552600e84528085208286528452808520858052845280852083905580516060810182528281529384019490945292820181905285519293509185908590811061337457613374614919565b60200260200101819052505050808061338c90614981565b9150506132d4565b5060005b60048301548110156134675760008360040182815481106133bb576133bb614919565b60009182526020808320909101546001600160a01b03908116808452600d83526040808520600180875290855281862054938b168652600e855281862083875285528186208187528552948190208390558051606081018252828152938401859052830182905292870154929350918590613437908690614906565b8151811061344757613447614919565b60200260200101819052505050808061345f90614981565b915050613398565b507ffe05225747354ceccb716fc77f1b48ba5895a6456ea030e81768badd85ad4999816040516112939190614adc565b6001600160a01b03831660009081526009602052604081206001815460ff1660048111156134c7576134c76145e1565b146134d6576000915050611424565b821580156135415750836001600160a01b031663b55fe4e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561351d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135419190614b30565b61354c576000613557565b680ad78ebc5ac62000005b6135638686600061142b565b6001600160a01b03861660009081526003840160205260409020546135889190614906565b6116969190614a0f565b600081156135be57816135ad670de0b6b3a764000085614a85565b6135b79190614ab2565b9050611412565b5060001992915050565b6001600160a01b0381166000908152600960205260408120815b6004820154811015611b6d57600082600401828154811061360557613605614919565b6000918252602080832091909101546005546001600160a01b0391821680855260078801909352604093849020549351637d3b6e7960e11b8152600481018490526024810194909452919350169063fa76dcf290604401602060405180830381865afa158015613679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369d9190614a47565b6136a79085614906565b93505080806136b590614981565b9150506135e2565b6001600160a01b03811660009081526009602052604081208190815b60048201548110156137e35760008260040182815481106136fc576136fc614919565b60009182526020822001546001600160a01b0316915061371e8783600161142b565b6005546001600160a01b038481166000908152600688016020526040902054929350169063fa76dcf2908490613755908590614906565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa15801561379e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c29190614a47565b6137cc9087614906565b9550505080806137db90614981565b9150506136d9565b5060005b60018201548110156138f157600082600101828154811061380a5761380a614919565b60009182526020822001546001600160a01b0316915061382c8783600161142b565b6005546001600160a01b038481166000908152600388016020526040902054929350169063fa76dcf2908490613863908590614906565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156138ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d09190614a47565b6138da9086614906565b9450505080806138e990614981565b9150506137e7565b5050915091565b6000805b8251811015612cd85760055483516001600160a01b039091169063fa76dcf29085908490811061392e5761392e614919565b60200260200101516000015185848151811061394c5761394c614919565b6020026020010151602001516040518363ffffffff1660e01b81526004016139899291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156139a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ca9190614a47565b6139d49083614906565b9150806139e081614981565b9150506138fc565b6000805b8251811015612cd8576000838281518110613a0957613a09614919565b6020908102919091018101516005546001600160a01b038083166000818152600a8652604090819020548151637d3b6e7960e11b8152600481019390935260248301525193955091169263fa76dcf2926044808401938290030181865afa158015613a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9c9190614a47565b613aa69084614906565b9250508080613ab490614981565b9150506139ec565b6000670de0b6b3a7640000613ad18385614a85565b6114249190614ab2565b6000546001600160a01b03163314611fb85760405163118cdaa760e01b815233600482015260240161313a565b6001600160a01b038116613b2f5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361235157604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818310613bb25781611424565b5090919050565b60078190556040518181527fe69c4a32fbb3c90560e69557d4753f018f5d533d73c61df2219dfc49c81c36c79060200160405180910390a1600060085442613c019190614a0f565b9050603c8110612351574260088190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc9060200160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1690816004811115613c7757613c776145e1565b14158015613c9757506001816004811115613c9457613c946145e1565b14155b613ca357613ca3614ac6565b6001600160a01b03831660009081526009602052604090205461010090046001600160801b0316613cd5600184614a0f565b816001600160801b03161115613ced57613ced614ac6565b60006010613cfc600186614a0f565b81548110613d0c57613d0c614919565b600091825260209091200154601080546001600160a01b03909216925082916001600160801b038516908110613d4457613d44614919565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600983526040918290208054610100600160881b0319166101006001600160801b038816908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a16010805480613de857613de8614b4d565b600082815260209020810160001990810180546001600160a01b03191690550190555050505050565b600061141260c883614ab2565b6000603c60085442613e309190614a0f565b613e3a9190614ab2565b905090565b6000631f540500821115613e5557631f54050091505b81600003613e6c5750670de0b6b3a7640000611412565b670de0b6b3a764000083835b6001811115613ee057613e8c600282614b63565b600003613eb157613e9d8283613f17565b9150613eaa600282614ab2565b9050613e78565b613ebb8284613f17565b9250613ec78283613f17565b91506002613ed6600183614a0f565b613eaa9190614ab2565b613eea8284613f17565b9695505050505050565b6000611412613f0a836611c37937e08000614906565b66b1a2bc2ec50000613ba3565b600080613f248385614a85565b9050670de0b6b3a7640000613f3a600282614ab2565b613f449083614906565b6123c59190614ab2565b508054600082559060005260206000209081019061207491905b80821115613f7c5760008155600101613f68565b5090565b6001600160a01b038116811461207457600080fd5b801515811461207457600080fd5b60008060408385031215613fb657600080fd5b8235613fc181613f80565b91506020830135613fd181613f95565b809150509250929050565b600060208284031215613fee57600080fd5b813561142481613f80565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561403157614031613ff9565b60405290565b604051606081016001600160401b038111828210171561403157614031613ff9565b604051601f8201601f191681016001600160401b038111828210171561408157614081613ff9565b604052919050565b60006001600160401b038211156140a2576140a2613ff9565b5060051b60200190565b600082601f8301126140bd57600080fd5b813560206140d26140cd83614089565b614059565b82815260059290921b840181019181810190868411156140f157600080fd5b8286015b8481101561411557803561410881613f80565b83529183019183016140f5565b509695505050505050565b6000806040838503121561413357600080fd5b82356001600160401b0381111561414957600080fd5b614155858286016140ac565b9250506020830135613fd181613f80565b600082601f83011261417757600080fd5b813560206141876140cd83614089565b82815260069290921b840181019181810190868411156141a657600080fd5b8286015b8481101561411557604081890312156141c35760008081fd5b6141cb61400f565b81356141d681613f80565b815281850135858201528352918301916040016141aa565b60006020828403121561420057600080fd5b81356001600160401b0381111561421657600080fd5b6123c584828501614166565b600081518084526020808501945080840160005b8381101561426657815180516001600160a01b031688528301518388015260409096019590820190600101614236565b509495945050505050565b6020815260006114246020830184614222565b6000806040838503121561429757600080fd5b50508035926020909101359150565b6000806000606084860312156142bb57600080fd5b83356142c681613f80565b925060208401356142d681613f80565b915060408401356142e681613f95565b809150509250925092565b600080600080600060a0868803121561430957600080fd5b853561431481613f80565b945060208601356001600160401b038082111561433057600080fd5b61433c89838a01614166565b9550604088013591508082111561435257600080fd5b61435e89838a01614166565b9450606088013591508082111561437457600080fd5b61438089838a01614166565b9350608088013591508082111561439657600080fd5b506143a388828901614166565b9150509295509295909350565b600081518084526020808501945080840160005b838110156142665781516001600160a01b0316875295820195908201906001016143c4565b60208152600061142460208301846143b0565b60006020828403121561440e57600080fd5b5035919050565b600080604080848603121561442957600080fd5b83356001600160401b038082111561444057600080fd5b61444c878388016140ac565b945060209150818601358181111561446357600080fd5b86019050601f8101871361447657600080fd5b80356144846140cd82614089565b8181526060918202830184019184820191908a8411156144a357600080fd5b938501935b838510156144fd5780858c0312156144c05760008081fd5b6144c8614037565b85356144d381613f80565b8152858701356144e281613f95565b818801528588013588820152835293840193918501916144a8565b508096505050505050509250929050565b6000806040838503121561452157600080fd5b823561452c81613f80565b946020939093013593505050565b6000806040838503121561454d57600080fd5b823591506020830135613fd181613f95565b60008060008060008060c0878903121561457857600080fd5b863561458381613f80565b9550602087013561459381613f80565b945060408701356145a381613f80565b935060608701356145b381613f80565b925060808701356145c381613f80565b915060a08701356145d381613f80565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60058110614607576146076145e1565b9052565b6040810161461982856145f7565b6001600160801b03831660208301529392505050565b6000806040838503121561464257600080fd5b823561464d81613f80565b91506020830135613fd181613f80565b60008060006060848603121561467257600080fd5b83356001600160401b0381111561468857600080fd5b614694868287016140ac565b93505060208401356146a581613f80565b91506040840135600581106142e657600080fd5b60008060408084860312156146cd57600080fd5b83356146d881613f80565b92506020848101356001600160401b038111156146f457600080fd5b8501601f8101871361470557600080fd5b80356147136140cd82614089565b8181526060918202830184019184820191908a84111561473257600080fd5b938501935b838510156144fd5780858c03121561474f5760008081fd5b614757614037565b853561476281613f80565b81528587013587820152878601358882015283529384019391850191614737565b600060208083528351808285015260005b818110156147b057858101830151858201604001528201614794565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156147e457600080fd5b82356147ef81613f80565b915060208301356001600160401b0381111561480a57600080fd5b61481685828601614166565b9150509250929050565b608080825285518282018190526000919060a090818501906020808b01865b838110156148b657815180516001600160a01b031686528381015115158487015260408082015190870152606080820151908701528781015188870152868101518787015260c0808201519087015260e080820151908701526101009081015190860152610120909401939082019060010161483f565b505086019890985260408501969096525050506060015292915050565b6000602082840312156148e557600080fd5b813561142481613f95565b634e487b7160e01b600052601160045260246000fd5b80820180821115611412576114126148f0565b634e487b7160e01b600052603260045260246000fd5b60038110614607576146076145e1565b6001600160a01b0386168152841515602082015260a08101614964604083018661492f565b614971606083018561492f565b8260808301529695505050505050565b600060018201614993576149936148f0565b5060010190565b600081518084526020808501945080840160005b8381101561426657815180516001600160a01b031688528381015115158489015260409081015190880152606090960195908201906001016149ae565b6001600160a01b03831681526040602082018190526000906123c59083018461499a565b81810381811115611412576114126148f0565b6001600160a01b03841681528215156020820152606081016123c5604083018461492f565b600060208284031215614a5957600080fd5b5051919050565b604081526000614a736040830185614222565b82810360208401526116968185614222565b8082028115828204841417611412576114126148f0565b634e487b7160e01b600052601260045260246000fd5b600082614ac157614ac1614a9c565b500490565b634e487b7160e01b600052600160045260246000fd5b602081526000611424602083018461499a565b6001600160a01b03831681526040810161142460208301846145f7565b6001600160a01b03831681526040602082018190526000906123c5908301846143b0565b600060208284031215614b4257600080fd5b815161142481613f95565b634e487b7160e01b600052603160045260246000fd5b600082614b7257614b72614a9c565b50069056fea2646970667358221220e53fc89f2af53150de4c330d11d9a13eb07c27dff939ce1801773b8e4475474364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104685760003560e01c8063756b253e1161024c578063bc3ce8c411610146578063e240885e116100c3578063ec671c8311610087578063ec671c8314610ae2578063f2fde38b14610aec578063f92d343314610632578063fa973daa14610aff578063fb746c6a14610b1257600080fd5b8063e240885e14610a8c578063e5dc45a214610a9f578063e62688a314610ab2578063e67729e314610ac5578063e853753414610acf57600080fd5b8063d317458f1161010a578063d317458f14610a2a578063d380a37c14610a3d578063d66a255314610a46578063ddbeb71414610a59578063df349ed514610a6c57600080fd5b8063bc3ce8c4146109d8578063c317c460146109eb578063c35bc550146109fe578063c450952014610a08578063c7b5548114610a1b57600080fd5b80639bfc8110116101d4578063b22b0bcf11610198578063b22b0bcf1461094f578063b311d2e214610957578063b3e995381461096a578063b7f8cf9b146109a2578063b91af97c146109b557600080fd5b80639bfc8110146108be578063a3f4df7e146108d1578063a537896f14610909578063ae9187541461091c578063af3700dc1461092f57600080fd5b80638d63c6651161021b5780638d63c6651461086e5780638da5cb5b1461087e57806392da1bc61461088f578063991336b2146108a25780639b26013b146108b557600080fd5b8063756b253e14610826578063794e57241461083957806382fe3eb9146108485780638918b9e11461085b57600080fd5b80632be2615a116103685780635d6b480f116102e5578063701deb68116102a9578063701deb68146107ac578063715018a6146107e957806372fe25aa146107f157806373b1029614610800578063741bef1a1461081357600080fd5b80635d6b480f1461071257806367ab6b67146107255780636a5ab297146107385780636cfb6bf9146107585780636ef643381461076b57600080fd5b80634870dd9a1161032c5780634870dd9a146106c257806349eefeee146106ca578063502afb04146106d25780635733d58f146106f057806359138f9a146106ff57600080fd5b80632be2615a146106405780633122dfd4146106535780633735aa20146106845780633fd5c85a146106a7578063480cd578146106af57600080fd5b8063154eada4116103f657806321e37801116103ba57806321e37801146105d657806324092669146105e95780632767bf64146105f757806327fb7d891461060a57806328d28b5b1461063257600080fd5b8063154eada41461055d57806315d549f11461057057806318e730281461059b5780631bbb375c146105ae5780631d08837b146105c357600080fd5b80630b0765571161043d5780630b076557146104f15780630c13ad6e14610504578063107192911461051757806310e7cc811461052a578063129c4c611461054a57600080fd5b8061e8031461046d578063043782fb146104ab578063071a7541146104b657806309230ad3146104be575b600080fd5b61049861047b366004613fa3565b600d60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6104b442600855565b005b610498600281565b6104d973f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020016104a2565b6104b46104ff366004613fdc565b610b3d565b6104b4610512366004614120565b610ed4565b6104b46105253660046141ee565b610f8e565b61053d610538366004613fa3565b6112a0565b6040516104a29190614271565b610498610558366004614284565b611418565b61049861056b3660046142a6565b61142b565b61058361057e366004613fdc565b611504565b6040516001600160801b0390911681526020016104a2565b6104986105a93660046142f1565b6115a3565b6105b661169f565b6040516104a291906143e9565b6104b46105d13660046143fc565b600755565b6104986105e4366004613fdc565b611701565b61049866b1a2bc2ec5000081565b6104b4610605366004614120565b61172e565b61061d610618366004613fdc565b611964565b604080519283526020830191909152016104a2565b6104986611c37937e0800081565b6002546104d9906001600160a01b031681565b6104986106613660046142a6565b600e60209081526000938452604080852082529284528284209052825290205481565b610697610692366004613fdc565b611988565b60405190151581526020016104a2565b600754610498565b61053d6106bd366004613fdc565b6119c0565b61049860c881565b601054610498565b6106db610bb881565b60405163ffffffff90911681526020016104a2565b6104986714d1120d7b16000081565b6104b461070d366004614415565b611b74565b6104b461072036600461450e565b611e31565b61049861073336600461453a565b611e86565b610498610746366004613fdc565b600c6020526000908152604090205481565b6104b461076636600461455f565b611e9a565b61079e610779366004613fdc565b60096020526000908152604090205460ff81169061010090046001600160801b031682565b6040516104a292919061460b565b6104986107ba36600461462f565b6001600160a01b0391821660009081526009602090815260408083209390941682526007909201909152205490565b6104b4611fa6565b610498670de0b6b3a764000081565b6104b461080e366004614284565b611fba565b6005546104d9906001600160a01b031681565b6104d96108343660046143fc565b612039565b610498670f43fc2c04ee000081565b6104b4610856366004613fdc565b612063565b6104b461086936600461465d565b612077565b610498680ad78ebc5ac620000081565b6000546001600160a01b03166104d9565b6104b461089d3660046143fc565b612311565b6104986108b036600461462f565b612355565b61049860075481565b6104b46108cc3660046146b9565b6123cd565b6108fc6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6040516104a29190614783565b6104986109173660046143fc565b6124f9565b6006546104d9906001600160a01b031681565b61049861093d366004613fdc565b600b6020526000908152604090205481565b610498612504565b6104b46109653660046147d1565b61254f565b610498610978366004613fa3565b6001600160a01b03919091166000908152600d602090815260408083209315158352929052205490565b6001546104d9906001600160a01b031681565b6109c86109c3366004613fdc565b6126b0565b6040516104a29493929190614820565b61053d6109e6366004613fdc565b612c57565b6104986109f936600461453a565b612cde565b6104986212750081565b610498610a16366004613fdc565b612cec565b610498670ddd4b8c6c7d70d881565b6104b4610a383660046147d1565b612cf7565b61049860085481565b61053d610a54366004613fdc565b612e92565b6004546104d9906001600160a01b031681565b610498610a7a366004613fdc565b600a6020526000908152604090205481565b6104b4610a9a3660046146b9565b613013565b610498610aad3660046148d3565b6130c7565b610498610ac03660046148d3565b6130e7565b6106db620f424081565b6003546104d9906001600160a01b031681565b6106db6207a12081565b6104b4610afa366004613fdc565b61310c565b610498610b0d3660046142a6565b61314c565b610498610b20366004613fa3565b600f60209081526000928352604080842090915290825290205481565b610b45613195565b610b4e816131f0565b6001600160a01b038116600090815260096020526040812060018101546004820154919291610b7d9190614906565b6001600160401b03811115610b9457610b94613ff9565b604051908082528060200260200182016040528015610bdf57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610bb25790505b50905060005b6004830154811015610d2e576000836004018281548110610c0857610c08614919565b60009182526020822001546001600160a01b03169150610c2a8683600161142b565b90506040518060600160405280836001600160a01b0316815260200160011515815260200182815250848481518110610c6557610c65614919565b602002602001018190525080600003610c7f575050610d1c565b6001600160a01b038216600090815260068601602052604081208054839290610ca9908490614906565b909155505060048054604051632f5ed88d60e11b81526001600160a01b0390911691635ebdb11a91610ce7918691600191829160009189910161493f565b600060405180830381600087803b158015610d0157600080fd5b505af1158015610d15573d6000803e3d6000fd5b5050505050505b80610d2681614981565b915050610be5565b5060005b6001830154811015610e8c576000836001018281548110610d5557610d55614919565b60009182526020822001546001600160a01b031691508190610d7887838361142b565b604080516060810182526001600160a01b0385168152600060208201529081018290526004880154919250908690610db1908790614906565b81518110610dc157610dc1614919565b602002602001018190525080600003610ddc57505050610e7a565b6001600160a01b038316600090815260038701602052604081208054839290610e06908490614906565b909155505060048054604051632f5ed88d60e11b81526001600160a01b0390911691635ebdb11a91610e44918691600091600191839189910161493f565b600060405180830381600087803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b505050505050505b80610e8481614981565b915050610d32565b507fda8ffab61fa593ea6420900af565f92a0767a66267f33bca2da03984f7e804678382604051610ebe9291906149eb565b60405180910390a1610ecf8361323d565b505050565b610edc613195565b60005b8251811015610ecf576000838281518110610efc57610efc614919565b6020908102919091018101516001600160a01b03808616600090815260098452604080822092841682526007909201845281812054600a909452908120805492945091610f4a908490614a0f565b90915550506001600160a01b038084166000908152600960209081526040808320949093168252600790930190925281205580610f8681614981565b915050610edf565b600081516001600160401b03811115610fa957610fa9613ff9565b604051908082528060200260200182016040528015610fee57816020015b6040805180820190915260008082526020820152815260200190600190039081610fc75790505b509050600082516001600160401b0381111561100c5761100c613ff9565b60405190808252806020026020018201604052801561105157816020015b604080518082019091526000808252602082015281526020019060019003908161102a5790505b50905060005b835181101561126157600084828151811061107457611074614919565b602090810291909101810151516001600160a01b0381166000818152600a8452604080822054600b86529181902082905580518082019091529182529281018390528651919350908690859081106110ce576110ce614919565b602002602001018190525060008684815181106110ed576110ed614919565b60209081029190910181015101516004805460405162d05f3560e81b81526001600160a01b039091169163d05f35009161112e918891600191829101614a22565b602060405180830381865afa15801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190614a47565b6004805460405162d05f3560e81b81526001600160a01b039091169163d05f3500916111a391899160019160009101614a22565b602060405180830381865afa1580156111c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e49190614a47565b6111ee9190614906565b6111f89190614a0f565b6001600160a01b0384166000818152600c6020908152604091829020849055815180830190925291815290810182905286519192509086908690811061124057611240614919565b6020026020010181905250505050808061125990614981565b915050611057565b507f0b113662e7f3724dcab94c25a8a8a1502a01b92efa7b717d154889c962f0e5728282604051611293929190614a60565b60405180910390a1505050565b6001600160a01b03821660009081526009602052604090206060906001815460ff1660048111156112d3576112d36145e1565b1461131e576040805160008082526020820190925290611315565b60408051808201909152600080825260208201528152602001906001900390816112ee5790505b50915050611412565b60018101546000906001600160401b0381111561133d5761133d613ff9565b60405190808252806020026020018201604052801561138257816020015b604080518082019091526000808252602082015281526020019060019003908161135b5790505b50925060005b835181101561140e578260010181815481106113a6576113a6614919565b60009182526020918290200154604080518082019091526001600160a01b0390911680825293509081016113db888589613497565b8152508482815181106113f0576113f0614919565b6020026020010181905250808061140690614981565b915050611388565b5050505b92915050565b60006114248383613592565b9392505050565b6001600160a01b038084166000908152600e6020908152604080832093861680845293825280832085151580855290835281842054948452600d83528184209084529091528120549091908290611483908390614a0f565b90508015806114bf575060016001600160a01b03871660009081526009602052604090205460ff1660048111156114bc576114bc6145e1565b14155b156114cf57600092505050611424565b60006114da876135c8565b9050670de0b6b3a76400006114ef8383614a85565b6114f99190614ab2565b979650505050505050565b600061150e613195565b601080546001808201835560008390527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180546001600160a01b0319166001600160a01b03861617905590546115679190614a0f565b6001600160a01b039290921660009081526009602052604090208054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03851660009081526009602052604081206001815460ff1660048111156115d3576115d36145e1565b146115e2576000915050611696565b6000806115ee896136bd565b915091506115fb886138f8565b6116059083614906565b91506000611612886138f8565b905080831015611625576000925061163b565b61162e886138f8565b6116389084614a0f565b92505b611644876138f8565b61164e9083614906565b9150600061165b876138f8565b90508083101561166e5760009250611684565b611677876138f8565b6116819084614a0f565b92505b61168e8484613592565b955050505050505b95945050505050565b606060108054806020026020016040519081016040528092919081815260200182805480156116f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116d9575b5050505050905090565b6001600160a01b03811660009081526009602052604081205460ff166004811115611412576114126145e1565b611736613195565b600082516001600160401b0381111561175157611751613ff9565b60405190808252806020026020018201604052801561179657816020015b604080518082019091526000808252602082015281526020019060019003908161176f5790505b50905060005b83518110156119345760008482815181106117b9576117b9614919565b6020908102919091018101516001600160a01b03808716600090815260098452604080822092841682526006909201845281812054600c90945290812054919350919080830361180b5781925061184a565b6001600160a01b0384166000908152600b60205260409020548061183157611831614ac6565b8161183c8285614a85565b6118469190614ab2565b9350505b6001600160a01b03808816600090815260096020908152604080832093881683526007909301815282822054600a90915291812054859061188c908490614a0f565b6118969190614906565b6001600160a01b0387166000818152600a602090815260409182902084905581518083019092529181529081018290528951919250908990899081106118de576118de614919565b6020908102919091018101919091526001600160a01b03808b1660009081526009835260408082209990921681526007909801909152909520939093555083925061192c9150829050614981565b91505061179c565b507f3a8e5aaec2e69068b6cd3e9b5a0c3b92e3f98d87152c8dfc28d4fb8b5fe728c6816040516112939190614271565b6000806000611972846136bd565b925090506119808183613592565b925050915091565b600060016001600160a01b03831660009081526009602052604090205460ff1660048111156119b9576119b96145e1565b1492915050565b6001600160a01b03811660009081526009602052604090206060906001815460ff1660048111156119f3576119f36145e1565b14611a3d576040805160008082526020820190925290611a35565b6040805180820190915260008082526020820152815260200190600190039081611a0e5790505b509392505050565b60048101546001600160401b03811115611a5957611a59613ff9565b604051908082528060200260200182016040528015611a9e57816020015b6040805180820190915260008082526020820152815260200190600190039081611a775790505b50915060005b8251811015611b6d576040518060400160405280836004018381548110611acd57611acd614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03168152602001836006016000856004018581548110611b1457611b14614919565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490528351849083908110611b4f57611b4f614919565b60200260200101819052508080611b6590614981565b915050611aa4565b5050919050565b611b7c613195565b6000611b87836139e8565b9050600082516001600160401b03811115611ba457611ba4613ff9565b604051908082528060200260200182016040528015611bef57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611bc25790505b50905060005b8351811015611df3576000848281518110611c1257611c12614919565b602002602001015190508060400151600003611c2e5750611de1565b80516001600160a01b03166000908152600f6020908152604080832082850151151584529091528082205490830151611c7090670de0b6b3a764000090614a85565b611c7a9190614906565b90506000611c888683614ab2565b9050611c948682614a85565b611c9e9083614a0f565b83516001600160a01b039081166000908152600f602090815260408083208289018051151585529083528184209590955587519093168252600d815282822093511515825292909252812054611cf5908390614906565b84516001600160a01b039081166000908152600d60209081526040808320828a018051151585529083529281902085905580516060810182528951909416845291511515908301528101829052875191925090879087908110611d5a57611d5a614919565b602090810291909101810191909152600480548651928701516040808901519051632f5ed88d60e11b81526001600160a01b0390931694635ebdb11a94611daa949193926000926001920161493f565b600060405180830381600087803b158015611dc457600080fd5b505af1158015611dd8573d6000803e3d6000fd5b50505050505050505b80611deb81614981565b915050611bf5565b507f2ac60741d0d223c005a44c990e184f1cc93da96536581c94a3fb486bcd44ed2081604051611e239190614adc565b60405180910390a150505050565b611e39613195565b806004811115611e4b57611e4b6145e1565b6001600160a01b0383166000908152600960205260409020805460ff19166001836004811115611e7d57611e7d6145e1565b02179055505050565b6000611424611e94836130e7565b84613abc565b611ea2613adb565b611eab86613b08565b611eb485613b08565b611ebd84613b08565b611ec683613b08565b611ecf82613b08565b611ed881613b08565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f70e5fc7545fd5ed4b490af5340c109d70c05d49a6f65f4a61cc74d5f0b2ddd659060c00160405180910390a1611f9e611fa6565b505050505050565b611fae613adb565b611fb86000613b53565b565b611fc2613195565b6000611fcc612504565b9050600082611fe3670de0b6b3a764000086614a85565b611fed9190614ab2565b90506000612017611fff600284614ab2565b6120099085614906565b670de0b6b3a7640000613ba3565b90506000811161202957612029614ac6565b61203281613bb9565b5050505050565b6010818154811061204957600080fd5b6000918252602090912001546001600160a01b0316905081565b61206b613195565b6120748161323d565b50565b61207f613195565b6000816004811115612093576120936145e1565b141580156120b3575060018160048111156120b0576120b06145e1565b14155b6120bf576120bf614ac6565b601054600181116120e3576040516361cf517160e11b815260040160405180910390fd5b6001600160a01b038316600090815260096020526040902080548390829060ff19166001836004811115612119576121196145e1565b021790555060005b600182015481101561218157600082600301600084600101848154811061214a5761214a614919565b60009182526020808320909101546001600160a01b031683528201929092526040019020558061217981614981565b915050612121565b5060005b60048201548110156121e55760008260060160008460040184815481106121ae576121ae614919565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806121dd81614981565b915050612185565b5060005b855181101561224b57600082600701600088848151811061220c5761220c614919565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061224390614981565b9150506121e9565b5061225a600182016000613f4e565b612268600482016000613f4e565b6122728483613c48565b600654604051631484968760e11b81526001600160a01b038681166004830152909116906329092d0e90602401600060405180830381600087803b1580156122b957600080fd5b505af11580156122cd573d6000803e3d6000fd5b505050507fb4fbcc4163ee36a65844a40f5a765e6e21f48dc4eb3bcc9555391aa1fd4bd56f8484604051612302929190614aef565b60405180910390a15050505050565b612319613195565b806000036123245750565b600061232e612504565b9050670de0b6b3a764000081111561234857612348614ac6565b61235181613bb9565b5050565b6001600160a01b03821660009081526009602052604081206001815460ff166004811115612385576123856145e1565b14612394576000915050611412565b6123a08484600161142b565b6001600160a01b03841660009081526006830160205260409020546123c59190614906565b949350505050565b6123d5613195565b6001600160a01b0382166000908152600960205260408120905b82518110156124f357600083828151811061240c5761240c614919565b602002602001015160000151905083828151811061242c5761242c614919565b602002602001015160200151836003016000836001600160a01b03166001600160a01b03168152602001908152602001600020600082825461246e9190614906565b90915550506001600160a01b038116600090815260028401602052604090205460ff166124e0576001600160a01b038116600081815260028501602090815260408220805460ff1916600190811790915586810180549182018155835291200180546001600160a01b03191690911790555b50806124eb81614981565b9150506123ef565b50505050565b600061141282613e11565b60008061250f613e1e565b90506000612525670ddd4b8c6c7d70d883613e3f565b9050670de0b6b3a76400008160075461253e9190614a85565b6125489190614ab2565b9250505090565b612557613195565b6001600160a01b038216600090815260096020526040812082519091906001600160401b0381111561258b5761258b613ff9565b6040519080825280602002602001820160405280156125b4578160200160208202803683370190505b50905060005b835181101561267e5760008482815181106125d7576125d7614919565b60200260200101516000015190508482815181106125f7576125f7614919565b602002602001015160200151846006016000836001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126399190614a0f565b925050819055508083838151811061265357612653614919565b6001600160a01b0390921660209283029190910190910152508061267681614981565b9150506125ba565b507fdbd562e51efd47eea69731879ae11fb05e3aede1c50496b27e5fa842f9473ecc8482604051611e23929190614b0c565b6001600160a01b03811660009081526009602052604081206001810154600482015460609392839283926126e49190614906565b6001600160401b038111156126fb576126fb613ff9565b60405190808252806020026020018201604052801561278657816020015b61277360405180610120016040528060006001600160a01b03168152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816127195790505b50945060005b60048201548110156128ab5760008260040182815481106127af576127af614919565b9060005260206000200160009054906101000a90046001600160a01b03169050604051806101200160405280826001600160a01b0316815260200160011515815260200184600601600086600401868154811061280e5761280e614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000205481526020016000815260200160008152602001600081526020016000815260200160008152602001600081525087838151811061288c5761288c614919565b60200260200101819052505080806128a390614981565b91505061278c565b506000805b6001830154811015612a60578260010181815481106128d1576128d1614919565b600091825260209182902001546040805163b55fe4e760e01b815290516001600160a01b039092169263b55fe4e7926004808401938290030181865afa15801561291f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129439190614b30565b1561295a5760048301546129579082614906565b91505b600083600101828154811061297157612971614919565b9060005260206000200160009054906101000a90046001600160a01b03169050604051806101200160405280826001600160a01b031681526020016000151581526020018560030160008760010186815481106129d0576129d0614919565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181205484529183018290528201819052606082018190526080820181905260a0820181905260c09091015260048501548990612a319085614906565b81518110612a4157612a41614919565b6020026020010181905250508080612a5890614981565b9150506128b0565b5060005b8651811015612c4d576000878281518110612a8157612a81614919565b60200260200101519050612a9e898260000151836020015161142b565b606082018190526040820151600091612ab691614906565b6005548351604051637d3b6e7960e11b81526001600160a01b0391821660048201526024810184905292935060009291169063fa76dcf290604401602060405180830381865afa158015612b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b329190614a47565b9050826020015115612b6e57612b4782613e11565b60808401819052612b589083614a0f565b60a0840152612b67818a614906565b9850612c37565b848403612c1657612b88680ad78ebc5ac620000083614a0f565b60a084018190526005548451604051637d3b6e7960e11b81526001600160a01b0391821660048201526024810193909352169063fa76dcf290604401602060405180830381865afa158015612be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c059190614a47565b612c0f9088614906565b9650612c2a565b60a08301829052612c278188614906565b96505b612c348189614906565b97505b5050508080612c4590614981565b915050612a64565b5050509193509193565b6060612c62826119c0565b905060005b8151811015612cd857612c9983838381518110612c8657612c86614919565b602002602001015160000151600161142b565b828281518110612cab57612cab614919565b6020026020010151602001818151612cc39190614906565b90525080612cd081614981565b915050612c67565b50919050565b6000611424611e94836130c7565b6000611412826135c8565b612cff613195565b6001600160a01b038216600090815260096020526040812082519091906001600160401b03811115612d3357612d33613ff9565b604051908082528060200260200182016040528015612d5c578160200160208202803683370190505b50905060005b835181101561267e576000848281518110612d7f57612d7f614919565b6020026020010151600001519050848281518110612d9f57612d9f614919565b602002602001015160200151846006016000836001600160a01b03166001600160a01b031681526020019081526020016000206000828254612de19190614906565b90915550506001600160a01b038116600090815260058501602052604090205460ff16612e54576001600160a01b038116600081815260058601602090815260408220805460ff191660019081179091556004880180549182018155835291200180546001600160a01b03191690911790555b80838381518110612e6757612e67614919565b6001600160a01b03909216602092830291909101909101525080612e8a81614981565b915050612d62565b6001600160a01b03811660009081526009602052604090206060906001815460ff166004811115612ec557612ec56145e1565b14612ee0576040805160008082526020820190925290611a35565b60018101546000906001600160401b03811115612eff57612eff613ff9565b604051908082528060200260200182016040528015612f4457816020015b6040805180820190915260008082526020820152815260200190600190039081612f1d5790505b50905060005b8151811015611a35576040518060400160405280846001018381548110612f7357612f73614919565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03168152602001846003016000866001018581548110612fba57612fba614919565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490528251839083908110612ff557612ff5614919565b6020026020010181905250808061300b90614981565b915050612f4a565b61301b613195565b6001600160a01b0382166000908152600960205260408120905b82518110156124f35782818151811061305057613050614919565b60200260200101516020015182600301600085848151811061307457613074614919565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546130af9190614a0f565b909155508190506130bf81614981565b915050613035565b6000816130dc57506611c37937e08000919050565b611412600754613ef4565b6000816130fc57506611c37937e08000919050565b611412613107612504565b613ef4565b613114613adb565b6001600160a01b03811661314357604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61207481613b53565b600060016001600160a01b03851660009081526009602052604090205460ff16600481111561317d5761317d6145e1565b1461318a57506000611424565b6123c5848484613497565b6001546001600160a01b031633148015906131bb57506002546001600160a01b03163314155b80156131d257506003546001600160a01b03163314155b15611fb85760405163c5676b0760e01b815260040160405180910390fd5b60016001600160a01b03821660009081526009602052604090205460ff16600481111561321f5761321f6145e1565b1461207457604051630bc5fd6f60e21b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604081206001810154600482015491929161326c9190614906565b6001600160401b0381111561328357613283613ff9565b6040519080825280602002602001820160405280156132ce57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816132a15790505b50905060005b60018301548110156133945760008360010182815481106132f7576132f7614919565b60009182526020808320909101546001600160a01b03908116808452600d83526040808520858052845280852054928a168552600e84528085208286528452808520858052845280852083905580516060810182528281529384019490945292820181905285519293509185908590811061337457613374614919565b60200260200101819052505050808061338c90614981565b9150506132d4565b5060005b60048301548110156134675760008360040182815481106133bb576133bb614919565b60009182526020808320909101546001600160a01b03908116808452600d83526040808520600180875290855281862054938b168652600e855281862083875285528186208187528552948190208390558051606081018252828152938401859052830182905292870154929350918590613437908690614906565b8151811061344757613447614919565b60200260200101819052505050808061345f90614981565b915050613398565b507ffe05225747354ceccb716fc77f1b48ba5895a6456ea030e81768badd85ad4999816040516112939190614adc565b6001600160a01b03831660009081526009602052604081206001815460ff1660048111156134c7576134c76145e1565b146134d6576000915050611424565b821580156135415750836001600160a01b031663b55fe4e76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561351d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135419190614b30565b61354c576000613557565b680ad78ebc5ac62000005b6135638686600061142b565b6001600160a01b03861660009081526003840160205260409020546135889190614906565b6116969190614a0f565b600081156135be57816135ad670de0b6b3a764000085614a85565b6135b79190614ab2565b9050611412565b5060001992915050565b6001600160a01b0381166000908152600960205260408120815b6004820154811015611b6d57600082600401828154811061360557613605614919565b6000918252602080832091909101546005546001600160a01b0391821680855260078801909352604093849020549351637d3b6e7960e11b8152600481018490526024810194909452919350169063fa76dcf290604401602060405180830381865afa158015613679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369d9190614a47565b6136a79085614906565b93505080806136b590614981565b9150506135e2565b6001600160a01b03811660009081526009602052604081208190815b60048201548110156137e35760008260040182815481106136fc576136fc614919565b60009182526020822001546001600160a01b0316915061371e8783600161142b565b6005546001600160a01b038481166000908152600688016020526040902054929350169063fa76dcf2908490613755908590614906565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa15801561379e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c29190614a47565b6137cc9087614906565b9550505080806137db90614981565b9150506136d9565b5060005b60018201548110156138f157600082600101828154811061380a5761380a614919565b60009182526020822001546001600160a01b0316915061382c8783600161142b565b6005546001600160a01b038481166000908152600388016020526040902054929350169063fa76dcf2908490613863908590614906565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156138ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d09190614a47565b6138da9086614906565b9450505080806138e990614981565b9150506137e7565b5050915091565b6000805b8251811015612cd85760055483516001600160a01b039091169063fa76dcf29085908490811061392e5761392e614919565b60200260200101516000015185848151811061394c5761394c614919565b6020026020010151602001516040518363ffffffff1660e01b81526004016139899291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156139a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ca9190614a47565b6139d49083614906565b9150806139e081614981565b9150506138fc565b6000805b8251811015612cd8576000838281518110613a0957613a09614919565b6020908102919091018101516005546001600160a01b038083166000818152600a8652604090819020548151637d3b6e7960e11b8152600481019390935260248301525193955091169263fa76dcf2926044808401938290030181865afa158015613a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9c9190614a47565b613aa69084614906565b9250508080613ab490614981565b9150506139ec565b6000670de0b6b3a7640000613ad18385614a85565b6114249190614ab2565b6000546001600160a01b03163314611fb85760405163118cdaa760e01b815233600482015260240161313a565b6001600160a01b038116613b2f5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361235157604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818310613bb25781611424565b5090919050565b60078190556040518181527fe69c4a32fbb3c90560e69557d4753f018f5d533d73c61df2219dfc49c81c36c79060200160405180910390a1600060085442613c019190614a0f565b9050603c8110612351574260088190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc9060200160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1690816004811115613c7757613c776145e1565b14158015613c9757506001816004811115613c9457613c946145e1565b14155b613ca357613ca3614ac6565b6001600160a01b03831660009081526009602052604090205461010090046001600160801b0316613cd5600184614a0f565b816001600160801b03161115613ced57613ced614ac6565b60006010613cfc600186614a0f565b81548110613d0c57613d0c614919565b600091825260209091200154601080546001600160a01b03909216925082916001600160801b038516908110613d4457613d44614919565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600983526040918290208054610100600160881b0319166101006001600160801b038816908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a16010805480613de857613de8614b4d565b600082815260209020810160001990810180546001600160a01b03191690550190555050505050565b600061141260c883614ab2565b6000603c60085442613e309190614a0f565b613e3a9190614ab2565b905090565b6000631f540500821115613e5557631f54050091505b81600003613e6c5750670de0b6b3a7640000611412565b670de0b6b3a764000083835b6001811115613ee057613e8c600282614b63565b600003613eb157613e9d8283613f17565b9150613eaa600282614ab2565b9050613e78565b613ebb8284613f17565b9250613ec78283613f17565b91506002613ed6600183614a0f565b613eaa9190614ab2565b613eea8284613f17565b9695505050505050565b6000611412613f0a836611c37937e08000614906565b66b1a2bc2ec50000613ba3565b600080613f248385614a85565b9050670de0b6b3a7640000613f3a600282614ab2565b613f449083614906565b6123c59190614ab2565b508054600082559060005260206000209081019061207491905b80821115613f7c5760008155600101613f68565b5090565b6001600160a01b038116811461207457600080fd5b801515811461207457600080fd5b60008060408385031215613fb657600080fd5b8235613fc181613f80565b91506020830135613fd181613f95565b809150509250929050565b600060208284031215613fee57600080fd5b813561142481613f80565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561403157614031613ff9565b60405290565b604051606081016001600160401b038111828210171561403157614031613ff9565b604051601f8201601f191681016001600160401b038111828210171561408157614081613ff9565b604052919050565b60006001600160401b038211156140a2576140a2613ff9565b5060051b60200190565b600082601f8301126140bd57600080fd5b813560206140d26140cd83614089565b614059565b82815260059290921b840181019181810190868411156140f157600080fd5b8286015b8481101561411557803561410881613f80565b83529183019183016140f5565b509695505050505050565b6000806040838503121561413357600080fd5b82356001600160401b0381111561414957600080fd5b614155858286016140ac565b9250506020830135613fd181613f80565b600082601f83011261417757600080fd5b813560206141876140cd83614089565b82815260069290921b840181019181810190868411156141a657600080fd5b8286015b8481101561411557604081890312156141c35760008081fd5b6141cb61400f565b81356141d681613f80565b815281850135858201528352918301916040016141aa565b60006020828403121561420057600080fd5b81356001600160401b0381111561421657600080fd5b6123c584828501614166565b600081518084526020808501945080840160005b8381101561426657815180516001600160a01b031688528301518388015260409096019590820190600101614236565b509495945050505050565b6020815260006114246020830184614222565b6000806040838503121561429757600080fd5b50508035926020909101359150565b6000806000606084860312156142bb57600080fd5b83356142c681613f80565b925060208401356142d681613f80565b915060408401356142e681613f95565b809150509250925092565b600080600080600060a0868803121561430957600080fd5b853561431481613f80565b945060208601356001600160401b038082111561433057600080fd5b61433c89838a01614166565b9550604088013591508082111561435257600080fd5b61435e89838a01614166565b9450606088013591508082111561437457600080fd5b61438089838a01614166565b9350608088013591508082111561439657600080fd5b506143a388828901614166565b9150509295509295909350565b600081518084526020808501945080840160005b838110156142665781516001600160a01b0316875295820195908201906001016143c4565b60208152600061142460208301846143b0565b60006020828403121561440e57600080fd5b5035919050565b600080604080848603121561442957600080fd5b83356001600160401b038082111561444057600080fd5b61444c878388016140ac565b945060209150818601358181111561446357600080fd5b86019050601f8101871361447657600080fd5b80356144846140cd82614089565b8181526060918202830184019184820191908a8411156144a357600080fd5b938501935b838510156144fd5780858c0312156144c05760008081fd5b6144c8614037565b85356144d381613f80565b8152858701356144e281613f95565b818801528588013588820152835293840193918501916144a8565b508096505050505050509250929050565b6000806040838503121561452157600080fd5b823561452c81613f80565b946020939093013593505050565b6000806040838503121561454d57600080fd5b823591506020830135613fd181613f95565b60008060008060008060c0878903121561457857600080fd5b863561458381613f80565b9550602087013561459381613f80565b945060408701356145a381613f80565b935060608701356145b381613f80565b925060808701356145c381613f80565b915060a08701356145d381613f80565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60058110614607576146076145e1565b9052565b6040810161461982856145f7565b6001600160801b03831660208301529392505050565b6000806040838503121561464257600080fd5b823561464d81613f80565b91506020830135613fd181613f80565b60008060006060848603121561467257600080fd5b83356001600160401b0381111561468857600080fd5b614694868287016140ac565b93505060208401356146a581613f80565b91506040840135600581106142e657600080fd5b60008060408084860312156146cd57600080fd5b83356146d881613f80565b92506020848101356001600160401b038111156146f457600080fd5b8501601f8101871361470557600080fd5b80356147136140cd82614089565b8181526060918202830184019184820191908a84111561473257600080fd5b938501935b838510156144fd5780858c03121561474f5760008081fd5b614757614037565b853561476281613f80565b81528587013587820152878601358882015283529384019391850191614737565b600060208083528351808285015260005b818110156147b057858101830151858201604001528201614794565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156147e457600080fd5b82356147ef81613f80565b915060208301356001600160401b0381111561480a57600080fd5b61481685828601614166565b9150509250929050565b608080825285518282018190526000919060a090818501906020808b01865b838110156148b657815180516001600160a01b031686528381015115158487015260408082015190870152606080820151908701528781015188870152868101518787015260c0808201519087015260e080820151908701526101009081015190860152610120909401939082019060010161483f565b505086019890985260408501969096525050506060015292915050565b6000602082840312156148e557600080fd5b813561142481613f95565b634e487b7160e01b600052601160045260246000fd5b80820180821115611412576114126148f0565b634e487b7160e01b600052603260045260246000fd5b60038110614607576146076145e1565b6001600160a01b0386168152841515602082015260a08101614964604083018661492f565b614971606083018561492f565b8260808301529695505050505050565b600060018201614993576149936148f0565b5060010190565b600081518084526020808501945080840160005b8381101561426657815180516001600160a01b031688528381015115158489015260409081015190880152606090960195908201906001016149ae565b6001600160a01b03831681526040602082018190526000906123c59083018461499a565b81810381811115611412576114126148f0565b6001600160a01b03841681528215156020820152606081016123c5604083018461492f565b600060208284031215614a5957600080fd5b5051919050565b604081526000614a736040830185614222565b82810360208401526116968185614222565b8082028115828204841417611412576114126148f0565b634e487b7160e01b600052601260045260246000fd5b600082614ac157614ac1614a9c565b500490565b634e487b7160e01b600052600160045260246000fd5b602081526000611424602083018461499a565b6001600160a01b03831681526040810161142460208301846145f7565b6001600160a01b03831681526040602082018190526000906123c5908301846143b0565b600060208284031215614b4257600080fd5b815161142481613f95565b634e487b7160e01b600052603160045260246000fd5b600082614b7257614b72614a9c565b50069056fea2646970667358221220e53fc89f2af53150de4c330d11d9a13eb07c27dff939ce1801773b8e4475474364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getTroveStakeValue(address)": {
        "params": {
          "_borrower": "Address of borrower"
        },
        "returns": {
          "_0": "stakedUSDValue USD value of total staked collaterals of borrower"
        }
      },
      "getTroveStakes(address,address)": {
        "params": {
          "_borrower": "Address of borrower",
          "_token": "Address of collateral token"
        },
        "returns": {
          "_0": "stakes Staked amount of given collateral token of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTroveOwnerToArray(address)": {
        "notice": "trove opening + closing*"
      },
      "getCurrentICR(address)": {
        "notice": "collateral ratios*"
      },
      "getEntireDebtAndColl(address)": {
        "notice": "trove debt + coll getters*"
      },
      "getStableCoinBaseRate()": {
        "notice": "Helper*"
      },
      "getTroveOwnersCount()": {
        "notice": "troves status*"
      },
      "getTroveStakeValue(address)": {
        "notice": "Return borrowers staked value in USD"
      },
      "getTroveStakes(address,address)": {
        "notice": "Get Borrower's staked token amount, not in USD value"
      },
      "increaseTroveColl(address,(address,uint256)[])": {
        "notice": "collateral and debt setters*"
      },
      "redistributeDebtAndColl(address[],(address,bool,uint256)[])": {
        "notice": "redistribution*"
      },
      "updateStakeAndTotalStakes(address[],address)": {
        "notice": "collateral stakes*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23410,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 23412,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "redemptionOperationsAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 23414,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "liquidationOperationsAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 23417,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "storagePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStoragePool)11041"
      },
      {
        "astId": 23420,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 23423,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISortedTroves)10608"
      },
      {
        "astId": 23434,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "stableCoinBaseRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 23436,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 23475,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "Troves",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Trove)23470_storage)"
      },
      {
        "astId": 23479,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "totalStakes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23483,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23487,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "totalCollateralSnapshots",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23493,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "liquidatedTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 23501,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_uint256)))"
      },
      {
        "astId": 23507,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "lastErrorRedistribution",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 23510,
        "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IDebtToken)10082)dyn_storage": {
        "base": "t_contract(IDebtToken)10082",
        "encoding": "dynamic_array",
        "label": "contract IDebtToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDebtToken)10082": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)10608": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)11041": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_enum(Status)9539": {
        "encoding": "inplace",
        "label": "enum IBBase.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bool => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bool,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Trove)23470_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TroveManager.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)23470_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bool,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IDebtToken)10082,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IDebtToken)10082",
        "label": "mapping(contract IDebtToken => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Trove)23470_storage": {
        "encoding": "inplace",
        "label": "struct TroveManager.Trove",
        "members": [
          {
            "astId": 23439,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)9539"
          },
          {
            "astId": 23441,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 23445,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "debtTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(IDebtToken)10082)dyn_storage"
          },
          {
            "astId": 23449,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "debtsRegistered",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23454,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "debts",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_contract(IDebtToken)10082,t_uint256)"
          },
          {
            "astId": 23457,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "collTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 23461,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "collsRegistered",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23465,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "colls",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23469,
            "contract": "contracts/Mock/MockTroveManager.sol:MockTroveManager",
            "label": "stakes",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}