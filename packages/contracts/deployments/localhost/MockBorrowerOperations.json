{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "ActiveTrove",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollWithdrawPermittedInRM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ICRDecreasedInRM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ICR_lt_CCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ICR_lt_MCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientDebtToRepay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxFee_gt_100_InRM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxFee_out_Range",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedInRecoveryMode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromStabilityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromSwapOps",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Repaid_gt_CurrentDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TCR_lt_CCR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TroveClosedOrNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawAmount_gt_Coll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDebtChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDebtRepay",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_reservePoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerOperationsInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidBorrowingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addCollWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collTokenManager",
      "outputs": [
        {
          "internalType": "contract ICollTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManager",
      "outputs": [
        {
          "internalType": "contract IDebtTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IDebtToken",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "netDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBBase.DebtTokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        }
      ],
      "name": "getCompositeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_meta",
          "type": "tuple"
        }
      ],
      "name": "increaseDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "upperHint",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lowerHint",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.MintMeta",
          "name": "_meta",
          "type": "tuple"
        }
      ],
      "name": "increaseDebts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_collTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "mock_increaseTroveColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "openTroveWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayDebtFromPoolBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePool",
      "outputs": [
        {
          "internalType": "contract IReservePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reservePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collTokenManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        }
      ],
      "name": "testDebtToken_burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        }
      ],
      "name": "testDebtToken_mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "testStoragePool_addValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "testStoragePool_subtractValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_fromType",
          "type": "uint8"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_toType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "testStoragePool_transferBetweenTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "testStoragePool_withdrawalValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "testTroveManager_closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IDebtToken",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "netDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBBase.DebtTokenAmount[]",
          "name": "_debtTokenAmounts",
          "type": "tuple[]"
        }
      ],
      "name": "testTroveManager_increaseTroveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "testTroveManager_setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManager",
      "outputs": [
        {
          "internalType": "contract ITroveManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_colls",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29bacab72744d6b35a4fcdd058f34a5720375d876519baed7121576a634c7102",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4066616",
    "logsBloom": "0x
    "blockHash": "0xc85a0096c58b3f629ad6fd99793439d1d50ae6a32025ca73129bbbd41c9f1059",
    "transactionHash": "0x29bacab72744d6b35a4fcdd058f34a5720375d876519baed7121576a634c7102",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x29bacab72744d6b35a4fcdd058f34a5720375d876519baed7121576a634c7102",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc85a0096c58b3f629ad6fd99793439d1d50ae6a32025ca73129bbbd41c9f1059"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "4066616",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveTrove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollWithdrawPermittedInRM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICRDecreasedInRM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICR_lt_CCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ICR_lt_MCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientDebtToRepay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxFee_gt_100_InRM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxFee_out_Range\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromStabilityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromSwapOps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Repaid_gt_CurrentDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TCR_lt_CCR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TroveClosedOrNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAmount_gt_Coll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDebtChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDebtRepay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_reservePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidBorrowingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addCollWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collTokenManager\",\"outputs\":[{\"internalType\":\"contract ICollTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManager\",\"outputs\":[{\"internalType\":\"contract IDebtTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IBBase.DebtTokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_meta\",\"type\":\"tuple\"}],\"name\":\"increaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.MintMeta\",\"name\":\"_meta\",\"type\":\"tuple\"}],\"name\":\"increaseDebts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_collTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"mock_increaseTroveColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"openTroveWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayDebtFromPoolBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"contract IReservePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collTokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"name\":\"testDebtToken_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"name\":\"testDebtToken_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testStoragePool_addValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testStoragePool_subtractValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_fromType\",\"type\":\"uint8\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_toType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testStoragePool_transferBetweenTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testStoragePool_withdrawalValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"testTroveManager_closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IBBase.DebtTokenAmount[]\",\"name\":\"_debtTokenAmounts\",\"type\":\"tuple[]\"}],\"name\":\"testTroveManager_increaseTroveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"testTroveManager_setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_colls\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimCollateral()\":{\"notice\":\"Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mock/MockBorrowerOperations.sol\":\"MockBorrowerOperations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IBorrowerOperations.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IReservePool.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IBBase.sol';\\nimport './Interfaces/ICollTokenManager.sol';\\nimport './Interfaces/ISortedTroves.sol';\\nimport './Interfaces/ICollSurplusPool.sol';\\n\\ncontract BorrowerOperations is LiquityBase, Ownable(msg.sender), CheckContract, IBorrowerOperations {\\n  string public constant NAME = 'BorrowerOperations';\\n\\n  // --- Connected contract declarations ---\\n\\n  ITroveManager public troveManager;\\n  IDebtTokenManager public debtTokenManager;\\n  ICollTokenManager public collTokenManager;\\n  IStoragePool public storagePool;\\n  IReservePool public reservePool;\\n  IPriceFeed public priceFeed;\\n  ISortedTroves public sortedTroves;\\n  ICollSurplusPool public collSurplusPool;\\n  address stabilityPoolAddress;\\n  address swapOperations;\\n\\n  /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n  struct LocalVariables_openTrove {\\n    address[] collTokenAddresses;\\n    //\\n    TokenAmount[] colls;\\n    DebtTokenAmount[] debts;\\n    uint compositeDebtInUSD;\\n    uint compositeCollInUSD;\\n    uint ICR;\\n    uint arrayIndex;\\n    //\\n    bool isInRecoveryMode;\\n    uint TCR;\\n    uint entireSystemColl;\\n    uint entireSystemDebt;\\n  }\\n\\n  struct LocalVariables_adjustTrove {\\n    address[] collTokenAddresses;\\n    //\\n    TokenAmount[] colls;\\n    DebtTokenAmount[] debts;\\n    DebtTokenAmount stableCoinEntry;\\n    //\\n    uint oldCompositeDebtInUSD;\\n    uint oldCompositeCollInUSD;\\n    uint oldICR;\\n    //\\n    uint newCompositeDebtInUSD;\\n    uint newCompositeCollInUSD;\\n    uint newICR;\\n    uint remainingStableDebt;\\n    //\\n    bool isInRecoveryMode;\\n    uint entireSystemColl;\\n    uint entireSystemDebt;\\n  }\\n\\n  struct LocalVariables_closeTrove {\\n    bool isInRecoveryMode;\\n    uint newTCR;\\n    uint entireSystemColl;\\n    uint entireSystemDebt;\\n  }\\n\\n  struct ContractsCache {\\n    ITroveManager troveManager;\\n    IStoragePool storagePool;\\n    IDebtTokenManager debtTokenManager;\\n    ICollTokenManager collTokenManager;\\n  }\\n\\n  // --- Dependency setters ---\\n\\n  function setAddresses(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _stabilityPoolAddress,\\n    address _reservePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _swapOperationsAddress,\\n    address _sortedTrovesAddress,\\n    address _collSurplusPoolAddress\\n  ) external onlyOwner {\\n    checkContract(_troveManagerAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_stabilityPoolAddress);\\n    checkContract(_reservePoolAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_debtTokenManagerAddress);\\n    checkContract(_collTokenManagerAddress);\\n    checkContract(_swapOperationsAddress);\\n    checkContract(_sortedTrovesAddress);\\n    checkContract(_collSurplusPoolAddress);\\n\\n    troveManager = ITroveManager(_troveManagerAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    stabilityPoolAddress = _stabilityPoolAddress;\\n    reservePool = IReservePool(_reservePoolAddress);\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    debtTokenManager = IDebtTokenManager(_debtTokenManagerAddress);\\n    collTokenManager = ICollTokenManager(_collTokenManagerAddress);\\n    swapOperations = _swapOperationsAddress;\\n    sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n    collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n\\n    emit BorrowerOperationsInitialized(\\n      _troveManagerAddress,\\n      _storagePoolAddress,\\n      _stabilityPoolAddress,\\n      _reservePoolAddress,\\n      _priceFeedAddress,\\n      _debtTokenManagerAddress,\\n      _collTokenManagerAddress,\\n      _swapOperationsAddress,\\n      _sortedTrovesAddress,\\n      _collSurplusPoolAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  // --- Borrower Trove Operations ---\\n\\n  function openTrove(TokenAmount[] memory _colls) public override {\\n    ContractsCache memory contractsCache = ContractsCache(\\n      troveManager,\\n      storagePool,\\n      debtTokenManager,\\n      collTokenManager\\n    );\\n    LocalVariables_openTrove memory vars;\\n    vars.collTokenAddresses = contractsCache.collTokenManager.getCollTokenAddresses();\\n    address borrower = msg.sender;\\n\\n    _requireTroveIsNotActive(contractsCache.troveManager, borrower);\\n\\n    // adding gas compensation to the net debt\\n    DebtTokenAmount memory stableCoinAmount = DebtTokenAmount(\\n      contractsCache.debtTokenManager.getStableCoin(),\\n      STABLE_COIN_GAS_COMPENSATION,\\n      0\\n    );\\n    vars.debts = new DebtTokenAmount[](1);\\n    vars.debts[0] = stableCoinAmount;\\n    // ICR is based on the composite debt, i.e. the requested debt amount + borrowing fee + debt gas comp.\\n    vars.compositeDebtInUSD = _getCompositeDebt(vars.debts);\\n\\n    vars.colls = _colls;\\n    vars.compositeCollInUSD = _getCompositeColl(vars.colls);\\n\\n    vars.ICR = LiquityMath._computeCR(vars.compositeCollInUSD, vars.compositeDebtInUSD);\\n\\n    (\\n      // checking collateral ratios\\n      vars.isInRecoveryMode,\\n      ,\\n      vars.entireSystemColl,\\n      vars.entireSystemDebt\\n    ) = contractsCache.storagePool.checkRecoveryMode();\\n    if (vars.isInRecoveryMode) {\\n      _requireICRisAboveCCR(vars.ICR); // > 150 %\\n    } else {\\n      _requireICRisAboveMCR(vars.ICR); // > 110 %\\n\\n      uint newTCR = _getNewTCRFromTroveChange(\\n        vars.compositeCollInUSD,\\n        true,\\n        vars.compositeDebtInUSD,\\n        true,\\n        vars.entireSystemColl,\\n        vars.entireSystemDebt\\n      ); // bools: coll increase, debt increase\\n      _requireNewTCRisAboveCCR(newTCR); // > 150 %\\n    }\\n\\n    // Set the trove struct's properties\\n    contractsCache.troveManager.setTroveStatus(borrower, 1); // active\\n    contractsCache.troveManager.increaseTroveColl(borrower, vars.colls);\\n    contractsCache.troveManager.increaseTroveDebt(borrower, vars.debts);\\n    contractsCache.troveManager.updateTroveRewardSnapshots(borrower);\\n    contractsCache.troveManager.updateStakeAndTotalStakes(vars.collTokenAddresses, borrower);\\n\\n    // just adding the trove to the general list, but not the sorted one, cause no redeemable stable debt yet\\n    vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(borrower);\\n\\n    // Move the coll to the active pool\\n    for (uint i = 0; i < vars.colls.length; i++) {\\n      TokenAmount memory collTokenAmount = vars.colls[i];\\n      _poolAddColl(\\n        borrower,\\n        contractsCache.storagePool,\\n        collTokenAmount.tokenAddress,\\n        collTokenAmount.amount,\\n        PoolType.Active\\n      );\\n    }\\n\\n    // Move the stable coin gas compensation to the Gas Pool\\n    contractsCache.storagePool.addValue(\\n      address(stableCoinAmount.debtToken),\\n      false,\\n      PoolType.GasCompensation,\\n      stableCoinAmount.netDebt\\n    );\\n    stableCoinAmount.debtToken.mint(address(contractsCache.storagePool), stableCoinAmount.netDebt);\\n\\n    emit TroveCreated(borrower, _colls);\\n  }\\n\\n  function openTroveWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external {\\n    for (uint i = 0; i < _colls.length; i++) {\\n      IERC20Permit(_colls[i].tokenAddress).permit(\\n        msg.sender,\\n        address(this),\\n        _colls[i].amount,\\n        deadline,\\n        v[i],\\n        r[i],\\n        s[i]\\n      );\\n    }\\n    openTrove(_colls);\\n  }\\n\\n  // Send collateral to a trove\\n  function addColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) public override {\\n    address borrower = msg.sender;\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(borrower);\\n\\n    vars.newCompositeCollInUSD += _getCompositeColl(_colls);\\n    contractsCache.troveManager.increaseTroveColl(borrower, _colls);\\n\\n    for (uint i = 0; i < _colls.length; i++) {\\n      TokenAmount memory collTokenAmount = _colls[i];\\n      _poolAddColl(\\n        borrower,\\n        contractsCache.storagePool,\\n        collTokenAmount.tokenAddress,\\n        collTokenAmount.amount,\\n        PoolType.Active\\n      );\\n    }\\n\\n    _finaliseTrove(false, false, contractsCache, vars, borrower, _upperHint, _lowerHint);\\n  }\\n\\n  function addCollWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external {\\n    for (uint i = 0; i < _colls.length; i++) {\\n      IERC20Permit(_colls[i].tokenAddress).permit(\\n        msg.sender,\\n        address(this),\\n        _colls[i].amount,\\n        deadline,\\n        v[i],\\n        r[i],\\n        s[i]\\n      );\\n    }\\n    addColl(_colls, _upperHint, _lowerHint);\\n  }\\n\\n  // Withdraw collateral from a trove\\n  function withdrawColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external override {\\n    address borrower = msg.sender;\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(borrower);\\n\\n    uint withdrawCompositeInUSD = _getCompositeColl(_colls);\\n    if (withdrawCompositeInUSD > vars.newCompositeCollInUSD) revert WithdrawAmount_gt_Coll();\\n    vars.newCompositeCollInUSD -= withdrawCompositeInUSD;\\n\\n    contractsCache.troveManager.decreaseTroveColl(borrower, _colls);\\n\\n    for (uint i = 0; i < _colls.length; i++) {\\n      TokenAmount memory collTokenAmount = _colls[i];\\n\\n      // checking is the trove has enough coll for the withdrawal\\n      TokenAmount memory existingColl;\\n      for (uint ii = 0; ii < vars.colls.length; ii++) {\\n        if (vars.colls[ii].tokenAddress != collTokenAmount.tokenAddress) continue;\\n        existingColl = vars.colls[ii];\\n        break;\\n      }\\n      assert(existingColl.amount >= collTokenAmount.amount);\\n\\n      _poolSubtractColl(\\n        borrower,\\n        contractsCache.storagePool,\\n        collTokenAmount.tokenAddress,\\n        collTokenAmount.amount,\\n        PoolType.Active\\n      );\\n    }\\n\\n    _finaliseTrove(true, false, contractsCache, vars, borrower, _upperHint, _lowerHint);\\n  }\\n\\n  function increaseDebt(\\n    address _borrower,\\n    address _to,\\n    TokenAmount[] memory _debts,\\n    MintMeta memory _meta\\n  ) external override {\\n    _requireCallerIsSwapOperations();\\n    _increaseDebt(_borrower, _to, _debts, _meta);\\n  }\\n\\n  // increasing debt off a trove\\n  function _increaseDebt(address _borrower, address _to, TokenAmount[] memory _debts, MintMeta memory _meta) internal {\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(_borrower);\\n\\n    _requireValidMaxFeePercentage(_meta.maxFeePercentage, vars.isInRecoveryMode);\\n\\n    // checking if new debt is above the minimum\\n    for (uint i = 0; i < _debts.length; i++) _requireNonZeroDebtChange(_debts[i].amount);\\n\\n    (\\n      DebtTokenAmount[] memory debtsToAdd,\\n      DebtTokenAmount memory stableCoinAmount\\n    ) = _getDebtTokenAmountsWithFetchedPrices(contractsCache.debtTokenManager, _debts);\\n\\n    // adding the borrowing fee to the net debt\\n    uint borrowingFeesPaid = 0;\\n    if (!vars.isInRecoveryMode)\\n      borrowingFeesPaid = _addBorrowingFees(\\n        contractsCache.troveManager,\\n        debtsToAdd,\\n        stableCoinAmount,\\n        _meta.maxFeePercentage\\n      );\\n\\n    vars.newCompositeDebtInUSD += _getCompositeDebt(debtsToAdd);\\n    contractsCache.troveManager.increaseTroveDebt(_borrower, debtsToAdd);\\n\\n    for (uint i = 0; i < debtsToAdd.length; i++) {\\n      DebtTokenAmount memory debtTokenAmount = debtsToAdd[i];\\n      _poolAddDebt(\\n        _to,\\n        contractsCache.storagePool,\\n        debtTokenAmount.debtToken,\\n        debtTokenAmount.netDebt,\\n        debtTokenAmount.borrowingFee\\n      );\\n    }\\n\\n    vars.remainingStableDebt += stableCoinAmount.netDebt; // added stable debt (including all fees)\\n    _finaliseTrove(false, true, contractsCache, vars, _borrower, _meta.upperHint, _meta.lowerHint);\\n  }\\n\\n  // repay debt of a trove\\n  function repayDebt(TokenAmount[] memory _debts, address _upperHint, address _lowerHint) external override {\\n    address borrower = msg.sender;\\n\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(borrower);\\n    (DebtTokenAmount[] memory debtsToRemove, DebtTokenAmount memory stableCoinEntry) = _handleRepayStates(\\n      contractsCache,\\n      vars,\\n      borrower,\\n      _debts\\n    );\\n\\n    for (uint i = 0; i < debtsToRemove.length; i++) {\\n      DebtTokenAmount memory debtTokenAmount = debtsToRemove[i];\\n      _poolRepayDebt(\\n        borrower,\\n        contractsCache.storagePool,\\n        debtTokenAmount.debtToken,\\n        debtTokenAmount.netDebt // it is not possible to repay the gasComp, this happens only when the trove is closed\\n      );\\n    }\\n\\n    vars.remainingStableDebt -= stableCoinEntry.netDebt;\\n    _finaliseTrove(false, false, contractsCache, vars, borrower, _upperHint, _lowerHint);\\n  }\\n\\n  // repay debt of a trove directly from swap ops after pool liquidity removal (burning)\\n  // the debt tokens are directly burned from the swap ops\\n  function repayDebtFromPoolBurn(\\n    address borrower,\\n    TokenAmount[] memory _debts,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external override {\\n    _requireCallerIsSwapOperations();\\n\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(borrower);\\n    (DebtTokenAmount[] memory debtsToRemove, DebtTokenAmount memory stableCoinEntry) = _handleRepayStates(\\n      contractsCache,\\n      vars,\\n      borrower,\\n      _debts\\n    );\\n\\n    for (uint i = 0; i < debtsToRemove.length; i++) {\\n      DebtTokenAmount memory debtTokenAmount = debtsToRemove[i];\\n      contractsCache.storagePool.subtractValue(\\n        address(debtTokenAmount.debtToken),\\n        false,\\n        PoolType.Active,\\n        debtTokenAmount.netDebt\\n      );\\n    }\\n\\n    vars.remainingStableDebt -= stableCoinEntry.netDebt;\\n    _finaliseTrove(false, false, contractsCache, vars, borrower, _upperHint, _lowerHint);\\n  }\\n\\n  function _handleRepayStates(\\n    ContractsCache memory contractsCache,\\n    LocalVariables_adjustTrove memory vars,\\n    address borrower,\\n    TokenAmount[] memory _debts\\n  ) internal returns (DebtTokenAmount[] memory debtsToRemove, DebtTokenAmount memory stableCoinEntry) {\\n    (debtsToRemove, stableCoinEntry) = _getDebtTokenAmountsWithFetchedPrices(contractsCache.debtTokenManager, _debts);\\n    vars.newCompositeDebtInUSD -= _getCompositeDebt(debtsToRemove);\\n    contractsCache.troveManager.decreaseTroveDebt(borrower, debtsToRemove);\\n\\n    for (uint i = 0; i < debtsToRemove.length; i++) {\\n      DebtTokenAmount memory debtTokenAmount = debtsToRemove[i];      \\n      address debtTokenAddress = address(debtTokenAmount.debtToken);\\n\\n      // check zero amount\\n      if (debtTokenAmount.netDebt == 0) revert ZeroDebtRepay();\\n\\n      // checking if the trove has enough debt for the repayment (gas comp needs to remain)\\n      DebtTokenAmount memory existingDebt;\\n      for (uint ii = 0; ii < vars.debts.length; ii++) {\\n        if (address(vars.debts[ii].debtToken) != debtTokenAddress) continue;\\n        existingDebt = vars.debts[ii];\\n        break;\\n      }\\n      _requireAtLeastMinNetDebt(existingDebt.netDebt, debtTokenAmount.netDebt);\\n\\n      if (debtTokenAmount.debtToken.isStableCoin())\\n        _requireValidStableCoinRepayment(existingDebt.netDebt, debtTokenAmount.netDebt);\\n    }\\n\\n    return (debtsToRemove, stableCoinEntry);\\n  }\\n\\n  function closeTrove() external override {\\n    address borrower = msg.sender;\\n    (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) = _prepareTroveAdjustment(borrower);\\n\\n    _requireNotInRecoveryMode(vars.isInRecoveryMode);\\n\\n    uint newTCR = _getNewTCRFromTroveChange(\\n      vars.oldCompositeCollInUSD,\\n      false,\\n      vars.oldCompositeDebtInUSD,\\n      false,\\n      vars.entireSystemColl,\\n      vars.entireSystemDebt\\n    );\\n    _requireNewTCRisAboveCCR(newTCR);\\n\\n    // repay any open debts\\n    for (uint i = 0; i < vars.debts.length; i++) {\\n      DebtTokenAmount memory debtTokenAmount = vars.debts[i];\\n\\n      uint toRepay;\\n      if (debtTokenAmount.debtToken.isStableCoin()) toRepay = debtTokenAmount.netDebt - STABLE_COIN_GAS_COMPENSATION;\\n      else toRepay = debtTokenAmount.netDebt;\\n      if (toRepay == 0) continue;\\n\\n      _poolRepayDebt(borrower, contractsCache.storagePool, debtTokenAmount.debtToken, toRepay);\\n    }\\n\\n    // burn the gas compensation\\n    _poolBurnGasComp(contractsCache.storagePool, vars.stableCoinEntry.debtToken);\\n\\n    // Send the collateral back to the user\\n    for (uint i = 0; i < vars.colls.length; i++) {\\n      TokenAmount memory collTokenAmount = vars.colls[i];\\n\\n      _poolSubtractColl(\\n        borrower,\\n        contractsCache.storagePool,\\n        collTokenAmount.tokenAddress,\\n        collTokenAmount.amount,\\n        PoolType.Active\\n      );\\n    }\\n\\n    contractsCache.troveManager.removeStake(vars.collTokenAddresses, borrower);\\n    contractsCache.troveManager.closeTroveByProtocol(vars.collTokenAddresses, borrower, Status.closedByOwner);\\n  }\\n\\n  /**\\n   * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n   */\\n  function claimCollateral() external override {\\n    collSurplusPool.claimColl(msg.sender);\\n  }\\n\\n  // --- Helper functions ---\\n\\n  function _prepareTroveAdjustment(\\n    address _borrower\\n  ) internal returns (ContractsCache memory contractsCache, LocalVariables_adjustTrove memory vars) {\\n    contractsCache = ContractsCache(troveManager, storagePool, debtTokenManager, collTokenManager);\\n    vars.collTokenAddresses = contractsCache.collTokenManager.getCollTokenAddresses();\\n\\n    (vars.isInRecoveryMode, , vars.entireSystemColl, vars.entireSystemDebt) = contractsCache\\n      .storagePool\\n      .checkRecoveryMode();\\n\\n    _requireTroveisActive(contractsCache.troveManager, _borrower);\\n    contractsCache.troveManager.applyPendingRewards(_borrower); // from redistributions\\n\\n    // fetching old/current debts and colls including prices + calc ICR\\n    (vars.debts, vars.stableCoinEntry) = _getDebtTokenAmountsWithFetchedPrices(\\n      contractsCache.debtTokenManager,\\n      contractsCache.troveManager.getTroveDebt(_borrower)\\n    );\\n    vars.remainingStableDebt = vars.stableCoinEntry.netDebt;\\n    vars.oldCompositeDebtInUSD = _getCompositeDebt(vars.debts);\\n    vars.newCompositeDebtInUSD = vars.oldCompositeDebtInUSD;\\n\\n    vars.colls = contractsCache.troveManager.getTroveColl(_borrower);\\n    vars.oldCompositeCollInUSD = _getCompositeColl(vars.colls);\\n    vars.newCompositeCollInUSD = vars.oldCompositeCollInUSD;\\n\\n    vars.oldICR = LiquityMath._computeCR(vars.oldCompositeCollInUSD, vars.oldCompositeDebtInUSD);\\n\\n    return (contractsCache, vars);\\n  }\\n\\n  function _finaliseTrove(\\n    bool _isCollWithdrawal,\\n    bool _isDebtIncrease,\\n    ContractsCache memory contractsCache,\\n    LocalVariables_adjustTrove memory vars,\\n    address _borrower,\\n    address _upperHint,\\n    address _lowerHint\\n  ) internal {\\n    // calculate the new ICR\\n    vars.newICR = LiquityMath._computeCR(vars.newCompositeCollInUSD, vars.newCompositeDebtInUSD);\\n\\n    // Check the adjustment satisfies all conditions for the current system mode\\n    _requireValidAdjustmentInCurrentMode(_isCollWithdrawal, _isDebtIncrease, vars);\\n\\n    // update troves stake\\n    contractsCache.troveManager.updateStakeAndTotalStakes(vars.collTokenAddresses, _borrower);\\n\\n    // update the troves list position\\n    sortedTroves.update(\\n      _borrower,\\n      vars.newICR,\\n      vars.remainingStableDebt - STABLE_COIN_GAS_COMPENSATION,\\n      _upperHint,\\n      _lowerHint\\n    );\\n  }\\n\\n  function _getNewTCRFromTroveChange(\\n    uint _collChange,\\n    bool _isCollIncrease,\\n    uint _debtChange,\\n    bool _isDebtIncrease,\\n    uint entireSystemColl,\\n    uint entireSystemDebt\\n  ) internal pure returns (uint) {\\n    uint totalColl = _isCollIncrease ? entireSystemColl + _collChange : entireSystemColl - _collChange;\\n    uint totalDebt = _isDebtIncrease ? entireSystemDebt + _debtChange : entireSystemDebt - _debtChange;\\n\\n    uint newTCR = LiquityMath._computeCR(totalColl, totalDebt);\\n    return newTCR;\\n  }\\n\\n  function _addBorrowingFees(\\n    ITroveManager _troveManager,\\n    DebtTokenAmount[] memory _debts,\\n    DebtTokenAmount memory _stableCoinAmount,\\n    uint _maxFeePercentage\\n  ) internal returns (uint borrowingFee) {\\n    _troveManager.decayStableCoinBaseRateFromBorrowing(_stableCoinAmount.netDebt); // decay the baseRate state variable\\n\\n    uint compositeDebtInUSD = _getCompositeDebt(_debts);\\n    uint stableCoinDebtInUSE = priceFeed.getUSDValue(address(_stableCoinAmount.debtToken), _stableCoinAmount.netDebt);\\n    borrowingFee =\\n      _troveManager.getBorrowingFee(compositeDebtInUSD - stableCoinDebtInUSE, false) +\\n      _troveManager.getBorrowingFee(stableCoinDebtInUSE, true);\\n    _requireUserAcceptsFee(borrowingFee, compositeDebtInUSD, _maxFeePercentage);\\n\\n    // update troves debts\\n    uint stableCoinPrice = _stableCoinAmount.debtToken.getPrice();\\n    borrowingFee = (borrowingFee * DECIMAL_PRECISION) / stableCoinPrice;\\n    _stableCoinAmount.netDebt += borrowingFee;\\n    _stableCoinAmount.borrowingFee += borrowingFee;\\n    return borrowingFee;\\n  }\\n\\n  function _poolAddColl(\\n    address _borrower,\\n    IStoragePool _pool,\\n    address _collAddress,\\n    uint _amount,\\n    PoolType _poolType\\n  ) internal {\\n    _pool.addValue(_collAddress, true, _poolType, _amount);\\n    IERC20(_collAddress).transferFrom(_borrower, address(_pool), _amount);\\n  }\\n\\n  function _poolSubtractColl(\\n    address _borrower,\\n    IStoragePool _pool,\\n    address _collAddress,\\n    uint _amount,\\n    PoolType _poolType\\n  ) internal {\\n    _pool.withdrawalValue(_borrower, _collAddress, true, _poolType, _amount);\\n  }\\n\\n  function _poolAddDebt(\\n    address _tokenRecipient,\\n    IStoragePool _storagePool,\\n    IDebtToken _debtToken,\\n    uint _netDebtIncrease,\\n    uint _borrowingFee\\n  ) internal {\\n    _storagePool.addValue(address(_debtToken), false, PoolType.Active, _netDebtIncrease);\\n\\n    // payout issued debt to the recipient\\n    uint mintAmount = _netDebtIncrease - _borrowingFee;\\n    if (mintAmount > 0) _debtToken.mint(_tokenRecipient, mintAmount);\\n\\n    if (_borrowingFee == 0) return;\\n\\n    // forward the borrowing fee to the reserve pool (or gov staking)\\n    uint govStakingPayout = _borrowingFee;\\n    uint missingStableForReserveCap = reservePool.stableAmountUntilCap();\\n    if (missingStableForReserveCap > 0) {\\n      uint reserveTransfer = LiquityMath._min(_borrowingFee, missingStableForReserveCap);\\n      govStakingPayout -= reserveTransfer;\\n\\n      _debtToken.mint(address(reservePool), reserveTransfer);\\n    }\\n    if (govStakingPayout > 0) _debtToken.mint(GOV_STAKING_ADDRESS, govStakingPayout);\\n    emit PaidBorrowingFee(_tokenRecipient, _borrowingFee);\\n  }\\n\\n  function _poolRepayDebt(\\n    address _borrower,\\n    IStoragePool _storagePool,\\n    IDebtToken _debtToken,\\n    uint _repayAmount\\n  ) internal {\\n    _requireSufficientDebtBalance(_debtToken, _borrower, _repayAmount);\\n    _storagePool.subtractValue(address(_debtToken), false, PoolType.Active, _repayAmount);\\n    _debtToken.burn(_borrower, _repayAmount);\\n  }\\n\\n  function _poolBurnGasComp(IStoragePool _storagePool, IDebtToken _stableCoin) internal {\\n    _storagePool.subtractValue(address(_stableCoin), false, PoolType.GasCompensation, STABLE_COIN_GAS_COMPENSATION);\\n    _stableCoin.burn(address(_storagePool), STABLE_COIN_GAS_COMPENSATION);\\n  }\\n\\n  // --- 'Require' wrapper functions ---\\n\\n  function _requireCallerIsSwapOperations() internal view {\\n    if (msg.sender != swapOperations) revert NotFromSwapOps();\\n  }\\n\\n  function _requireCallerIsBorrower(address _borrower) internal view {\\n    if (msg.sender != _borrower) revert NotBorrower();\\n  }\\n\\n  function _requireTroveisActive(ITroveManager _troveManager, address _borrower) internal view {\\n    uint status = _troveManager.getTroveStatus(_borrower);\\n    if (status != 1) revert TroveClosedOrNotExist();\\n  }\\n\\n  function _requireNotInRecoveryMode(bool _isInRecoveryMode) internal pure {\\n    if (_isInRecoveryMode) revert NotAllowedInRecoveryMode();\\n  }\\n\\n  function _requireTroveIsNotActive(ITroveManager _troveManager, address _borrower) internal view {\\n    uint status = _troveManager.getTroveStatus(_borrower);\\n    if (status == 1) revert ActiveTrove();\\n  }\\n\\n  function _requireSufficientDebtBalance(IDebtToken _debtToken, address _borrower, uint _debtRepayment) internal view {\\n    if (_debtToken.balanceOf(_borrower) < _debtRepayment) revert InsufficientDebtToRepay();\\n  }\\n\\n  // adds stableCoin debt including gas compensation if not already included\\n  function _getDebtTokenAmountsWithFetchedPrices(\\n    IDebtTokenManager _dTokenManager,\\n    TokenAmount[] memory _debts\\n  ) internal view returns (DebtTokenAmount[] memory debtTokenAmounts, DebtTokenAmount memory stableCoinEntry) {\\n    address stableCoinAddress = address(_dTokenManager.getStableCoin());\\n\\n    bool stableCoinIncluded = false;\\n    for (uint i = 0; i < _debts.length; i++) {\\n      if (_debts[i].tokenAddress != stableCoinAddress) continue;\\n\\n      stableCoinIncluded = true;\\n      break;\\n    }\\n\\n    if (stableCoinIncluded) debtTokenAmounts = new DebtTokenAmount[](_debts.length);\\n    else debtTokenAmounts = new DebtTokenAmount[](_debts.length + 1);\\n\\n    for (uint i = 0; i < _debts.length; i++) {\\n      IDebtToken debtToken = _dTokenManager.getDebtToken(_debts[i].tokenAddress);\\n      debtTokenAmounts[i] = DebtTokenAmount(debtToken, _debts[i].amount, 0);\\n\\n      if (stableCoinIncluded && debtToken.isStableCoin()) stableCoinEntry = debtTokenAmounts[i];\\n    }\\n\\n    if (!stableCoinIncluded) {\\n      IDebtToken debtToken = _dTokenManager.getStableCoin();\\n      debtTokenAmounts[_debts.length] = DebtTokenAmount(debtToken, 0, 0);\\n      stableCoinEntry = debtTokenAmounts[_debts.length];\\n    }\\n\\n    return (debtTokenAmounts, stableCoinEntry);\\n  }\\n\\n  function _requireNonZeroDebtChange(uint _change) internal pure {\\n    if (_change == 0) revert ZeroDebtChange();\\n  }\\n\\n  function _requireValidAdjustmentInCurrentMode(\\n    bool _isCollWithdrawal,\\n    bool _isDebtIncrease,\\n    LocalVariables_adjustTrove memory _vars\\n  ) internal pure {\\n    /*\\n     *In Recovery Mode, only allow:\\n     *\\n     * - Pure collateral top-up\\n     * - Pure debt repayment\\n     * - Collateral top-up with debt repayment\\n     * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n     *\\n     * In Normal Mode, ensure:\\n     *\\n     * - The new ICR is above MCR\\n     * - The adjustment won't pull the TCR below CCR\\n     */\\n    if (_vars.isInRecoveryMode) {\\n      // BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\n      if (_isCollWithdrawal) revert CollWithdrawPermittedInRM();\\n      if (_isDebtIncrease) _requireICRisAboveCCR(_vars.newICR);\\n    } else {\\n      // if Normal Mode\\n      _requireICRisAboveMCR(_vars.newICR);\\n\\n      uint collChange = _vars.newCompositeCollInUSD > _vars.oldCompositeCollInUSD\\n        ? _vars.newCompositeCollInUSD - _vars.oldCompositeCollInUSD\\n        : _vars.oldCompositeCollInUSD - _vars.newCompositeCollInUSD;\\n      uint debtChange = _vars.newCompositeDebtInUSD > _vars.oldCompositeDebtInUSD\\n        ? _vars.newCompositeDebtInUSD - _vars.oldCompositeDebtInUSD\\n        : _vars.oldCompositeDebtInUSD - _vars.newCompositeDebtInUSD;\\n      uint newTCR = _getNewTCRFromTroveChange(\\n        collChange,\\n        !_isCollWithdrawal,\\n        debtChange,\\n        _isDebtIncrease,\\n        _vars.entireSystemColl,\\n        _vars.entireSystemDebt\\n      );\\n      _requireNewTCRisAboveCCR(newTCR);\\n    }\\n  }\\n\\n  function _requireICRisAboveMCR(uint _newICR) internal pure {\\n    // BorrowerOps: An operation that would result in ICR < MCR is not permitted\\n    if (_newICR < MCR) revert ICR_lt_MCR();\\n  }\\n\\n  function _requireICRisAboveCCR(uint _newICR) internal pure {\\n    // BorrowerOps: Operation must leave trove with ICR >= CCR\\n    if (_newICR < CCR) revert ICR_lt_CCR();\\n  }\\n\\n  function _requireNewICRisAboveOldICR(uint _newICR, uint _oldICR) internal pure {\\n    // BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\n    if (_newICR < _oldICR) revert ICRDecreasedInRM();\\n  }\\n\\n  function _requireNewTCRisAboveCCR(uint _newTCR) internal pure {\\n    // BorrowerOps: An operation that would result in TCR < CCR is not permitted\\n    if (_newTCR < CCR) revert TCR_lt_CCR();\\n  }\\n\\n  function _requireAtLeastMinNetDebt(uint _netDebt, uint _repayment) internal pure {\\n    if (_netDebt < _repayment) revert Repaid_gt_CurrentDebt();\\n  }\\n\\n  function _requireValidStableCoinRepayment(uint _currentDebt, uint _debtRepayment) internal pure {\\n    // BorrowerOps: Amount repaid must not be larger than the Trove's debt\\n    if (_debtRepayment > (_currentDebt - STABLE_COIN_GAS_COMPENSATION)) revert Repaid_gt_CurrentDebt();\\n  }\\n\\n  function _requireValidMaxFeePercentage(uint _maxFeePercentage, bool _isInRecoveryMode) internal pure {\\n    if (_isInRecoveryMode) {\\n      if (_maxFeePercentage > MAX_BORROWING_FEE) revert MaxFee_gt_100_InRM();\\n    } else {\\n      if (_maxFeePercentage < BORROWING_FEE_FLOOR || _maxFeePercentage > MAX_BORROWING_FEE) revert MaxFee_out_Range();\\n    }\\n  }\\n\\n  // --- ICR and TCR getters ---\\n\\n  function getCompositeDebt(DebtTokenAmount[] memory _debts) external view override returns (uint) {\\n    return _getCompositeDebt(_debts);\\n  }\\n\\n  function _getNetDebt(DebtTokenAmount[] memory _debts) internal view returns (uint) {\\n    return _getCompositeDebt(_debts) - STABLE_COIN_GAS_COMPENSATION;\\n  }\\n\\n  // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n  function _getCompositeDebt(DebtTokenAmount[] memory _debts) internal view returns (uint debtInUSD) {\\n    for (uint i = 0; i < _debts.length; i++)\\n      debtInUSD += priceFeed.getUSDValue(address(_debts[i].debtToken), _debts[i].netDebt);\\n  }\\n\\n  function _getCompositeColl(TokenAmount[] memory _colls) internal view returns (uint collInUSD) {\\n    for (uint i = 0; i < _colls.length; i++)\\n      collInUSD += priceFeed.getUSDValue(_colls[i].tokenAddress, _colls[i].amount);\\n  }\\n}\\n\",\"keccak256\":\"0x516f39336c453d424f19deac0d7ec93b93de94d61e154ce66522b14a5671d9c8\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations is IBBase {\\n  // --- Events ---\\n\\n  event BorrowerOperationsInitialized(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _stabilityPoolAddress,\\n    address _reservePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _swapOperationsAddress,\\n    address _sortedTrovesAddress,\\n    address _collSurplusPoolAddress\\n  );\\n  event TroveCreated(address _borrower, TokenAmount[] _colls);\\n  event PaidBorrowingFee(address indexed _borrower, uint amount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromStabilityPool();\\n  error NotFromSwapOps();\\n  error CollWithdrawPermittedInRM();\\n  error ICR_lt_MCR();\\n  error ICR_lt_CCR();\\n  error TCR_lt_CCR();\\n  error ICRDecreasedInRM();\\n  error MaxFee_gt_100_InRM();\\n  error MaxFee_out_Range();\\n  error Repaid_gt_CurrentDebt();\\n  error TroveClosedOrNotExist();\\n  error ActiveTrove();\\n  error NotAllowedInRecoveryMode();\\n  error NotBorrower();\\n  error WithdrawAmount_gt_Coll();\\n  error ZeroDebtChange();\\n  error InsufficientDebtToRepay();\\n  error ZeroDebtRepay();\\n\\n  // --- Functions ---\\n\\n  function openTrove(TokenAmount[] memory _colls) external;\\n\\n  function openTroveWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external;\\n\\n  function addColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function addCollWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function withdrawColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function increaseDebt(address _borrower, address _to, TokenAmount[] memory _debts, MintMeta memory _meta) external;\\n\\n  function repayDebt(TokenAmount[] memory _debts, address _upperHint, address _lowerHint) external;\\n\\n  function repayDebtFromPoolBurn(\\n    address borrower,\\n    TokenAmount[] memory _debts,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function closeTrove() external;\\n\\n  function claimCollateral() external;\\n\\n  function getCompositeDebt(DebtTokenAmount[] memory _debts) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xaa9829fa8ae2af0978526abfbdf43022148e77223ddd9630d286da36b30c17e7\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface ICollSurplusPool is IBase {\\n  // --- Events ---\\n\\n  event CollSurplusPoolInitialized(address _liquidationOperationsAddress, address _borrowerOperationsAddress);\\n  event CollBalanceUpdated(address indexed _account, TokenAmount[] _collSurplus);\\n  event CollClaimed(address _to);\\n\\n  error NotFromProtocol();\\n\\n  // --- Contract setters ---\\n\\n  function getCollateral(address _account) external view returns (TokenAmount[] memory);\\n\\n  function accountSurplus(address _account, RAmount[] memory _collSurplus) external;\\n\\n  function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1c68fd6b271971b35fc119ca80159ac77f35b90b4344f7eb4dc134b80c641e1f\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICollTokenManager {\\n  // --- Events ---\\n  event CollTokenManagerInitialized(address _priceFeedAddress);\\n  event CollTokenAdded(address _collTokenAddress);\\n\\n  // --- Custom Errors ---\\n  error TokenAlreadyAdded();\\n\\n  // --- Functions ---\\n\\n  function getCollTokenAddresses() external view returns (address[] memory);\\n\\n  function addCollToken(address _tokenAddress) external;\\n}\\n\",\"keccak256\":\"0x841232977bec6eff931b093b931a48a17dec71e92b89c9d603975787f9d5ca42\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IReservePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\nimport './IDebtToken.sol';\\n\\ninterface IReservePool is IBBase {\\n  error NotFromSPM();\\n\\n  event ReservePoolInitialized(\\n    address _stabilityPoolManager,\\n    address _priceFeed,\\n    address _stableDebtTokenAddress,\\n    address _govTokenAddress\\n  );\\n  event ReserveCapChanged(uint newReserveCap, uint newGovReserveCap);\\n  event WithdrewReserves(uint govAmount, uint stableAmount);\\n\\n  function stableDebtToken() external view returns (IDebtToken);\\n\\n  function govToken() external view returns (IERC20);\\n\\n  function setRelativeStableCap(uint _relativeStableCap) external;\\n\\n  function stableAmountUntilCap() external view returns (uint);\\n\\n  function isGovReserveCapReached() external view returns (bool);\\n\\n  function withdrawValue(address stabilityPool, uint withdrawAmount) external returns (uint usedGov, uint usedStable);\\n}\\n\",\"keccak256\":\"0xf97d0b0249e9d675ff045749add7e6768629d2fb1c17980ffa26af7952d9fc59\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISortedTroves {\\n  // --- Errors ---\\n\\n  error SizeCantBeZero();\\n  error ListIsFull();\\n  error ListAlreadyContainsNode();\\n  error ListDoesNotContainNode();\\n  error IdCantBeZero();\\n  error CRNotPositive();\\n  error CallerNotBrOrTrContract();\\n\\n  // --- Events ---\\n\\n  event SortedTrovesInitialised(\\n    address _troveManagerAddress,\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress\\n  );\\n  event NodeAdded(address _id, uint _CR);\\n  event NodeRemoved(address _id);\\n\\n  // --- Functions ---\\n\\n  function update(address _id, uint256 _newCR, uint _redeemableDebt, address _prevId, address _nextId) external;\\n\\n  function remove(address _id) external;\\n\\n  function contains(address _id) external view returns (bool);\\n\\n  function isEmpty() external view returns (bool);\\n\\n  function getSize() external view returns (uint256);\\n\\n  function getFirst() external view returns (address);\\n\\n  function getLast() external view returns (address);\\n\\n  function getNext(address _id) external view returns (address);\\n\\n  function getPrev(address _id) external view returns (address);\\n\\n  function getByIndex(uint _index) external view returns (address);\\n\\n  function getUsedCR(address _id) external view returns (uint);\\n\\n  function validInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (bool);\\n\\n  function findInsertPosition(uint256 _CR, address _prevId, address _nextId) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x208a8dd99f743ee53b781ac03fdfea6e079e13511378800251acfda45b4af41f\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/Mock/MockBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '../BorrowerOperations.sol';\\n\\n/* Tester contract inherits from TroveManager, and provides external functions \\nfor testing the parent's internal functions. */\\n\\ncontract MockBorrowerOperations is BorrowerOperations {\\n  function increaseDebts(TokenAmount[] memory _debts, MintMeta memory _meta) external {\\n    // separate minting is allowed for better testing\\n    // _requireCallerIsSwapOperations();\\n\\n    _increaseDebt(msg.sender, msg.sender, _debts, _meta);\\n  }\\n\\n  function mock_increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external {\\n    troveManager.increaseTroveColl(_borrower, _collTokenAmounts);\\n  }\\n\\n  // Payable fallback function\\n\\n  // STORAGE POOL TESTER PROXIES\\n  function testStoragePool_addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external {\\n    storagePool.addValue(_tokenAddress, _isColl, _poolType, _amount);\\n  }\\n\\n  function testStoragePool_subtractValue(\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external {\\n    storagePool.subtractValue(_tokenAddress, _isColl, _poolType, _amount);\\n  }\\n\\n  function testStoragePool_transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external {\\n    storagePool.transferBetweenTypes(_tokenAddress, _isColl, _fromType, _toType, _amount);\\n  }\\n\\n  function testStoragePool_withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external {\\n    storagePool.withdrawalValue(_receiver, _tokenAddress, _isColl, _poolType, _amount);\\n  }\\n\\n  // DEBTTOKEN TESTER PROXIES\\n\\n  function testDebtToken_mint(address _account, uint256 _amount, IDebtToken _debtToken) external {\\n    _debtToken.mint(_account, _amount);\\n  }\\n\\n  function testDebtToken_burn(address _account, uint256 _amount, IDebtToken _debtToken) external {\\n    _debtToken.burn(_account, _amount);\\n  }\\n\\n  // TROVE MANAGER TESTER PROXIES\\n\\n  function testTroveManager_increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external {\\n    troveManager.increaseTroveDebt(_borrower, _debtTokenAmounts);\\n  }\\n\\n  function testTroveManager_setTroveStatus(address _borrower, uint _num) external {\\n    troveManager.setTroveStatus(_borrower, _num);\\n  }\\n\\n  function testTroveManager_closeTrove(address[] memory collTokenAddresses, address _borrower) external {\\n    troveManager.closeTroveByProtocol(collTokenAddresses, _borrower, Status.closedByOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x36d2bc09bad7effc664e33c753e81ed9563d6d71d921c9c4499aef9babd2b44f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5033806200003957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000044816200004b565b506200009b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61482380620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c8063741bef1a11610167578063c4a5709b116100ce578063eb95c49311610087578063eb95c493146105c0578063ec671c83146105d3578063f1abf1aa146105dd578063f2fde38b146105f0578063f8af4a2514610603578063f92d34331461036a57600080fd5b8063c4a5709b14610557578063c51627b11461056a578063c5e7f9641461057d578063cda775f914610590578063ddbeb714146105a3578063e67729e3146105b657600080fd5b80638da5cb5b116101205780638da5cb5b146104bc578063943ebeae146104cd578063a3f4df7e146104e0578063aa9bc97b1461051e578063ae91875414610531578063c239c6ff1461054457600080fd5b8063741bef1a14610451578063794e5724146104645780637bb424b1146104735780638a72e369146104865780638cf6e507146104995780638d63c665146104ac57600080fd5b80633d83908a1161020b5780635733d58f116101c45780635733d58f146103fd5780635a2def671461040c5780636c37a4af1461041f5780636f0b0c1c14610432578063715018a61461043a57806372fe25aa1461044257600080fd5b80633d83908a1461038b578063483cbfcd1461039e5780634870dd9a146103b157806348a39cbe146103b9578063502afb04146103cc578063522a86fe146103ea57600080fd5b80630d07e99f1161025d5780630d07e99f146103205780630e704d501461033357806317b1cf201461033b578063240926691461034e57806328d28b5b1461036a5780633b9ec9b91461037857600080fd5b80630266f0441461029a57806306648117146102ca578063067c6d50146102df578063070cd706146102f257806309230ad314610305575b600080fd5b6005546102ad906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102dd6102d8366004613821565b610616565b005b6102dd6102ed366004613a81565b610683565b6102dd610300366004613b37565b6107a2565b6102ad73f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6102dd61032e366004613c10565b610e95565b6102dd610efd565b6102dd610349366004613c5f565b611157565b61035c66b1a2bc2ec5000081565b6040519081526020016102c1565b61035c6611c37937e0800081565b6102dd610386366004613d36565b61127a565b6001546102ad906001600160a01b031681565b6102dd6103ac366004613d7b565b6112ac565b61035c60c881565b6102dd6103c7366004613def565b6113b1565b6103d5610bb881565b60405163ffffffff90911681526020016102c1565b6002546102ad906001600160a01b031681565b61035c6714d1120d7b16000081565b6102dd61041a366004613e52565b611455565b6102dd61042d366004613efd565b61148a565b6102dd611617565b6102dd611676565b61035c670de0b6b3a764000081565b6006546102ad906001600160a01b031681565b61035c670f43fc2c04ee000081565b6102dd61048136600461401b565b61168a565b6102dd610494366004614069565b61169a565b6102dd6104a73660046140c9565b61170a565b61035c680ad78ebc5ac620000081565b6000546001600160a01b03166102ad565b6003546102ad906001600160a01b031681565b61051160405180604001604052806012815260200171426f72726f7765724f7065726174696f6e7360701b81525081565b6040516102c1919061410c565b6102dd61052c366004613def565b611741565b6007546102ad906001600160a01b031681565b6102dd61055236600461415a565b61183b565b6102dd610565366004613def565b611897565b6102dd610578366004614191565b611a83565b61035c61058b3660046141bd565b611ab5565b6008546102ad906001600160a01b031681565b6004546102ad906001600160a01b031681565b6103d5620f424081565b6102dd6105ce36600461415a565b611ac6565b6103d56207a12081565b6102dd6105eb3660046141f1565b611af4565b6102dd6105fe366004614264565b611b08565b6102dd610611366004613821565b611b4b565b600480546040516304b86aad60e21b81526001600160a01b03909116916312e1aab49161064b918891889188918891016142ab565b600060405180830381600087803b15801561066557600080fd5b505af1158015610679573d6000803e3d6000fd5b5050505050505050565b60005b8551811015610791578581815181106106a1576106a16142df565b6020026020010151600001516001600160a01b031663d505accf33308985815181106106cf576106cf6142df565b602002602001015160200151898987815181106106ee576106ee6142df565b6020026020010151898881518110610708576107086142df565b6020026020010151898981518110610722576107226142df565b60200260200101516040518863ffffffff1660e01b815260040161074c97969594939291906142f5565b600060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b5050505080806107899061434c565b915050610686565b5061079b856107a2565b5050505050565b60408051608080820183526001546001600160a01b0390811683526004548116602080850191909152600254821684860152600354909116606080850191909152845161016081018652818152918201819052938101849052600093810184905290810183905260a0810183905260c0810183905260e08101839052610100810183905261012081018390526101408101929092529081606001516001600160a01b031663efc5f8c56040518163ffffffff1660e01b8152600401600060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a29190810190614365565b8152815133906108b29082611b80565b6000604051806060016040528085604001516001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906143fe565b6001600160a01b03168152680ad78ebc5ac62000006020820152600060409182015280516001808252818301909252919250816020015b61096461373e565b81526020019060019003908161095c575050604084018190528051829190600090610991576109916142df565b60200260200101819052506109a98360400151611c16565b6060840152602083018590526109be85611cf8565b6080840181905260608401516109d49190611dd4565b8360a001818152505083602001516001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a43919061441b565b6101408701526101208601525015801560e0850152610a6e57610a698360a00151611e0a565b610aac565b610a7b8360a00151611e33565b6000610a9f8460800151600186606001516001886101200151896101400151611e5c565b9050610aaa81611ebb565b505b8351604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f90610ade90859060019060040161445a565b600060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b50508551602086015160405163d317458f60e01b81526001600160a01b03909216935063d317458f9250610b4591869190600401614473565b600060405180830381600087803b158015610b5f57600080fd5b505af1158015610b73573d6000803e3d6000fd5b5050855160408087015190516309bfc81160e41b81526001600160a01b039092169350639bfc81109250610bac918691906004016144d8565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b505085516040516382fe3eb960e01b81526001600160a01b03868116600483015290911692506382fe3eb99150602401600060405180830381600087803b158015610c2457600080fd5b505af1158015610c38573d6000803e3d6000fd5b5050855185516040516309d9efd960e21b81526001600160a01b039092169350632767bf649250610c6d91869060040161458b565b600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b505085516040516315d549f160e01b81526001600160a01b03868116600483015290911692506315d549f191506024016020604051808303816000875af1158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906145b5565b6001600160801b031660c084015260005b836020015151811015610d7b57600084602001518281518110610d4457610d446142df565b60200260200101519050610d68848760200151836000015184602001516000611ee4565b5080610d738161434c565b915050610d1f565b50602080850151825191830151604051633891012160e21b81526001600160a01b039092169263e244048492610dba92600091600291906004016142ab565b600060405180830381600087803b158015610dd457600080fd5b505af1158015610de8573d6000803e3d6000fd5b50508251602080880151908501516040516340c10f1960e01b81526001600160a01b0390931694506340c10f199350610e239260040161445a565b600060405180830381600087803b158015610e3d57600080fd5b505af1158015610e51573d6000803e3d6000fd5b505050507f01b75d7bce1e4c45566b7fde5ee7928a71649a36187024daaf52a7fc836fac9c8286604051610e86929190614473565b60405180910390a15050505050565b6001546040516309bfc81160e41b81526001600160a01b0390911690639bfc811090610ec790859085906004016144d8565b600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050505050565b33600080610f0a83611fc4565b91509150610f1c8161016001516122cd565b6000610f408260a00151600084608001516000866101800151876101a00151611e5c565b9050610f4b81611ebb565b60005b82604001515181101561104957600083604001518281518110610f7357610f736142df565b60200260200101519050600081600001516001600160a01b031663b55fe4e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe591906145de565b1561100a57680ad78ebc5ac6200000826020015161100391906145fb565b9050611011565b5060208101515b80600003611020575050611037565b6110348787602001518460000151846122ec565b50505b806110418161434c565b915050610f4e565b50611060836020015183606001516000015161238a565b60005b8260200151518110156110bf57600083602001518281518110611088576110886142df565b602002602001015190506110ac868660200151836000015184602001516000612430565b50806110b78161434c565b915050611063565b5082518251604051630609d6b760e11b81526001600160a01b0390921691630c13ad6e916110f191889060040161458b565b600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b505084518451604051638918b9e160e01b81526001600160a01b039092169350638918b9e1925061064b91889060029060040161460e565b60005b875181101561126557878181518110611175576111756142df565b6020026020010151600001516001600160a01b031663d505accf33308b85815181106111a3576111a36142df565b6020026020010151602001518b8b87815181106111c2576111c26142df565b60200260200101518b88815181106111dc576111dc6142df565b60200260200101518b89815181106111f6576111f66142df565b60200260200101516040518863ffffffff1660e01b815260040161122097969594939291906142f5565b600060405180830381600087803b15801561123a57600080fd5b505af115801561124e573d6000803e3d6000fd5b50505050808061125d9061434c565b91505061115a565b50611271878383611741565b50505050505050565b60015460405163d317458f60e01b81526001600160a01b039091169063d317458f90610ec79085908590600401614473565b6112b4612465565b6000806112c086611fc4565b915091506000806112d384848a8a612490565b9150915060005b82518110156113865760008382815181106112f7576112f76142df565b6020026020010151905085602001516001600160a01b03166312e1aab4826000015160008085602001516040518563ffffffff1660e01b815260040161134094939291906142ab565b600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b5050505050808061137e9061434c565b9150506112da565b508060200151836101400181815161139e91906145fb565b90525061067960008086868c8b8b6126be565b336000806113be83611fc4565b915091506000806113d18484878b612490565b9150915060005b825181101561142a5760008382815181106113f5576113f56142df565b60200260200101519050611417878760200151836000015184602001516122ec565b50806114228161434c565b9150506113d8565b508060200151836101400181815161144291906145fb565b9052506106796000808686898c8c6126be565b600154604051638918b9e160e01b81526001600160a01b0390911690638918b9e190610ec7908590859060029060040161460e565b6114926127fb565b61149b8a612828565b6114a489612828565b6114ad88612828565b6114b687612828565b6114bf86612828565b6114c885612828565b6114d184612828565b6114da83612828565b6114e382612828565b6114ec81612828565b600180546001600160a01b038c81166001600160a01b03199283168117909355600480548d83169084168117909155600980548d84169085168117909155600580548d85169086168117909155600680548d86169087168117909155600280548d87169088168117909155600380548d88169089168117909155600a80548d8916908a168117909155600780548d8a16908b16811790915560088054998d1699909a168917909955604080519a8b5260208b0197909752958901949094526060880192909252608087015260a086015260c085015260e08401526101008301919091526101208201527f9e494e759d69e88469cad802387c66d1116e02504e1b935b218547c040546cc7906101400160405180910390a161160b611676565b50505050505050505050565b60085460405163b32beb5b60e01b81523360048201526001600160a01b039091169063b32beb5b90602401600060405180830381600087803b15801561165c57600080fd5b505af1158015611670573d6000803e3d6000fd5b50505050565b61167e6127fb565b6116886000612873565b565b611696333384846128c3565b5050565b60048054604051632f5ed88d60e11b81526001600160a01b0390911691635ebdb11a916116d1918991899189918991899101614650565b600060405180830381600087803b1580156116eb57600080fd5b505af11580156116ff573d6000803e3d6000fd5b505050505050505050565b6004805460405163b403b99760e01b81526001600160a01b039091169163b403b997916116d1918991899189918991899101614692565b3360008061174e83611fc4565b9150915061175b86611cf8565b816101000181815161176d91906146bf565b905250815160405163d317458f60e01b81526001600160a01b039091169063d317458f906117a19086908a90600401614473565b600060405180830381600087803b1580156117bb57600080fd5b505af11580156117cf573d6000803e3d6000fd5b5050505060005b865181101561182a5760008782815181106117f3576117f36142df565b60200260200101519050611817858560200151836000015184602001516000611ee4565b50806118228161434c565b9150506117d6565b50610ef56000808484878a8a6126be565b6040516340c10f1960e01b81526001600160a01b038216906340c10f1990611869908690869060040161445a565b600060405180830381600087803b15801561188357600080fd5b505af1158015611271573d6000803e3d6000fd5b336000806118a483611fc4565b9150915060006118b387611cf8565b90508161010001518111156118db5760405163641f6d2960e11b815260040160405180910390fd5b8082610100018181516118ee91906145fb565b9052508251604051635988e97160e11b81526001600160a01b039091169063b311d2e2906119229087908b90600401614473565b600060405180830381600087803b15801561193c57600080fd5b505af1158015611950573d6000803e3d6000fd5b5050505060005b8751811015611a71576000888281518110611974576119746142df565b602002602001015190506119a4604051806040016040528060006001600160a01b03168152602001600081525090565b60005b856020015151811015611a295782600001516001600160a01b0316866020015182815181106119d8576119d86142df565b6020026020010151600001516001600160a01b031603611a175785602001518181518110611a0857611a086142df565b60200260200101519150611a29565b80611a218161434c565b9150506119a7565b50816020015181602001511015611a4257611a426146d2565b611a5c878760200151846000015185602001516000612430565b50508080611a699061434c565b915050611957565b50611271600160008585888b8b6126be565b600154604051635d6b480f60e01b81526001600160a01b0390911690635d6b480f90610ec7908590859060040161445a565b6000611ac082611c16565b92915050565b604051632770a7eb60e21b81526001600160a01b03821690639dc29fac90611869908690869060040161445a565b611afc612465565b611670848484846128c3565b611b106127fb565b6001600160a01b038116611b3f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b611b4881612873565b50565b60048054604051633891012160e21b81526001600160a01b039091169163e24404849161064b918891889188918891016142ab565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee91906146e8565b905080600103611c1157604051636ac7a93960e01b815260040160405180910390fd5b505050565b6000805b8251811015611cf25760065483516001600160a01b039091169063fa76dcf290859084908110611c4c57611c4c6142df565b602002602001015160000151858481518110611c6a57611c6a6142df565b6020026020010151602001516040518363ffffffff1660e01b8152600401611c9392919061445a565b602060405180830381865afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd491906146e8565b611cde90836146bf565b915080611cea8161434c565b915050611c1a565b50919050565b6000805b8251811015611cf25760065483516001600160a01b039091169063fa76dcf290859084908110611d2e57611d2e6142df565b602002602001015160000151858481518110611d4c57611d4c6142df565b6020026020010151602001516040518363ffffffff1660e01b8152600401611d7592919061445a565b602060405180830381865afa158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db691906146e8565b611dc090836146bf565b915080611dcc8161434c565b915050611cfc565b60008115611e005781611def670de0b6b3a764000085614701565b611df99190614718565b9050611ac0565b5060001992915050565b6714d1120d7b160000811015611b485760405163c2c7ac8b60e01b815260040160405180910390fd5b670f43fc2c04ee0000811015611b485760405163da43584160e01b815260040160405180910390fd5b60008086611e7357611e6e88856145fb565b611e7d565b611e7d88856146bf565b9050600085611e9557611e9087856145fb565b611e9f565b611e9f87856146bf565b90506000611ead8383611dd4565b9a9950505050505050505050565b6714d1120d7b160000811015611b4857604051630242425360e31b815260040160405180910390fd5b604051633891012160e21b81526001600160a01b0385169063e244048490611f17908690600190869088906004016142ab565b600060405180830381600087803b158015611f3157600080fd5b505af1158015611f45573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b038881166004830152878116602483015260448201869052861692506323b872dd91506064016020604051808303816000875af1158015611fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef591906145de565b604080516080810182526000808252602082018190529181018290526060810191909152611ff0613768565b604080516080810182526001546001600160a01b039081168252600480548216602084015260025482168385015260035490911660608301819052835163efc5f8c560e01b815293519295509263efc5f8c592818301926000928290030181865afa158015612063573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261208b9190810190614365565b816000018190525081602001516001600160a01b03166343a124fa6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f9919061441b565b6101a0850152610180840152501515610160820152815161211a9084612a75565b8151604051630b07655760e01b81526001600160a01b03858116600483015290911690630b07655790602401600060405180830381600087803b15801561216057600080fd5b505af1158015612174573d6000803e3d6000fd5b505050506040828101518351915163d66a255360e01b81526001600160a01b0386811660048301526121f593169063d66a255390602401600060405180830381865afa1580156121c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121f0919081019061473a565b612b06565b60608301819052604083018290526020015161014083015261221690611c16565b6080820181905260e082015281516040516309019aaf60e31b81526001600160a01b0385811660048301529091169063480cd57890602401600060405180830381865afa15801561226b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612293919081019061473a565b602082018190526122a390611cf8565b60a08201819052610100820181905260808201516122c19190611dd4565b60c08201529092909150565b8015611b485760405163a1e634ad60e01b815260040160405180910390fd5b6122f7828583612f11565b6040516304b86aad60e21b81526001600160a01b038416906312e1aab49061232a908590600090819087906004016142ab565b600060405180830381600087803b15801561234457600080fd5b505af1158015612358573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0385169250639dc29fac915061064b908790859060040161445a565b6040516304b86aad60e21b81526001600160a01b038316906312e1aab4906123c7908490600090600290680ad78ebc5ac6200000906004016142ab565b600060405180830381600087803b1580156123e157600080fd5b505af11580156123f5573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0384169250639dc29fac9150610ec7908590680ad78ebc5ac62000009060040161445a565b60405163b403b99760e01b81526001600160a01b0385169063b403b997906116d1908890879060019087908990600401614692565b600a546001600160a01b0316331461168857604051630dc6009560e01b815260040160405180910390fd5b606061249a61373e565b6124a8866040015184612b06565b90925090506124b682611c16565b8560e0018181516124c791906145fb565b9052508551604051637120442f60e11b81526001600160a01b039091169063e240885e906124fb90879086906004016144d8565b600060405180830381600087803b15801561251557600080fd5b505af1158015612529573d6000803e3d6000fd5b5050505060005b82518110156126b457600083828151811061254d5761254d6142df565b6020026020010151905060008160000151905081602001516000036125855760405163081a162160e01b815260040160405180910390fd5b61258d61373e565b60005b89604001515181101561260e57826001600160a01b03168a6040015182815181106125bd576125bd6142df565b6020026020010151600001516001600160a01b0316036125fc57896040015181815181106125ed576125ed6142df565b6020026020010151915061260e565b806126068161434c565b915050612590565b5061262181602001518460200151612f9d565b82600001516001600160a01b031663b55fe4e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268791906145de565b1561269e5761269e81602001518460200151612fbe565b50505080806126ac9061434c565b915050612530565b5094509492505050565b6126d18461010001518560e00151611dd4565b6101208501526126e2878786612ff1565b845184516040516309d9efd960e21b81526001600160a01b0390921691632767bf649161271391879060040161458b565b600060405180830381600087803b15801561272d57600080fd5b505af1158015612741573d6000803e3d6000fd5b50506007546101208701516101408801516001600160a01b03909216935063ad5557199250869161277c90680ad78ebc5ac6200000906145fb565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152602481019290925260448201528186166064820152908416608482015260a401600060405180830381600087803b1580156127da57600080fd5b505af11580156127ee573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b031633146116885760405163118cdaa760e01b8152336004820152602401611b36565b6001600160a01b03811661284f5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900361169657604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806128cf86611fc4565b915091506128e683604001518261016001516130e6565b60005b845181101561292a57612918858281518110612907576129076142df565b60200260200101516020015161314d565b806129228161434c565b9150506128e9565b5060008061293c846040015187612b06565b9150915060008361016001516129635761296085600001518484896040015161316e565b90505b61296c83611c16565b8460e00181815161297d91906146bf565b90525084516040516309bfc81160e41b81526001600160a01b0390911690639bfc8110906129b1908c9087906004016144d8565b600060405180830381600087803b1580156129cb57600080fd5b505af11580156129df573d6000803e3d6000fd5b5050505060005b8351811015612a3d576000848281518110612a0357612a036142df565b60200260200101519050612a2a8a8860200151836000015184602001518560400151613429565b5080612a358161434c565b9150506129e6565b5081602001518461014001818151612a5591906146bf565b915081815250506116ff6000600187878d8b600001518c602001516126be565b6040516321e3780160e01b81526001600160a01b038281166004830152600091908416906321e3780190602401602060405180830381865afa158015612abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae391906146e8565b905080600114611c11576040516380534bfb60e01b815260040160405180910390fd5b6060612b1061373e565b6000846001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7491906143fe565b90506000805b8551811015612bd457826001600160a01b0316868281518110612b9f57612b9f6142df565b6020026020010151600001516001600160a01b031603612bc25760019150612bd4565b80612bcc8161434c565b915050612b7a565b508015612c355784516001600160401b03811115612bf457612bf4613870565b604051908082528060200260200182016040528015612c2d57816020015b612c1a61373e565b815260200190600190039081612c125790505b509350612c96565b8451612c429060016146bf565b6001600160401b03811115612c5957612c59613870565b604051908082528060200260200182016040528015612c9257816020015b612c7f61373e565b815260200190600190039081612c775790505b5093505b60005b8551811015612e39576000876001600160a01b031663a95bbced888481518110612cc557612cc56142df565b6020908102919091010151516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3991906143fe565b90506040518060600160405280826001600160a01b03168152602001888481518110612d6757612d676142df565b60200260200101516020015181526020016000815250868381518110612d8f57612d8f6142df565b6020026020010181905250828015612e045750806001600160a01b031663b55fe4e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0491906145de565b15612e2657858281518110612e1b57612e1b6142df565b602002602001015194505b5080612e318161434c565b915050612c99565b5080612f08576000866001600160a01b0316631bd817c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea391906143fe565b90506040518060600160405280826001600160a01b0316815260200160008152602001600081525085875181518110612ede57612ede6142df565b602002602001018190525084865181518110612efc57612efc6142df565b60200260200101519350505b50509250929050565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a0823190602401602060405180830381865afa158015612f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7e91906146e8565b1015611c1157604051631636dca160e01b815260040160405180910390fd5b808210156116965760405163f73d990960e01b815260040160405180910390fd5b612fd1680ad78ebc5ac6200000836145fb565b8111156116965760405163f73d990960e01b815260040160405180910390fd5b8061016001511561302f57821561301b57604051632be87da560e01b815260040160405180910390fd5b8115611c1157611c11816101200151611e0a565b61303d816101200151611e33565b60008160a0015182610100015111613069578161010001518260a0015161306491906145fb565b61307e565b8160a0015182610100015161307e91906145fb565b9050600082608001518360e00151116130aa578260e0015183608001516130a591906145fb565b6130be565b82608001518360e001516130be91906145fb565b905060006130db8387158488886101800151896101a00151611e5c565b9050610ef581611ebb565b80156131145766b1a2bc2ec500008211156116965760405163607a31bf60e01b815260040160405180910390fd5b6611c37937e0800082108061312f575066b1a2bc2ec5000082115b15611696576040516309c3707b60e01b815260040160405180910390fd5b80600003611b48576040516316068ef760e21b815260040160405180910390fd5b602082015160405163496d0de360e11b81526000916001600160a01b038716916392da1bc6916131a49160040190815260200190565b600060405180830381600087803b1580156131be57600080fd5b505af11580156131d2573d6000803e3d6000fd5b5050505060006131e185611c16565b60065485516020870151604051637d3b6e7960e11b81529394506000936001600160a01b039093169263fa76dcf29261321e92909160040161445a565b602060405180830381865afa15801561323b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325f91906146e8565b604051630618be2360e51b815260048101829052600160248201529091506001600160a01b0388169063c317c46090604401602060405180830381865afa1580156132ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d291906146e8565b6001600160a01b03881663c317c4606132eb84866145fb565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401602060405180830381865afa15801561332e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335291906146e8565b61335c91906146bf565b92506133698383866136d7565b600085600001516001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d191906146e8565b9050806133e6670de0b6b3a764000086614701565b6133f09190614718565b9350838660200181815161340491906146bf565b90525060408601805185919061341b9083906146bf565b905250505050949350505050565b604051633891012160e21b81526001600160a01b0385169063e24404849061345c908690600090819088906004016142ab565b600060405180830381600087803b15801561347657600080fd5b505af115801561348a573d6000803e3d6000fd5b505050506000818361349c91906145fb565b90508015613505576040516340c10f1960e01b81526001600160a01b038516906340c10f19906134d2908990859060040161445a565b600060405180830381600087803b1580156134ec57600080fd5b505af1158015613500573d6000803e3d6000fd5b505050505b81600003613513575061079b565b60055460408051630e054ca160e21b8152905184926000926001600160a01b03909116916338153284916004808201926020929091908290030181865afa158015613562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358691906146e8565b9050801561360f57600061359a8583613726565b90506135a681846145fb565b6005546040516340c10f1960e01b81529194506001600160a01b03808a16926340c10f19926135db921690859060040161445a565b600060405180830381600087803b1580156135f557600080fd5b505af1158015613609573d6000803e3d6000fd5b50505050505b811561368a576040516340c10f1960e01b81526001600160a01b038716906340c10f19906136579073f39fd6e51aad88f6f4ce6ab8827279cfffb9226690869060040161445a565b600060405180830381600087803b15801561367157600080fd5b505af1158015613685573d6000803e3d6000fd5b505050505b876001600160a01b03167f8968848c791dfbb0aafbd13f54d41bb7072651bd10cc1fae97f80007f2d6a4d7856040516136c591815260200190565b60405180910390a25050505050505050565b826000036136e457505050565b6000826136f9670de0b6b3a764000086614701565b6137039190614718565b905081811115611670576040516351a2c47360e11b815260040160405180910390fd5b60008183106137355781613737565b825b9392505050565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806101c0016040528060608152602001606081526020016060815260200161379161373e565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6001600160a01b0381168114611b4857600080fd5b80356137ff816137df565b919050565b8015158114611b4857600080fd5b8035600381106137ff57600080fd5b6000806000806080858703121561383757600080fd5b8435613842816137df565b9350602085013561385281613804565b925061386060408601613812565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156138a8576138a8613870565b60405290565b604051606081016001600160401b03811182821017156138a8576138a8613870565b604051601f8201601f191681016001600160401b03811182821017156138f8576138f8613870565b604052919050565b60006001600160401b0382111561391957613919613870565b5060051b60200190565b600082601f83011261393457600080fd5b8135602061394961394483613900565b6138d0565b82815260069290921b8401810191818101908684111561396857600080fd5b8286015b848110156139b057604081890312156139855760008081fd5b61398d613886565b8135613998816137df565b8152818501358582015283529183019160400161396c565b509695505050505050565b600082601f8301126139cc57600080fd5b813560206139dc61394483613900565b82815260059290921b840181019181810190868411156139fb57600080fd5b8286015b848110156139b057803560ff81168114613a195760008081fd5b83529183019183016139ff565b600082601f830112613a3757600080fd5b81356020613a4761394483613900565b82815260059290921b84018101918181019086841115613a6657600080fd5b8286015b848110156139b05780358352918301918301613a6a565b600080600080600060a08688031215613a9957600080fd5b85356001600160401b0380821115613ab057600080fd5b613abc89838a01613923565b9650602088013595506040880135915080821115613ad957600080fd5b613ae589838a016139bb565b94506060880135915080821115613afb57600080fd5b613b0789838a01613a26565b93506080880135915080821115613b1d57600080fd5b50613b2a88828901613a26565b9150509295509295909350565b600060208284031215613b4957600080fd5b81356001600160401b03811115613b5f57600080fd5b613b6b84828501613923565b949350505050565b600082601f830112613b8457600080fd5b81356020613b9461394483613900565b82815260609283028501820192828201919087851115613bb357600080fd5b8387015b85811015613c035781818a031215613bcf5760008081fd5b613bd76138ae565b8135613be2816137df565b81528186013586820152604080830135908201528452928401928101613bb7565b5090979650505050505050565b60008060408385031215613c2357600080fd5b8235613c2e816137df565b915060208301356001600160401b03811115613c4957600080fd5b613c5585828601613b73565b9150509250929050565b600080600080600080600060e0888a031215613c7a57600080fd5b87356001600160401b0380821115613c9157600080fd5b613c9d8b838c01613923565b985060208a0135975060408a0135915080821115613cba57600080fd5b613cc68b838c016139bb565b965060608a0135915080821115613cdc57600080fd5b613ce88b838c01613a26565b955060808a0135915080821115613cfe57600080fd5b50613d0b8a828b01613a26565b935050613d1a60a089016137f4565b9150613d2860c089016137f4565b905092959891949750929550565b60008060408385031215613d4957600080fd5b8235613d54816137df565b915060208301356001600160401b03811115613d6f57600080fd5b613c5585828601613923565b60008060008060808587031215613d9157600080fd5b8435613d9c816137df565b935060208501356001600160401b03811115613db757600080fd5b613dc387828801613923565b9350506040850135613dd4816137df565b91506060850135613de4816137df565b939692955090935050565b600080600060608486031215613e0457600080fd5b83356001600160401b03811115613e1a57600080fd5b613e2686828701613923565b9350506020840135613e37816137df565b91506040840135613e47816137df565b809150509250925092565b60008060408385031215613e6557600080fd5b82356001600160401b03811115613e7b57600080fd5b8301601f81018513613e8c57600080fd5b80356020613e9c61394483613900565b82815260059290921b83018101918181019088841115613ebb57600080fd5b938201935b83851015613ee2578435613ed3816137df565b82529382019390820190613ec0565b9550613ef190508682016137f4565b93505050509250929050565b6000806000806000806000806000806101408b8d031215613f1d57600080fd5b8a35613f28816137df565b995060208b0135613f38816137df565b985060408b0135613f48816137df565b975060608b0135613f58816137df565b965060808b0135613f68816137df565b955060a08b0135613f78816137df565b945060c08b0135613f88816137df565b935060e08b0135613f98816137df565b92506101008b0135613fa9816137df565b91506101208b0135613fba816137df565b809150509295989b9194979a5092959850565b600060608284031215613fdf57600080fd5b613fe76138ae565b90508135613ff4816137df565b81526020820135614004816137df565b806020830152506040820135604082015292915050565b6000806080838503121561402e57600080fd5b82356001600160401b0381111561404457600080fd5b61405085828601613923565b9250506140608460208501613fcd565b90509250929050565b600080600080600060a0868803121561408157600080fd5b853561408c816137df565b9450602086013561409c81613804565b93506140aa60408701613812565b92506140b860608701613812565b949793965091946080013592915050565b600080600080600060a086880312156140e157600080fd5b85356140ec816137df565b945060208601356140fc816137df565b935060408601356140aa81613804565b600060208083528351808285015260005b818110156141395785810183015185820160400152820161411d565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060006060848603121561416f57600080fd5b833561417a816137df565b9250602084013591506040840135613e47816137df565b600080604083850312156141a457600080fd5b82356141af816137df565b946020939093013593505050565b6000602082840312156141cf57600080fd5b81356001600160401b038111156141e557600080fd5b613b6b84828501613b73565b60008060008060c0858703121561420757600080fd5b8435614212816137df565b93506020850135614222816137df565b925060408501356001600160401b0381111561423d57600080fd5b61424987828801613923565b9250506142598660608701613fcd565b905092959194509250565b60006020828403121561427657600080fd5b8135613737816137df565b634e487b7160e01b600052602160045260246000fd5b600381106142a7576142a7614281565b9052565b6001600160a01b03851681528315156020820152608081016142d06040830185614297565b82606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b634e487b7160e01b600052601160045260246000fd5b60006001820161435e5761435e614336565b5060010190565b6000602080838503121561437857600080fd5b82516001600160401b0381111561438e57600080fd5b8301601f8101851361439f57600080fd5b80516143ad61394482613900565b81815260059190911b820183019083810190878311156143cc57600080fd5b928401925b828410156143f35783516143e4816137df565b825292840192908401906143d1565b979650505050505050565b60006020828403121561441057600080fd5b8151613737816137df565b6000806000806080858703121561443157600080fd5b845161443c81613804565b60208601516040870151606090970151919890975090945092505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0383811682526040602080840182905284518483018190526000938683019290916060870190865b818110156144c95785518051861684528401518484015294830194918601916001016144a2565b50909998505050505050505050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b828110156145375781518051871685528581015186860152880151888501529286019290840190600101614508565b50919a9950505050505050505050565b600081518084526020808501945080840160005b838110156145805781516001600160a01b03168752958201959082019060010161455b565b509495945050505050565b60408152600061459e6040830185614547565b905060018060a01b03831660208301529392505050565b6000602082840312156145c757600080fd5b81516001600160801b038116811461373757600080fd5b6000602082840312156145f057600080fd5b815161373781613804565b81810381811115611ac057611ac0614336565b6060815260006146216060830186614547565b6001600160a01b038516602084015290506005831061464257614642614281565b826040830152949350505050565b6001600160a01b0386168152841515602082015260a081016146756040830186614297565b6146826060830185614297565b8260808301529695505050505050565b6001600160a01b03868116825285166020820152831515604082015260a081016146826060830185614297565b80820180821115611ac057611ac0614336565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156146fa57600080fd5b5051919050565b8082028115828204841417611ac057611ac0614336565b60008261473557634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561474d57600080fd5b82516001600160401b0381111561476357600080fd5b8301601f8101851361477457600080fd5b805161478261394482613900565b81815260069190911b820183019083810190878311156147a157600080fd5b928401925b828410156143f357604084890312156147bf5760008081fd5b6147c7613886565b84516147d2816137df565b815284860151868201528252604090930192908401906147a656fea2646970667358221220147320c9ce9960114788922716d99dc12b7cd5df992135729a0c6bafcfa8c06364736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimCollateral()": {
        "notice": "Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3885,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "troveManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveManager)12034"
      },
      {
        "astId": 3888,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "debtTokenManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDebtTokenManager)10132"
      },
      {
        "astId": 3891,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "collTokenManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICollTokenManager)9882"
      },
      {
        "astId": 3894,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "storagePool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStoragePool)11041"
      },
      {
        "astId": 3897,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "reservePool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IReservePool)10476"
      },
      {
        "astId": 3900,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 3903,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISortedTroves)10608"
      },
      {
        "astId": 3906,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ICollSurplusPool)9858"
      },
      {
        "astId": 3908,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3910,
        "contract": "contracts/Mock/MockBorrowerOperations.sol:MockBorrowerOperations",
        "label": "swapOperations",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)9858": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(ICollTokenManager)9882": {
        "encoding": "inplace",
        "label": "contract ICollTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtTokenManager)10132": {
        "encoding": "inplace",
        "label": "contract IDebtTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IReservePool)10476": {
        "encoding": "inplace",
        "label": "contract IReservePool",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)10608": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)11041": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveManager)12034": {
        "encoding": "inplace",
        "label": "contract ITroveManager",
        "numberOfBytes": "20"
      }
    }
  }
}