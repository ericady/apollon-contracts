{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromProtocol",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_collSurplus",
          "type": "tuple[]"
        }
      ],
      "name": "CollBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "CollClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "CollSurplusPoolInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isColl",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasCompensation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toLiquidate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toRedistribute",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collSurplus",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.RAmount[]",
          "name": "_collSurplus",
          "type": "tuple[]"
        }
      ],
      "name": "accountSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf774eb61b7c2f4f70b5fca9d28837e902c0cbf7464f1666b3c9bce88b8fbcff",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "804467",
    "logsBloom": "0x
    "blockHash": "0x442a56cf7393360c676b8c508acccb5c770192a675a439772317db46d58ed549",
    "transactionHash": "0xdf774eb61b7c2f4f70b5fca9d28837e902c0cbf7464f1666b3c9bce88b8fbcff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13,
        "transactionHash": "0xdf774eb61b7c2f4f70b5fca9d28837e902c0cbf7464f1666b3c9bce88b8fbcff",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x442a56cf7393360c676b8c508acccb5c770192a675a439772317db46d58ed549"
      }
    ],
    "blockNumber": 13,
    "cumulativeGasUsed": "804467",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromProtocol\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_collSurplus\",\"type\":\"tuple[]\"}],\"name\":\"CollBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"CollClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isColl\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCompensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toLiquidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toRedistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collSurplus\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.RAmount[]\",\"name\":\"_collSurplus\",\"type\":\"tuple[]\"}],\"name\":\"accountSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollSurplusPool.sol\":\"CollSurplusPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/CollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/ICollSurplusPool.sol';\\nimport './Dependencies/LiquityBase.sol';\\n\\ncontract CollSurplusPool is LiquityBase, Ownable(msg.sender), CheckContract, ICollSurplusPool {\\n  string public constant NAME = 'CollSurplusPool';\\n\\n  address public liquidationOperationsAddress;\\n  address public borrowerOperationsAddress;\\n\\n  mapping(address => TokenAmount[]) internal balances; // Collateral surplus claimable by trove owners\\n\\n  // --- Contract setters ---\\n\\n  function setAddresses(address _liquidationOperationsAddress, address _borrowerOperationsAddress) external onlyOwner {\\n    checkContract(_borrowerOperationsAddress);\\n    checkContract(_liquidationOperationsAddress);\\n\\n    borrowerOperationsAddress = _borrowerOperationsAddress;\\n    liquidationOperationsAddress = _liquidationOperationsAddress;\\n\\n    emit CollSurplusPoolInitialized(_liquidationOperationsAddress, _borrowerOperationsAddress);\\n\\n    renounceOwnership();\\n  }\\n\\n  function getCollateral(address _account) external view override returns (TokenAmount[] memory) {\\n    return balances[_account];\\n  }\\n\\n  // --- Pool functionality ---\\n\\n  function accountSurplus(address _account, RAmount[] memory _collSurplus) external override {\\n    _requireCallerIsProtocol();\\n\\n    TokenAmount[] storage accountBalances = balances[_account];\\n    for (uint i = 0; i < _collSurplus.length; i++) {\\n      RAmount memory rAmount = _collSurplus[i];\\n      if (rAmount.collSurplus == 0) continue;\\n\\n      bool inserted = false;\\n      for (uint a = 0; a < accountBalances.length; a++) {\\n        if (accountBalances[a].tokenAddress != rAmount.tokenAddress) continue;\\n\\n        accountBalances[a].amount += rAmount.collSurplus;\\n        inserted = true;\\n        break;\\n      }\\n\\n      if (!inserted) accountBalances.push(TokenAmount(rAmount.tokenAddress, rAmount.collSurplus));\\n    }\\n\\n    emit CollBalanceUpdated(_account, accountBalances);\\n  }\\n\\n  function claimColl(address _account) external override {\\n    _requireCallerIsProtocol();\\n\\n    TokenAmount[] memory accountBalances = balances[_account];\\n    for (uint i = 0; i < accountBalances.length; i++) {\\n      TokenAmount memory tokenEntry = accountBalances[i];\\n      if (tokenEntry.amount == 0) continue;\\n      IERC20(tokenEntry.tokenAddress).transfer(_account, tokenEntry.amount);\\n    }\\n\\n    delete balances[_account];\\n    emit CollClaimed(_account);\\n  }\\n\\n  // --- 'require' functions ---\\n\\n  function _requireCallerIsProtocol() internal view {\\n    if (msg.sender != liquidationOperationsAddress && msg.sender != borrowerOperationsAddress) revert NotFromProtocol();\\n  }\\n}\\n\",\"keccak256\":\"0x87b8639cb42525d7945d23320de0d2eb62d0add3308a960091cb9d98484058f9\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface ICollSurplusPool is IBase {\\n  // --- Events ---\\n\\n  event CollSurplusPoolInitialized(address _liquidationOperationsAddress, address _borrowerOperationsAddress);\\n  event CollBalanceUpdated(address indexed _account, TokenAmount[] _collSurplus);\\n  event CollClaimed(address _to);\\n\\n  error NotFromProtocol();\\n\\n  // --- Contract setters ---\\n\\n  function getCollateral(address _account) external view returns (TokenAmount[] memory);\\n\\n  function accountSurplus(address _account, RAmount[] memory _collSurplus) external;\\n\\n  function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x1c68fd6b271971b35fc119ca80159ac77f35b90b4344f7eb4dc134b80c641e1f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d1e806100a56000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806390107afe116100b8578063dc3f87831161007c578063dc3f8783146102bb578063e67729e3146102ce578063e8537534146102d8578063ec671c83146102eb578063f2fde38b146102f5578063f92d34331461019b57600080fd5b806390107afe146102275780639b56d6c91461023a578063a3f4df7e1461025a578063b32beb5b14610295578063b7f8cf9b146102a857600080fd5b80635733d58f1161010a5780635733d58f146101cf578063715018a6146101de57806372fe25aa146101e8578063794e5724146101f75780638d63c665146102065780638da5cb5b1461021657600080fd5b806309230ad314610147578063240926691461017f57806328d28b5b1461019b5780634870dd9a146101a9578063502afb04146101b1575b600080fd5b61016273f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018d66b1a2bc2ec5000081565b604051908152602001610176565b61018d6611c37937e0800081565b61018d60c881565b6101ba610bb881565b60405163ffffffff9091168152602001610176565b61018d6714d1120d7b16000081565b6101e6610308565b005b61018d670de0b6b3a764000081565b61018d670f43fc2c04ee000081565b61018d680ad78ebc5ac620000081565b6000546001600160a01b0316610162565b6101e6610235366004610962565b61031c565b61024d610248366004610995565b6103ac565b60405161017691906109b7565b6102886040518060400160405280600f81526020016e10dbdb1b14dd5c9c1b1d5cd41bdbdb608a1b81525081565b6040516101769190610a0f565b6101e66102a3366004610995565b610437565b600254610162906001600160a01b031681565b6101e66102c9366004610ae7565b6105f1565b6101ba620f424081565b600154610162906001600160a01b031681565b6101ba6207a12081565b6101e6610303366004610995565b6107b2565b6103106107f5565b61031a6000610822565b565b6103246107f5565b61032d81610872565b61033682610872565b600280546001600160a01b038381166001600160a01b03199283168117909355600180549186169190921681179091556040805191825260208201929092527f79c895870f67643ccdecfa7526dcc8a9fa4afa05cd1cdd44890c197903b88c49910160405180910390a16103a8610308565b5050565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561042c576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016103e4565b505050509050919050565b61043f6108bd565b6001600160a01b038116600090815260036020908152604080832080548251818502810185019093528083529192909190849084015b828210156104bd576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610475565b50505050905060005b815181101561058f5760008282815181106104e3576104e3610c1a565b6020026020010151905080602001516000036104ff575061057d565b8051602082015160405163a9059cbb60e01b81526001600160a01b038781166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190610c30565b50505b8061058781610c63565b9150506104c6565b506001600160a01b03821660009081526003602052604081206105b191610900565b6040516001600160a01b03831681527f4bd6489fd0d3d88624af90625786074e9b20f0738d92644aa61552ccab30a1609060200160405180910390a15050565b6105f96108bd565b6001600160a01b0382166000908152600360205260408120905b825181101561076b57600083828151811061063057610630610c1a565b6020026020010151905080610100015160000361064d5750610759565b6000805b84548110156106f25782600001516001600160a01b031685828154811061067a5761067a610c1a565b60009182526020909120600290910201546001600160a01b0316036106e0578261010001518582815481106106b1576106b1610c1a565b906000526020600020906002020160010160008282546106d19190610c7c565b90915550600192506106f29050565b806106ea81610c63565b915050610651565b5080610756576040805180820190915282516001600160a01b0390811682526101008401516020808401918252875460018082018a5560008a8152929092209451600290910290940180546001600160a01b03191694909316939093178255519101555b50505b8061076381610c63565b915050610613565b50826001600160a01b03167f0301f1116dc5f16138f0d7a5bc9347cadb1ac9e97e82dd24b4246ccfcc0c5bcf826040516107a59190610c95565b60405180910390a2505050565b6107ba6107f5565b6001600160a01b0381166107e957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107f281610822565b50565b6000546001600160a01b0316331461031a5760405163118cdaa760e01b81523360048201526024016107e0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166108995760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036103a857604051636f7c43f160e01b815260040160405180910390fd5b6001546001600160a01b031633148015906108e357506002546001600160a01b03163314155b1561031a57604051620bdf2560ea1b815260040160405180910390fd5b50805460008255600202906000526020600020908101906107f291905b808211156109425780546001600160a01b03191681556000600182015560020161091d565b5090565b80356001600160a01b038116811461095d57600080fd5b919050565b6000806040838503121561097557600080fd5b61097e83610946565b915061098c60208401610946565b90509250929050565b6000602082840312156109a757600080fd5b6109b082610946565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610a0257815180516001600160a01b031685528601518685015292840192908501906001016109d4565b5091979650505050505050565b600060208083528351808285015260005b81811015610a3c57858101830151858201604001528201610a20565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610a9757610a97610a5d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ac657610ac6610a5d565b604052919050565b80151581146107f257600080fd5b803561095d81610ace565b6000806040808486031215610afb57600080fd5b610b0484610946565b925060208085013567ffffffffffffffff80821115610b2257600080fd5b818701915087601f830112610b3657600080fd5b813581811115610b4857610b48610a5d565b610b56848260051b01610a9d565b818152848101925061012091820284018501918a831115610b7657600080fd5b938501935b82851015610c095780858c031215610b935760008081fd5b610b9b610a73565b610ba486610946565b8152610bb1878701610adc565b818801528588013588820152606080870135908201526080808701359082015260a0808701359082015260c0808701359082015260e08087013590820152610100808701359082015284529384019392850192610b7b565b508096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4257600080fd5b81516109b081610ace565b634e487b7160e01b600052601160045260246000fd5b600060018201610c7557610c75610c4d565b5060010190565b80820180821115610c8f57610c8f610c4d565b92915050565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015610a025781546001600160a01b03168452600182810154878601529385019360029092019101610cb956fea264697066735822122065aa2249a1a7a498028addd7badcd78fdb185c332d1f8d0e5c8ab376301192b464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806390107afe116100b8578063dc3f87831161007c578063dc3f8783146102bb578063e67729e3146102ce578063e8537534146102d8578063ec671c83146102eb578063f2fde38b146102f5578063f92d34331461019b57600080fd5b806390107afe146102275780639b56d6c91461023a578063a3f4df7e1461025a578063b32beb5b14610295578063b7f8cf9b146102a857600080fd5b80635733d58f1161010a5780635733d58f146101cf578063715018a6146101de57806372fe25aa146101e8578063794e5724146101f75780638d63c665146102065780638da5cb5b1461021657600080fd5b806309230ad314610147578063240926691461017f57806328d28b5b1461019b5780634870dd9a146101a9578063502afb04146101b1575b600080fd5b61016273f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018d66b1a2bc2ec5000081565b604051908152602001610176565b61018d6611c37937e0800081565b61018d60c881565b6101ba610bb881565b60405163ffffffff9091168152602001610176565b61018d6714d1120d7b16000081565b6101e6610308565b005b61018d670de0b6b3a764000081565b61018d670f43fc2c04ee000081565b61018d680ad78ebc5ac620000081565b6000546001600160a01b0316610162565b6101e6610235366004610962565b61031c565b61024d610248366004610995565b6103ac565b60405161017691906109b7565b6102886040518060400160405280600f81526020016e10dbdb1b14dd5c9c1b1d5cd41bdbdb608a1b81525081565b6040516101769190610a0f565b6101e66102a3366004610995565b610437565b600254610162906001600160a01b031681565b6101e66102c9366004610ae7565b6105f1565b6101ba620f424081565b600154610162906001600160a01b031681565b6101ba6207a12081565b6101e6610303366004610995565b6107b2565b6103106107f5565b61031a6000610822565b565b6103246107f5565b61032d81610872565b61033682610872565b600280546001600160a01b038381166001600160a01b03199283168117909355600180549186169190921681179091556040805191825260208201929092527f79c895870f67643ccdecfa7526dcc8a9fa4afa05cd1cdd44890c197903b88c49910160405180910390a16103a8610308565b5050565b6001600160a01b0381166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561042c576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016103e4565b505050509050919050565b61043f6108bd565b6001600160a01b038116600090815260036020908152604080832080548251818502810185019093528083529192909190849084015b828210156104bd576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610475565b50505050905060005b815181101561058f5760008282815181106104e3576104e3610c1a565b6020026020010151905080602001516000036104ff575061057d565b8051602082015160405163a9059cbb60e01b81526001600160a01b038781166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190610c30565b50505b8061058781610c63565b9150506104c6565b506001600160a01b03821660009081526003602052604081206105b191610900565b6040516001600160a01b03831681527f4bd6489fd0d3d88624af90625786074e9b20f0738d92644aa61552ccab30a1609060200160405180910390a15050565b6105f96108bd565b6001600160a01b0382166000908152600360205260408120905b825181101561076b57600083828151811061063057610630610c1a565b6020026020010151905080610100015160000361064d5750610759565b6000805b84548110156106f25782600001516001600160a01b031685828154811061067a5761067a610c1a565b60009182526020909120600290910201546001600160a01b0316036106e0578261010001518582815481106106b1576106b1610c1a565b906000526020600020906002020160010160008282546106d19190610c7c565b90915550600192506106f29050565b806106ea81610c63565b915050610651565b5080610756576040805180820190915282516001600160a01b0390811682526101008401516020808401918252875460018082018a5560008a8152929092209451600290910290940180546001600160a01b03191694909316939093178255519101555b50505b8061076381610c63565b915050610613565b50826001600160a01b03167f0301f1116dc5f16138f0d7a5bc9347cadb1ac9e97e82dd24b4246ccfcc0c5bcf826040516107a59190610c95565b60405180910390a2505050565b6107ba6107f5565b6001600160a01b0381166107e957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107f281610822565b50565b6000546001600160a01b0316331461031a5760405163118cdaa760e01b81523360048201526024016107e0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166108995760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036103a857604051636f7c43f160e01b815260040160405180910390fd5b6001546001600160a01b031633148015906108e357506002546001600160a01b03163314155b1561031a57604051620bdf2560ea1b815260040160405180910390fd5b50805460008255600202906000526020600020908101906107f291905b808211156109425780546001600160a01b03191681556000600182015560020161091d565b5090565b80356001600160a01b038116811461095d57600080fd5b919050565b6000806040838503121561097557600080fd5b61097e83610946565b915061098c60208401610946565b90509250929050565b6000602082840312156109a757600080fd5b6109b082610946565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610a0257815180516001600160a01b031685528601518685015292840192908501906001016109d4565b5091979650505050505050565b600060208083528351808285015260005b81811015610a3c57858101830151858201604001528201610a20565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610a9757610a97610a5d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ac657610ac6610a5d565b604052919050565b80151581146107f257600080fd5b803561095d81610ace565b6000806040808486031215610afb57600080fd5b610b0484610946565b925060208085013567ffffffffffffffff80821115610b2257600080fd5b818701915087601f830112610b3657600080fd5b813581811115610b4857610b48610a5d565b610b56848260051b01610a9d565b818152848101925061012091820284018501918a831115610b7657600080fd5b938501935b82851015610c095780858c031215610b935760008081fd5b610b9b610a73565b610ba486610946565b8152610bb1878701610adc565b818801528588013588820152606080870135908201526080808701359082015260a0808701359082015260c0808701359082015260e08087013590820152610100808701359082015284529384019392850192610b7b565b508096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4257600080fd5b81516109b081610ace565b634e487b7160e01b600052601160045260246000fd5b600060018201610c7557610c75610c4d565b5060010190565b80820180821115610c8f57610c8f610c4d565b92915050565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015610a025781546001600160a01b03168452600182810154878601529385019360029092019101610cb956fea264697066735822122065aa2249a1a7a498028addd7badcd78fdb185c332d1f8d0e5c8ab376301192b464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6677,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "liquidationOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6679,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6685,
        "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(TokenAmount)9608_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TokenAmount)9608_storage)dyn_storage": {
        "base": "t_struct(TokenAmount)9608_storage",
        "encoding": "dynamic_array",
        "label": "struct IBase.TokenAmount[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(TokenAmount)9608_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBase.TokenAmount[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TokenAmount)9608_storage)dyn_storage"
      },
      "t_struct(TokenAmount)9608_storage": {
        "encoding": "inplace",
        "label": "struct IBase.TokenAmount",
        "members": [
          {
            "astId": 9605,
            "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9607,
            "contract": "contracts/CollSurplusPool.sol:CollSurplusPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}