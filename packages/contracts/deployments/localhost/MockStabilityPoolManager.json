{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromLiquidationOps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromReservePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stabilityPoolAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidationOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "storgePoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reservePoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtTokenManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "StabilityPoolManagerInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        }
      ],
      "name": "addStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompoundedDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "deposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "getDepositorCollGains",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "collGains",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositorCompoundedDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorCompoundedDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "deposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositorDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "getDepositorDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "deposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "getRemainingStability",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IStabilityPool",
              "name": "stabilityPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "remaining",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtToOffset",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBase.TokenAmount[]",
              "name": "collGained",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBBase.RemainingStability[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        }
      ],
      "name": "getStabilityPool",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStabilityPools",
      "outputs": [
        {
          "internalType": "contract IStabilityPool[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_debtTokenAddress",
          "type": "address"
        }
      ],
      "name": "getTotalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "deposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IStabilityPool",
              "name": "stabilityPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "remaining",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtToOffset",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBase.TokenAmount[]",
              "name": "collGained",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBBase.RemainingStability[]",
          "name": "_toOffset",
          "type": "tuple[]"
        }
      ],
      "name": "offset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        }
      ],
      "name": "provideStability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePool",
      "outputs": [
        {
          "internalType": "contract IReservePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storagePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reservePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stabilityPools",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stabilityPoolsArray",
      "outputs": [
        {
          "internalType": "contract IStabilityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePool",
      "outputs": [
        {
          "internalType": "contract IStoragePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        }
      ],
      "name": "testDebtToken_sendToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawGains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBase.TokenAmount[]",
          "name": "_debts",
          "type": "tuple[]"
        }
      ],
      "name": "withdrawStability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x273f6131ccd3949f4e7ea4e1835f1751cdbb6bf31e0c8970e9eea63addeb8c6d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "4328839",
    "logsBloom": "0x
    "blockHash": "0x971d3955d4629ca4bb2cf7e3c36cf0edb4e9b4125600211619a7f4b15003c200",
    "transactionHash": "0x273f6131ccd3949f4e7ea4e1835f1751cdbb6bf31e0c8970e9eea63addeb8c6d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x273f6131ccd3949f4e7ea4e1835f1751cdbb6bf31e0c8970e9eea63addeb8c6d",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x971d3955d4629ca4bb2cf7e3c36cf0edb4e9b4125600211619a7f4b15003c200"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "4328839",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromLiquidationOps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromReservePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidationOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"storgePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reservePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtTokenManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolManagerInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"name\":\"addStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompoundedDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getDepositorCollGains\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"collGains\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositorCompoundedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorCompoundedDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositorDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getRemainingStability\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"stabilityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtToOffset\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"collGained\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBBase.RemainingStability[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"name\":\"getStabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStabilityPools\",\"outputs\":[{\"internalType\":\"contract IStabilityPool[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtTokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"stabilityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtToOffset\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"collGained\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBBase.RemainingStability[]\",\"name\":\"_toOffset\",\"type\":\"tuple[]\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"}],\"name\":\"provideStability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"contract IReservePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityPools\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stabilityPoolsArray\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePool\",\"outputs\":[{\"internalType\":\"contract IStoragePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"name\":\"testDebtToken_sendToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBase.TokenAmount[]\",\"name\":\"_debts\",\"type\":\"tuple[]\"}],\"name\":\"withdrawStability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mock/MockStabilityPoolManager.sol\":\"MockStabilityPoolManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations is IBBase {\\n  // --- Events ---\\n\\n  event BorrowerOperationsInitialized(\\n    address _troveManagerAddress,\\n    address _storagePoolAddress,\\n    address _stabilityPoolAddress,\\n    address _reservePoolAddress,\\n    address _priceFeedAddress,\\n    address _debtTokenManagerAddress,\\n    address _collTokenManagerAddress,\\n    address _swapOperationsAddress,\\n    address _sortedTrovesAddress,\\n    address _collSurplusPoolAddress\\n  );\\n  event TroveCreated(address _borrower, TokenAmount[] _colls);\\n  event PaidBorrowingFee(address indexed _borrower, uint amount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromStabilityPool();\\n  error NotFromSwapOps();\\n  error CollWithdrawPermittedInRM();\\n  error ICR_lt_MCR();\\n  error ICR_lt_CCR();\\n  error TCR_lt_CCR();\\n  error ICRDecreasedInRM();\\n  error MaxFee_gt_100_InRM();\\n  error MaxFee_out_Range();\\n  error Repaid_gt_CurrentDebt();\\n  error TroveClosedOrNotExist();\\n  error ActiveTrove();\\n  error NotAllowedInRecoveryMode();\\n  error NotBorrower();\\n  error WithdrawAmount_gt_Coll();\\n  error ZeroDebtChange();\\n  error InsufficientDebtToRepay();\\n  error ZeroDebtRepay();\\n\\n  // --- Functions ---\\n\\n  function openTrove(TokenAmount[] memory _colls) external;\\n\\n  function openTroveWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s\\n  ) external;\\n\\n  function addColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function addCollWithPermit(\\n    TokenAmount[] memory _colls,\\n    uint deadline,\\n    uint8[] memory v,\\n    bytes32[] memory r,\\n    bytes32[] memory s,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function withdrawColl(TokenAmount[] memory _colls, address _upperHint, address _lowerHint) external;\\n\\n  function increaseDebt(address _borrower, address _to, TokenAmount[] memory _debts, MintMeta memory _meta) external;\\n\\n  function repayDebt(TokenAmount[] memory _debts, address _upperHint, address _lowerHint) external;\\n\\n  function repayDebtFromPoolBurn(\\n    address borrower,\\n    TokenAmount[] memory _debts,\\n    address _upperHint,\\n    address _lowerHint\\n  ) external;\\n\\n  function closeTrove() external;\\n\\n  function claimCollateral() external;\\n\\n  function getCompositeDebt(DebtTokenAmount[] memory _debts) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xaa9829fa8ae2af0978526abfbdf43022148e77223ddd9630d286da36b30c17e7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\n\\n// Common interface for the dToken Manager.\\ninterface IDebtTokenManager {\\n  // --- Events ---\\n\\n  event DebtTokenManagerInitialized(address _stabilityPoolManagerAddress);\\n  event DebtTokenAdded(address _debtTokenAddress);\\n\\n  // --- Custom Errors ---\\n\\n  error InvalidDebtToken();\\n  error SymbolAlreadyExists();\\n  error StableCoinAlreadyExists();\\n\\n  // --- Functions ---\\n\\n  function getStableCoin() external view returns (IDebtToken);\\n\\n  function isDebtToken(address _address) external view returns (bool);\\n\\n  function getDebtToken(address _address) external view returns (IDebtToken);\\n\\n  function getDebtTokenAddresses() external view returns (address[] memory);\\n\\n  function addDebtToken(address _debtTokenAddress) external;\\n}\\n\",\"keccak256\":\"0x938db39bcd650c1faea0167a260e5fa5cd97769a24ef4fb2c656a9948fda7ccc\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IReservePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\nimport './IDebtToken.sol';\\n\\ninterface IReservePool is IBBase {\\n  error NotFromSPM();\\n\\n  event ReservePoolInitialized(\\n    address _stabilityPoolManager,\\n    address _priceFeed,\\n    address _stableDebtTokenAddress,\\n    address _govTokenAddress\\n  );\\n  event ReserveCapChanged(uint newReserveCap, uint newGovReserveCap);\\n  event WithdrewReserves(uint govAmount, uint stableAmount);\\n\\n  function stableDebtToken() external view returns (IDebtToken);\\n\\n  function govToken() external view returns (IERC20);\\n\\n  function setRelativeStableCap(uint _relativeStableCap) external;\\n\\n  function stableAmountUntilCap() external view returns (uint);\\n\\n  function isGovReserveCapReached() external view returns (bool);\\n\\n  function withdrawValue(address stabilityPool, uint withdrawAmount) external returns (uint usedGov, uint usedStable);\\n}\\n\",\"keccak256\":\"0xf97d0b0249e9d675ff045749add7e6768629d2fb1c17980ffa26af7952d9fc59\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface IStabilityPoolManager is IBBase {\\n  // --- Events ---\\n\\n  event StabilityPoolManagerInitiated(\\n    address liquidationOperationsAddress,\\n    address storgePoolAddress,\\n    address reservePoolAddress,\\n    address debtTokenManagerAddress,\\n    address priceFeedAddress\\n  );\\n  event StabilityPoolAdded(address stabilityPoolAddress);\\n\\n  // --- Custom Errors ---\\n  error NotFromLiquidationOps();\\n  error NotFromReservePool();\\n  error PoolNotExist();\\n  error PoolExist();\\n  error Unauthorized();\\n\\n  // --- Functions ---\\n  function getStabilityPool(IDebtToken _debtToken) external view returns (IStabilityPool);\\n\\n  function getRemainingStability(\\n    address[] memory collTokenAddresses\\n  ) external view returns (RemainingStability[] memory);\\n\\n  function getTotalDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getTotalDeposit(address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getDepositorDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorDeposit(address _depositor, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getCompoundedDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCompoundedDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view returns (uint amount);\\n\\n  function getDepositorCompoundedDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCollGains(\\n    address _depositor,\\n    address[] memory collTokenAddresses\\n  ) external view returns (TokenAmount[] memory collGains);\\n\\n  function provideStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawGains() external;\\n\\n  function offset(RemainingStability[] memory _toOffset) external;\\n\\n  function addStabilityPool(IDebtToken _debtToken) external;\\n}\\n\",\"keccak256\":\"0x2143d797199cdfc6918f43fe576542938ed8dc7ea1a8f616ca27e334f222726b\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IStabilityPool.sol';\\nimport './IDebtToken.sol';\\nimport './IBBase.sol';\\nimport './IPriceFeed.sol';\\nimport './IDebtTokenManager.sol';\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is IBBase {\\n  // --- Events ---\\n\\n  event TroveManagerInitialized(\\n    address _borrowerOperationsAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _storagePoolAddress,\\n    address _priceFeedAddress,\\n    address _sortedTrovesAddress\\n  );\\n\\n  event TroveAppliedRewards(address _borrower, CAmount[] _appliedRewards);\\n  event TroveClosed(address _borrower, Status _closingState);\\n  event TroveIndexUpdated(address _borrower, uint _newIndex);\\n  event TroveCollChanged(address _borrower, address[] _collTokenAddresses);\\n\\n  event StableCoinBaseRateUpdated(uint _baseRate);\\n  event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\\n  event TotalStakesUpdated(TokenAmount[] _totalStakes);\\n  event SystemSnapshotsUpdated(TokenAmount[] _totalStakesSnapshot, TokenAmount[] _totalCollateralSnapshot);\\n  event LTermsUpdated(CAmount[] _liquidatedTokens);\\n  event TroveSnapshotsUpdated(CAmount[] _liquidatedTokens);\\n\\n  // --- Errors ---\\n\\n  error NotFromBorrowerOrRedemptionOps();\\n  error InvalidTrove();\\n  error OnlyOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getTroveOwnersCount() external view returns (uint);\\n\\n  function getTroveStatus(address _borrower) external view returns (uint);\\n\\n  function isTroveActive(address _borrower) external view returns (bool);\\n\\n  function setTroveStatus(address _borrower, uint num) external;\\n\\n  //\\n\\n  function getCurrentICR(address _borrower) external view returns (uint ICR, uint currentDebtInUSD);\\n\\n  function getICRIncludingPatch(\\n    address _borrower,\\n    TokenAmount[] memory addedColl,\\n    TokenAmount[] memory removedColl,\\n    TokenAmount[] memory addedDebt,\\n    TokenAmount[] memory removedDebt\\n  ) external view returns (uint ICR);\\n\\n  //\\n\\n  function updateStakeAndTotalStakes(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function removeStake(address[] memory collTokenAddresses, address _borrower) external;\\n\\n  function updateSystemSnapshots_excludeCollRemainder(TokenAmount[] memory totalCollGasCompensation) external;\\n\\n  function getTroveStakes(address _borrower, address _token) external view returns (uint);\\n\\n  function getTroveStakeValue(address _borrower) external view returns (uint);\\n\\n  //\\n\\n  function redistributeDebtAndColl(address[] memory collTokenAddresses, CAmount[] memory toRedistribute) external;\\n\\n  function getPendingReward(\\n    address _borrower,\\n    address _tokenAddress,\\n    bool _isColl\\n  ) external view returns (uint pendingReward);\\n\\n  function applyPendingRewards(address _borrower) external;\\n\\n  function updateTroveRewardSnapshots(address _borrower) external;\\n\\n  //\\n\\n  function increaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function decreaseTroveColl(address _borrower, TokenAmount[] memory _collTokenAmounts) external;\\n\\n  function increaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  function decreaseTroveDebt(address _borrower, DebtTokenAmount[] memory _debtTokenAmounts) external;\\n\\n  //\\n\\n  function getEntireDebtAndColl(\\n    address _borrower\\n  )\\n    external\\n    view\\n    returns (\\n      RAmount[] memory amounts,\\n      uint troveCollInUSD,\\n      uint troveDebtInUSD,\\n      uint troveDebtInUSDWithoutGasCompensation\\n    );\\n\\n  function getTroveDebt(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveRepayableDebt(address _borrower, address _debtTokenAddress, bool _includingStableCoinGasCompensation) external view returns (uint amount);\\n\\n  function getTroveRepayableDebts(address _borrower, bool _includingStableCoinGasCompensation) external view returns (TokenAmount[] memory);\\n\\n  function getTroveColl(address _borrower) external view returns (TokenAmount[] memory);\\n\\n  function getTroveWithdrawableColl(address _borrower, address _collTokenAddress) external view returns (uint amount);\\n\\n  function getTroveWithdrawableColls(address _borrower) external view returns (TokenAmount[] memory colls);\\n\\n  //\\n\\n  function addTroveOwnerToArray(address _borrower) external returns (uint128 index);\\n\\n  function closeTroveByProtocol(address[] memory collTokenAddresses, address _borrower, Status closedStatus) external;\\n\\n  //\\n\\n  function getStableCoinBaseRate() external view returns (uint);\\n\\n  function getBorrowingRate(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingRateWithDecay(bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFee(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function getBorrowingFeeWithDecay(uint debt, bool isStableCoin) external view returns (uint);\\n\\n  function decayStableCoinBaseRateFromBorrowing(uint borrowedStable) external;\\n\\n  function updateStableCoinBaseRateFromRedemption(uint _totalRedeemedStable, uint _totalStableCoinSupply) external;\\n\\n  function calcDecayedStableCoinBaseRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x985097ba88b35873d95552e1f17ad363ba6258681c948ec878458adbf8b5af93\",\"license\":\"MIT\"},\"contracts/Mock/MockStabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '../StabilityPoolManager.sol';\\n\\ncontract MockStabilityPoolManager is StabilityPoolManager {\\n  // DEBTTOKEN TESTER PROXIES\\n  function testDebtToken_sendToPool(\\n    address _sender,\\n    address _poolAddress,\\n    uint256 _amount,\\n    IDebtToken _debtToken\\n  ) external {\\n    _debtToken.sendToPool(_sender, _poolAddress, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa21beb49dacc0098ec1e9803346548e6be0906e87d66aa56ffe0a8996e8f8c73\",\"license\":\"MIT\"},\"contracts/StabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './Interfaces/IBorrowerOperations.sol';\\nimport './Interfaces/IStabilityPool.sol';\\nimport './Interfaces/IBorrowerOperations.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Dependencies/CheckContract.sol';\\n\\n/*\\n * The Stability Pool holds debt tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its debt gets offset with\\n * token in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of debt tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a debt token loss, in proportion to their deposit as a share of total deposits.\\n * Calculated separately by debt token groups.\\n * They also receive a coll token gain, as the collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total debt token in the Stability Pool, depletes 40% of each deposit (of the same token).\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n *\\n * --- IMPLEMENTATION ---\\n *\\n * We use a highly scalable method of tracking deposits and coll gains that has O(1) complexity.\\n *\\n * When a liquidation occurs, rather than updating each depositor's deposit and gains, we simply update two state variables:\\n * a product P, and a sum S.\\n *\\n * A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits\\n * and accumulated gains over time, as liquidations occur, using just these two variables P and S. When depositors join the\\n * Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively.\\n *\\n * The formula for a depositor's accumulated gain is derived here:\\n * https://github.com/liquity/dev/blob/main/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool,\\n * and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated gain.\\n *\\n * Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding gain\\n * can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S.\\n *\\n * Any time a depositor updates their deposit (withdrawal, top-up) their accumulated gain is paid out, their new deposit is recorded\\n * (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S.\\n * Essentially, they make a fresh deposit that overwrites the old one.\\n *\\n *\\n * --- SCALE FACTOR ---\\n *\\n * Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[.\\n * Unfortunately, Solidity floor division always reaches 0, sooner or later.\\n *\\n * A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P\\n * to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking.\\n *\\n * So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity),\\n * we first multiply P by 1e9, and increment a currentScale factor by 1.\\n *\\n * The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the\\n * scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the\\n * order of 1e-9.\\n *\\n * --- EPOCHS ---\\n *\\n * Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0\\n * forever, and break all future reward calculations.\\n *\\n * So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1.\\n *\\n * --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * When a deposit is made, it gets snapshots of the currentEpoch and the currentScale.\\n *\\n * When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer,\\n * then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0.\\n *\\n * Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t.\\n * If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit\\n * as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion LUSD has depleted to < 1 LUSD).\\n *\\n *\\n *  --- TRACKING DEPOSITOR'S GAINS OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch.\\n *\\n * This allows us to calculate a deposit's accumulated gain, during the epoch in which the deposit was non-zero and earned gains.\\n *\\n * We calculate the depositor's accumulated gains for the scale at which they made the deposit, using the gain formula:\\n * e_1 = d_t * (S - S_t) / P_t\\n *\\n * and also for scale after, taking care to divide the latter by a factor of 1e9:\\n * e_2 = d_t * S / (P_t * 1e9)\\n *\\n * The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything.\\n * The deposit therefore was present for reward events from the beginning of that second scale.\\n *\\n *        S_i-S_t + S_{i+1}\\n *      .<--------.------------>\\n *      .         .\\n *      . S_i     .   S_{i+1}\\n *   <--.-------->.<----------->\\n *   S_t.         .\\n *   <->.         .\\n *      t         .\\n *  |---+---------|-------------|-----...\\n *         i            i+1\\n *\\n * The sum of (e_1 + e_2) captures the depositor's total accumulated gains, handling the case where their\\n * deposit spanned one scale change. We only care about gains across one scale change, since the compounded\\n * deposit is defined as being 0 once it has spanned more than one scale change.\\n *\\n *\\n * --- UPDATING P WHEN A LIQUIDATION OCCURS ---\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n *\\n * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An LQTY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n *\\n * We use the same mathematical product-sum approach to track LQTY gains for depositors, where 'G' is the sum corresponding to LQTY gains.\\n * The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\\n *\\n */\\ncontract StabilityPool is LiquityBase, CheckContract, IStabilityPool {\\n  string public constant NAME = 'StabilityPool';\\n\\n  address public stabilityPoolManagerAddress;\\n\\n  // --- Data structures ---\\n\\n  IDebtToken public depositToken;\\n  uint256 public totalDeposits;\\n\\n  struct Snapshots {\\n    mapping(address => uint) sums; // [coll token address] -> snapshot of S(um)\\n    uint P;\\n    uint128 scale;\\n    uint128 epoch;\\n  }\\n  mapping(address => Snapshots) public depositSnapshots; // [depositor address] -> snapshots struct\\n  mapping(address => uint) public deposits; // [depositor address] -> deposit amount\\n\\n  /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n   * after a series of liquidations have occurred, each of which cancel some debt with the deposit.\\n   *\\n   * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n   * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n   */\\n  uint public P = DECIMAL_PRECISION;\\n\\n  uint public constant SCALE_FACTOR = 1e9;\\n  uint128 public currentScale; // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n  uint128 public currentEpoch; // With each offset that fully empties the Pool, the epoch is incremented by 1\\n\\n  /*Gains sum 'S': During its lifetime, each deposit d_t earns an ETH gain of ( d_t * [S - S_t] )/P_t, where S_t\\n   * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n   *\\n   * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n   *\\n   * - The inner mapping records the sum S at different scales\\n   * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n   */\\n\\n  address[] public usedCollTokens;\\n  mapping(address => uint) public totalGainedColl; // [token address] -> total gained collateral\\n  mapping(uint128 => mapping(uint128 => mapping(address => uint))) public epochToScaleToCollTokenToSum; // [epoch][scale][collTokenAddress] => sum\\n\\n  mapping(address => uint) public lastErrorOffset; // [tokenAddress] value, Error trackers for the error correction in the offset calculation\\n\\n  constructor(address _stabilityPoolManagerAddress, address _depositTokenAddress) {\\n    checkContract(_stabilityPoolManagerAddress);\\n    checkContract(_depositTokenAddress);\\n\\n    stabilityPoolManagerAddress = _stabilityPoolManagerAddress;\\n    depositToken = IDebtToken(_depositTokenAddress);\\n\\n    emit StabilityPoolInitialized(_stabilityPoolManagerAddress, _depositTokenAddress);\\n  }\\n\\n  // --- Getters for public variables. Required by IPool interface ---\\n\\n  function getTotalGainedColl() external view override returns (TokenAmount[] memory coll) {\\n    coll = new TokenAmount[](usedCollTokens.length);\\n    for (uint i = 0; i < usedCollTokens.length; i++) {\\n      coll[i].tokenAddress = usedCollTokens[i];\\n      coll[i].amount = totalGainedColl[usedCollTokens[i]];\\n    }\\n    return coll;\\n  }\\n\\n  function getTotalDeposit() external view override returns (uint) {\\n    return totalDeposits;\\n  }\\n\\n  function getDepositToken() external view override returns (IDebtToken) {\\n    return depositToken;\\n  }\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view override returns (uint) {\\n    return depositSnapshots[_depositor].sums[_collToken];\\n  }\\n\\n  // --- External Depositor Functions ---\\n\\n  /*  provideToSP():\\n   * - Triggers a GOV issuance, based on time passed since the last issuance. The GOV issuance is shared between *all* depositors\\n   * - Sends depositor's accumulated gains to depositor\\n   * - Increases deposit stake, and takes new snapshots.\\n   */\\n  function provideToSP(address depositor, uint _amount) external override {\\n    _requireCallerIsStabilityPoolManager();\\n    _requireNonZeroAmount(_amount);\\n\\n    uint remainingDeposit = getCompoundedDebtDeposit(depositor);\\n    _payoutCollGains(depositor, remainingDeposit);\\n\\n    totalDeposits += _amount;\\n\\n    // update deposit snapshots\\n    uint newDeposit = remainingDeposit + _amount;\\n    _updateDepositAndSnapshots(depositor, newDeposit);\\n\\n    emit StabilityProvided(depositor, _amount);\\n  }\\n\\n  /*  withdrawFromSP():\\n   * - Sends all depositor's accumulated gains to depositor\\n   * - Decreases deposit and takes new snapshots.\\n   * - If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n   */\\n  function withdrawFromSP(address user, uint depositToWithdrawal) external override {\\n    _requireCallerIsStabilityPoolManager();\\n\\n    uint remainingDeposit = getCompoundedDebtDeposit(user);\\n    depositToWithdrawal = LiquityMath._min(depositToWithdrawal, remainingDeposit);\\n    if (depositToWithdrawal == 0) return;\\n\\n    // coll gain and deposit payout\\n    _payoutCollGains(user, remainingDeposit);\\n\\n    depositToken.transfer(user, depositToWithdrawal);\\n    totalDeposits -= depositToWithdrawal;\\n\\n    // update current deposit snapshot\\n    uint newDeposit = remainingDeposit - depositToWithdrawal;\\n    _updateDepositAndSnapshots(user, newDeposit);\\n\\n    emit StabilityWithdrawn(user, depositToWithdrawal);\\n  }\\n\\n  /* withdrawGains:\\n   * - Triggers a GOV issuance, based on time passed since the last issuance. The GOV issuance is shared between *all* depositors\\n   * - Sends all depositor's GOV gain to depositor\\n   * - Transfers the depositor's entire gains to its wallet\\n   * - Leaves their compounded deposit in the Stability Pool\\n   * - Updates snapshots for deposit stake */\\n  function withdrawGains(address user) external override {\\n    _requireCallerIsStabilityPoolManager();\\n\\n    // coll gain payout\\n    uint remainingDeposit = getCompoundedDebtDeposit(user);\\n    _payoutCollGains(user, remainingDeposit);\\n\\n    // update deposit snapshots\\n    _updateDepositAndSnapshots(user, remainingDeposit);\\n  }\\n\\n  //    // --- GOV issuance functions ---\\n  //\\n  //    function _triggerLQTYIssuance(ICommunityIssuance _communityIssuance) internal {\\n  //        uint LQTYIssuance = _communityIssuance.issueLQTY();\\n  //       _updateG(LQTYIssuance);\\n  //    }\\n  //\\n  //    function _updateG(uint _LQTYIssuance) internal {\\n  //        uint totalLUSD = totalLUSDDeposits; // cached to save an SLOAD\\n  //        /*\\n  //        * When total deposits is 0, G is not updated. In this case, the LQTY issued can not be obtained by later\\n  //        * depositors - it is missed out on, and remains in the balanceof the CommunityIssuance contract.\\n  //        *\\n  //        */\\n  //        if (totalLUSD == 0 || _LQTYIssuance == 0) {return;}\\n  //\\n  //        uint LQTYPerUnitStaked;\\n  //        LQTYPerUnitStaked =_computeLQTYPerUnitStaked(_LQTYIssuance, totalLUSD);\\n  //\\n  //        uint marginalLQTYGain = LQTYPerUnitStaked.mul(P);\\n  //        epochToScaleToG[currentEpoch][currentScale] = epochToScaleToG[currentEpoch][currentScale].add(marginalLQTYGain);\\n  //\\n  //        emit G_Updated(epochToScaleToG[currentEpoch][currentScale], currentEpoch, currentScale);\\n  //    }\\n  //\\n  //    function _computeLQTYPerUnitStaked(uint _LQTYIssuance, uint _totalLUSDDeposits) internal returns (uint) {\\n  //        /*\\n  //        * Calculate the LQTY-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n  //        * cumulative error low in the running total G:\\n  //        *\\n  //        * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n  //        * function was called.\\n  //        * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n  //        * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n  //        * 4) Store this error for use in the next correction when this function is called.\\n  //        * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n  //        */\\n  //        uint LQTYNumerator = _LQTYIssuance.mul(DECIMAL_PRECISION).add(lastLQTYError);\\n  //\\n  //        uint LQTYPerUnitStaked = LQTYNumerator.div(_totalLUSDDeposits);\\n  //        lastLQTYError = LQTYNumerator.sub(LQTYPerUnitStaked.mul(_totalLUSDDeposits));\\n  //\\n  //        return LQTYPerUnitStaked;\\n  //    }\\n  //\\n  //    function _payOutLQTYGains(ICommunityIssuance _communityIssuance, address _depositor) internal {\\n  //        // Pay out depositor's LQTY gain\\n  //        uint depositorLQTYGain = getDepositorLQTYGain(_depositor);\\n  //        _communityIssuance.sendLQTY(_depositor, depositorLQTYGain);\\n  //        emit LQTYPaidToDepositor(_depositor, depositorLQTYGain);\\n  //    }\\n  //\\n  //    /*\\n  //* Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n  //* Given by the formula:  LQTY = d0 * (G - G(0))/P(0)\\n  //* where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n  //* d0 is the last recorded deposit value.\\n  //*/\\n  //    function getDepositorLQTYGain(address _depositor) public view override returns (uint) {\\n  //        uint initialDeposit = deposits[_depositor].initialValue;\\n  //        if (initialDeposit == 0) {return 0;}\\n  //\\n  //        Snapshots storage snapshots = depositSnapshots[_depositor];\\n  //        uint LQTYGain = _getLQTYGainFromSnapshots(initialDeposit, snapshots);\\n  //        return LQTYGain;\\n  //    }\\n  //\\n  //    function _getLQTYGainFromSnapshots(uint initialStake, Snapshots storage snapshots) internal view returns (uint) {\\n  //        /*\\n  //         * Grab the sum 'G' from the epoch at which the stake was made. The LQTY gain may span up to one scale change.\\n  //         * If it does, the second portion of the LQTY gain is scaled by 1e9.\\n  //         * If the gain spans no scale change, the second portion will be 0.\\n  //         */\\n  //        uint128 epochSnapshot = snapshots.epoch;\\n  //        uint128 scaleSnapshot = snapshots.scale;\\n  //        uint G_Snapshot = snapshots.G;\\n  //        uint P_Snapshot = snapshots.P;\\n  //\\n  //        uint firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot].sub(G_Snapshot);\\n  //        uint secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot.add(1)].div(SCALE_FACTOR);\\n  //\\n  //        uint LQTYGain = initialStake.mul(firstPortion.add(secondPortion)).div(P_Snapshot).div(DECIMAL_PRECISION);\\n  //\\n  //        return LQTYGain;\\n  //    }\\n\\n  // --- Liquidation functions ---\\n\\n  /*\\n   * Cancels out the specified debt against the tokens contained in the Stability Pool (as far as possible)\\n   * and transfers the Trove's collateral from ActivePool to StabilityPool.\\n   * Only called by liquidation functions in the TroveManager.\\n   */\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external override {\\n    _requireCallerIsStabilityPoolManager();\\n\\n    uint _totalDeposits = totalDeposits;\\n    if (_totalDeposits == 0) return;\\n\\n    // adding coll token address into the usedCollTokens array, if they are not already there\\n    for (uint i = 0; i < _collToAdd.length; i++) {\\n      TokenAmount memory collEntry = _collToAdd[i];\\n\\n      bool found = false;\\n      for (uint ii = 0; ii < usedCollTokens.length; ii++) {\\n        if (usedCollTokens[ii] != collEntry.tokenAddress) continue;\\n        found = true;\\n        break;\\n      }\\n      if (!found) usedCollTokens.push(collEntry.tokenAddress);\\n    }\\n\\n    (TokenAmount[] memory collGainPerUnitStaked, uint depositLossPerUnitStaked) = _computeRewardsPerUnitStaked(\\n      _collToAdd,\\n      _debtToOffset,\\n      _totalDeposits\\n    );\\n\\n    _updateRewardSumAndProduct(collGainPerUnitStaked, depositLossPerUnitStaked); // updates S and P\\n\\n    totalDeposits -= _debtToOffset;\\n    emit StabilityOffset(_debtToOffset, _collToAdd);\\n  }\\n\\n  function _computeRewardsPerUnitStaked(\\n    TokenAmount[] memory _collToAdd,\\n    uint _depositToOffset,\\n    uint _totalDeposits\\n  ) internal returns (TokenAmount[] memory collGainPerUnitStaked, uint depositLossPerUnitStaked) {\\n    /*\\n     * Compute the rewards. Uses a \\\"feedback\\\" error correction, to keep\\n     * the cumulative error in the P and S state variables low:\\n     *\\n     * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n     * function was called.\\n     * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n     * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n     * 4) Store these errors for use in the next correction when this function is called.\\n     * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n     */\\n\\n    assert(_depositToOffset <= _totalDeposits);\\n\\n    collGainPerUnitStaked = new TokenAmount[](_collToAdd.length);\\n    for (uint i = 0; i < _collToAdd.length; i++) {\\n      address tokenAddress = _collToAdd[i].tokenAddress;\\n      collGainPerUnitStaked[i].tokenAddress = tokenAddress;\\n\\n      uint collNumerator = _collToAdd[i].amount * DECIMAL_PRECISION + lastErrorOffset[tokenAddress];\\n      collGainPerUnitStaked[i].amount = collNumerator / _totalDeposits;\\n      lastErrorOffset[tokenAddress] = collNumerator - (collGainPerUnitStaked[i].amount * _totalDeposits);\\n\\n      totalGainedColl[tokenAddress] += _collToAdd[i].amount;\\n    }\\n\\n    if (_depositToOffset == _totalDeposits) {\\n      depositLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n      lastErrorOffset[address(depositToken)] = 0;\\n    } else {\\n      uint depositLossNumerator = _depositToOffset * DECIMAL_PRECISION - lastErrorOffset[address(depositToken)];\\n      /*\\n       * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" deposit loss,\\n       * which ensures the error in any given compoundedLUSDDeposit favors the Stability Pool.\\n       */\\n      depositLossPerUnitStaked = depositLossNumerator / _totalDeposits + 1;\\n      lastErrorOffset[address(depositToken)] = depositLossPerUnitStaked * _totalDeposits - depositLossNumerator;\\n    }\\n\\n    return (collGainPerUnitStaked, depositLossPerUnitStaked);\\n  }\\n\\n  // Update the Stability Pool reward sum S and product P\\n  function _updateRewardSumAndProduct(\\n    TokenAmount[] memory collGainPerUnitStaked,\\n    uint depositLossPerUnitStaked\\n  ) internal {\\n    assert(depositLossPerUnitStaked <= DECIMAL_PRECISION);\\n\\n    /*\\n     * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool deposit in the liquidation.\\n     * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - depositLossPerUnitStaked)\\n     */\\n\\n    uint currentP = P;\\n\\n    uint newP;\\n    uint128 currentScaleCached = currentScale;\\n    uint128 currentEpochCached = currentEpoch;\\n\\n    /*\\n     * Calculate the new S first, before we update P.\\n     * The coll gain for any given depositor from a liquidation depends on the value of their deposit\\n     * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n     *\\n     * Since S corresponds to coll gain, and P to deposit loss, we update S first.\\n     */\\n    for (uint i = 0; i < collGainPerUnitStaked.length; i++) {\\n      address tokenAddress = collGainPerUnitStaked[i].tokenAddress;\\n      uint currentS = epochToScaleToCollTokenToSum[currentEpochCached][currentScaleCached][tokenAddress];\\n      uint marginalCollGain = collGainPerUnitStaked[i].amount * currentP;\\n      uint newS = currentS + marginalCollGain;\\n      epochToScaleToCollTokenToSum[currentEpochCached][currentScaleCached][tokenAddress] = newS;\\n      emit S_Updated(tokenAddress, newS, currentEpochCached, currentScaleCached);\\n    }\\n\\n    // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n    uint newProductFactor = uint(DECIMAL_PRECISION) - depositLossPerUnitStaked;\\n    if (newProductFactor == 0) {\\n      currentEpoch = currentEpochCached + 1;\\n      emit EpochUpdated(currentEpoch);\\n      currentScale = 0;\\n      emit ScaleUpdated(currentScale);\\n      newP = DECIMAL_PRECISION;\\n\\n      // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n    } else if ((currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR) {\\n      newP = (currentP * newProductFactor * SCALE_FACTOR) / DECIMAL_PRECISION;\\n      currentScale = currentScaleCached + 1;\\n      emit ScaleUpdated(currentScale);\\n    } else {\\n      newP = (currentP * newProductFactor) / DECIMAL_PRECISION;\\n    }\\n\\n    assert(newP > 0);\\n    P = newP;\\n    emit P_Updated(newP);\\n  }\\n\\n  // --- Reward calculator functions ---\\n\\n  function _payoutCollGains(address _depositor, uint remainingDeposit) internal {\\n    TokenAmount[] memory collGains = new TokenAmount[](usedCollTokens.length);\\n    for (uint i = 0; i < usedCollTokens.length; i++) {\\n      address collTokenAddress = usedCollTokens[i];\\n      uint collGain = getDepositorCollGain(_depositor, collTokenAddress);\\n      if (collGain == 0) continue;\\n\\n      totalGainedColl[collTokenAddress] -= collGain;\\n      IERC20(collTokenAddress).transfer(_depositor, collGain);\\n      collGains[i] = TokenAmount(collTokenAddress, collGain);\\n    }\\n\\n    uint initialDeposit = deposits[_depositor];\\n    uint depositLoss = initialDeposit - remainingDeposit;\\n    emit StabilityGainsWithdrawn(_depositor, depositLoss, collGains);\\n  }\\n\\n  /* Calculates the gains earned by the deposit since its last snapshots were taken.\\n   * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n   * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n   * d0 is the last recorded deposit value.\\n   */\\n  function getDepositorCollGain(address _depositor, address _collToken) public view override returns (uint collGain) {\\n    uint initialDeposit = deposits[_depositor];\\n    if (initialDeposit == 0) return 0;\\n\\n    Snapshots storage snapshots = depositSnapshots[_depositor];\\n    collGain = _getCollGainFromSnapshots(initialDeposit, _collToken, snapshots);\\n    return collGain;\\n  }\\n\\n  function _getCollGainFromSnapshots(\\n    uint initialDeposit,\\n    address collToken,\\n    Snapshots storage snapshots\\n  ) internal view returns (uint) {\\n    /*\\n     * Grab the sum 'S' from the epoch at which the stake was made. The coll gain may span up to one scale change.\\n     * If it does, the second portion of the gain is scaled by 1e9.\\n     * If the gain spans no scale change, the second portion will be 0.\\n     */\\n    uint128 epochSnapshot = snapshots.epoch;\\n    uint128 scaleSnapshot = snapshots.scale;\\n    uint firstPortion = epochToScaleToCollTokenToSum[epochSnapshot][scaleSnapshot][collToken] -\\n      snapshots.sums[collToken];\\n    uint secondPortion = epochToScaleToCollTokenToSum[epochSnapshot][scaleSnapshot + 1][collToken] / SCALE_FACTOR;\\n\\n    uint collGain = (initialDeposit * (firstPortion + secondPortion)) / snapshots.P / DECIMAL_PRECISION;\\n    return collGain;\\n  }\\n\\n  // --- Compounded deposit ---\\n\\n  function getDepositorDeposit(address _depositor) external view override returns (uint) {\\n    return deposits[_depositor];\\n  }\\n\\n  /*\\n   * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n   * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n   */\\n  function getCompoundedDebtDeposit(address _depositor) public view override returns (uint) {\\n    uint initialDeposit = deposits[_depositor];\\n    if (initialDeposit == 0) return 0;\\n\\n    Snapshots storage snapshots = depositSnapshots[_depositor];\\n    uint compoundedDeposit = _getCompoundedStakeFromSnapshots(initialDeposit, snapshots);\\n    return compoundedDeposit;\\n  }\\n\\n  // Internal function, used to calculcate compounded deposits.\\n  function _getCompoundedStakeFromSnapshots(\\n    uint _initialStake,\\n    Snapshots storage _snapshots\\n  ) internal view returns (uint) {\\n    // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n    if (_snapshots.epoch < currentEpoch) return 0;\\n\\n    uint compoundedStake;\\n    uint128 scaleDiff = currentScale - _snapshots.scale;\\n\\n    /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n     * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n     * at least 1e-9 -- so return 0.\\n     */\\n    if (scaleDiff == 0) compoundedStake = (_initialStake * P) / _snapshots.P;\\n    else if (scaleDiff == 1) compoundedStake = (_initialStake * P) / _snapshots.P / SCALE_FACTOR;\\n    else compoundedStake = 0; // if scaleDiff >= 2\\n\\n    /*\\n     * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n     *\\n     * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n     * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n     * than it's theoretical value.\\n     *\\n     * Thus it's unclear whether this line is still really needed.\\n     */\\n    if (compoundedStake < _initialStake / 1e9) return 0;\\n\\n    return compoundedStake;\\n  }\\n\\n  // --- Stability Pool Deposit Functionality ---\\n\\n  function _updateDepositAndSnapshots(address _depositor, uint _newValue) internal {\\n    deposits[_depositor] = _newValue;\\n\\n    if (_newValue == 0) {\\n      delete depositSnapshots[_depositor];\\n      emit DepositSnapshotUpdated(_depositor);\\n      return;\\n    }\\n\\n    uint128 currentScaleCached = currentScale;\\n    depositSnapshots[_depositor].scale = currentScaleCached;\\n\\n    uint128 currentEpochCached = currentEpoch;\\n    depositSnapshots[_depositor].epoch = currentEpochCached;\\n\\n    uint currentP = P;\\n    depositSnapshots[_depositor].P = currentP;\\n\\n    for (uint i = 0; i < usedCollTokens.length; i++) {\\n      depositSnapshots[_depositor].sums[usedCollTokens[i]] = epochToScaleToCollTokenToSum[currentEpochCached][\\n        currentScaleCached\\n      ][usedCollTokens[i]];\\n    }\\n\\n    emit DepositSnapshotUpdated(_depositor);\\n  }\\n\\n  // --- 'require' functions ---\\n\\n  function _requireCallerIsStabilityPoolManager() internal view {\\n    if (msg.sender != stabilityPoolManagerAddress) revert NotFromStabilityPoolManager();\\n  }\\n\\n  function _requireUserHasDeposit(uint _initialDeposit) internal pure {\\n    if (_initialDeposit == 0) revert ZeroAmount();\\n  }\\n\\n  function _requireNonZeroAmount(uint _amount) internal pure {\\n    if (_amount == 0) revert ZeroAmount();\\n  }\\n}\\n\",\"keccak256\":\"0xe658c79dceb541248f0b1139af4f8557961fcaf698466b3c8cb97e9aa0175c22\",\"license\":\"MIT\"},\"contracts/StabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Interfaces/IDebtToken.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Interfaces/IDebtTokenManager.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Interfaces/IStabilityPool.sol';\\nimport './Interfaces/IStabilityPoolManager.sol';\\nimport './Interfaces/ITroveManager.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IReservePool.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './StabilityPool.sol';\\n\\ncontract StabilityPoolManager is Ownable(msg.sender), CheckContract, IStabilityPoolManager {\\n  string public constant NAME = 'StabilityPoolManager';\\n\\n  address public liquidationOperationsAddress;\\n  IStoragePool public storagePool;\\n  IReservePool public reservePool;\\n  IPriceFeed public priceFeed;\\n  address public debtTokenManagerAddress;\\n\\n  // --- Data structures ---\\n\\n  mapping(IDebtToken => IStabilityPool) public stabilityPools;\\n  IStabilityPool[] public stabilityPoolsArray;\\n\\n  // --- Dependency setter ---\\n\\n  function setAddresses(\\n    address _liquidationOperationsAddress,\\n    address _priceFeedAddress,\\n    address _storagePoolAddress,\\n    address _reservePoolAddress,\\n    address _debtTokenManagerAddress\\n  ) external onlyOwner {\\n    checkContract(_liquidationOperationsAddress);\\n    checkContract(_priceFeedAddress);\\n    checkContract(_storagePoolAddress);\\n    checkContract(_reservePoolAddress);\\n    checkContract(_debtTokenManagerAddress);\\n\\n    liquidationOperationsAddress = _liquidationOperationsAddress;\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n    storagePool = IStoragePool(_storagePoolAddress);\\n    reservePool = IReservePool(_reservePoolAddress);\\n    debtTokenManagerAddress = _debtTokenManagerAddress;\\n\\n    emit StabilityPoolManagerInitiated(\\n      _liquidationOperationsAddress,\\n      _storagePoolAddress,\\n      _reservePoolAddress,\\n      _debtTokenManagerAddress,\\n      _priceFeedAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  // --- Getters ---\\n\\n  function getStabilityPool(IDebtToken _debtToken) external view override returns (IStabilityPool) {\\n    IStabilityPool stabilityPool = stabilityPools[_debtToken];\\n    if (address(stabilityPool) == address(0)) revert PoolNotExist();\\n    return stabilityPool;\\n  }\\n\\n  function getStabilityPools() external view returns (IStabilityPool[] memory) {\\n    return stabilityPoolsArray;\\n  }\\n\\n  function getRemainingStability(\\n    address[] memory collTokenAddresses\\n  ) external view override returns (RemainingStability[] memory) {\\n    RemainingStability[] memory remainingStability = new RemainingStability[](stabilityPoolsArray.length);\\n\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      TokenAmount[] memory collGained = new TokenAmount[](collTokenAddresses.length);\\n      for (uint a = 0; a < collTokenAddresses.length; a++) collGained[a] = TokenAmount(collTokenAddresses[a], 0);\\n\\n      remainingStability[i] = RemainingStability({\\n        stabilityPool: stabilityPoolsArray[i],\\n        tokenAddress: address(stabilityPoolsArray[i].getDepositToken()),\\n        remaining: stabilityPoolsArray[i].getTotalDeposit(),\\n        debtToOffset: 0,\\n        collGained: collGained\\n      });\\n    }\\n\\n    return remainingStability;\\n  }\\n\\n  function getTotalDeposits() external view override returns (TokenAmount[] memory deposits) {\\n    deposits = new TokenAmount[](stabilityPoolsArray.length);\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      deposits[i] = TokenAmount(\\n        address(stabilityPoolsArray[i].getDepositToken()),\\n        stabilityPoolsArray[i].getTotalDeposit()\\n      );\\n    }\\n\\n    return deposits;\\n  }\\n\\n  function getTotalDeposit(address _debtTokenAddress) external view returns (uint amount) {\\n    IStabilityPool pool = stabilityPools[IDebtToken(_debtTokenAddress)];\\n    if (address(pool) == address(0)) return 0;\\n    return pool.getTotalDeposit();\\n  }\\n\\n  function getCompoundedDeposits() external view override returns (TokenAmount[] memory deposits) {\\n    deposits = new TokenAmount[](stabilityPoolsArray.length);\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      deposits[i] = TokenAmount(\\n        address(stabilityPoolsArray[i].getDepositToken()),\\n        stabilityPoolsArray[i].getCompoundedDebtDeposit(msg.sender)\\n      );\\n    }\\n\\n    return deposits;\\n  }\\n\\n  function getDepositorDeposits(address _depositor) external view override returns (TokenAmount[] memory deposits) {\\n    deposits = new TokenAmount[](stabilityPoolsArray.length);\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      deposits[i] = TokenAmount(\\n        address(stabilityPoolsArray[i].getDepositToken()),\\n        stabilityPoolsArray[i].getDepositorDeposit(_depositor)\\n      );\\n    }\\n\\n    return deposits;\\n  }\\n\\n  function getDepositorDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view override returns (uint amount) {\\n    IStabilityPool pool = stabilityPools[IDebtToken(_debtTokenAddress)];\\n    if (address(pool) == address(0)) return 0;\\n    return pool.getDepositorDeposit(_depositor);\\n  }\\n\\n  function getDepositorCompoundedDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view override returns (uint amount) {\\n    IStabilityPool pool = stabilityPools[IDebtToken(_debtTokenAddress)];\\n    if (address(pool) == address(0)) return 0;\\n    return pool.getCompoundedDebtDeposit(_depositor);\\n  }\\n\\n  function getDepositorCompoundedDeposits(\\n    address _depositor\\n  ) external view override returns (TokenAmount[] memory deposits) {\\n    deposits = new TokenAmount[](stabilityPoolsArray.length);\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      deposits[i] = TokenAmount(\\n        address(stabilityPoolsArray[i].getDepositToken()),\\n        stabilityPoolsArray[i].getCompoundedDebtDeposit(_depositor)\\n      );\\n    }\\n\\n    return deposits;\\n  }\\n\\n  function getDepositorCollGains(\\n    address _depositor,\\n    address[] memory collTokenAddresses\\n  ) external view override returns (TokenAmount[] memory collGains) {\\n    collGains = new TokenAmount[](collTokenAddresses.length);\\n    for (uint i = 0; i < collTokenAddresses.length; i++) {\\n      for (uint ii = 0; ii < stabilityPoolsArray.length; ii++) {\\n        collGains[i] = TokenAmount(\\n          address(stabilityPoolsArray[ii].getDepositToken()),\\n          stabilityPoolsArray[ii].getDepositorCollGain(_depositor, collTokenAddresses[i])\\n        );\\n      }\\n    }\\n\\n    return collGains;\\n  }\\n\\n  // --- Setters ---\\n\\n  function provideStability(TokenAmount[] memory _debts) external override {\\n    address user = msg.sender;\\n\\n    for (uint i = 0; i < _debts.length; i++) {\\n      IDebtToken debtToken = IDebtToken(_debts[i].tokenAddress);\\n      IStabilityPool stabilityPool = stabilityPools[debtToken];\\n      if (address(stabilityPool) == address(0)) revert PoolNotExist();\\n\\n      debtToken.sendToPool(user, address(stabilityPool), _debts[i].amount);\\n      stabilityPool.provideToSP(user, _debts[i].amount);\\n    }\\n  }\\n\\n  function withdrawStability(TokenAmount[] memory _debts) external override {\\n    address user = msg.sender;\\n\\n    for (uint i = 0; i < _debts.length; i++) {\\n      IDebtToken debtToken = IDebtToken(_debts[i].tokenAddress);\\n      IStabilityPool stabilityPool = stabilityPools[debtToken];\\n      if (address(stabilityPool) == address(0)) revert PoolNotExist();\\n\\n      stabilityPool.withdrawFromSP(user, _debts[i].amount);\\n    }\\n  }\\n\\n  function withdrawGains() external override {\\n    address user = msg.sender;\\n\\n    for (uint i = 0; i < stabilityPoolsArray.length; i++) {\\n      IStabilityPool stabilityPool = stabilityPoolsArray[i];\\n      stabilityPool.withdrawGains(user);\\n    }\\n  }\\n\\n  function offset(RemainingStability[] memory _toOffset) external override {\\n    _requireCallerIsLiquidationOps();\\n\\n    IStoragePool storagePoolCached = storagePool;\\n    for (uint i = 0; i < _toOffset.length; i++) {\\n      RemainingStability memory remainingStability = _toOffset[i];\\n      address stabilityPoolAddress = address(remainingStability.stabilityPool);\\n      if (remainingStability.debtToOffset == 0) continue;\\n\\n      // Burn the debt that was successfully offset\\n      remainingStability.stabilityPool.getDepositToken().burn(stabilityPoolAddress, remainingStability.debtToOffset);\\n\\n      // move the coll from the active pool into the stability pool\\n      IDebtToken stableDebt = reservePool.stableDebtToken();\\n      IERC20 govToken = reservePool.govToken();\\n      uint stableCollIndex = remainingStability.collGained.length; // out range index as default\\n      uint govTokenCollIndex = remainingStability.collGained.length;\\n\\n      for (uint ii = 0; ii < remainingStability.collGained.length; ii++) {\\n        if (remainingStability.collGained[ii].tokenAddress == address(stableDebt)) stableCollIndex = ii;\\n        if (remainingStability.collGained[ii].tokenAddress == address(govToken)) govTokenCollIndex = ii;\\n        if (remainingStability.collGained[ii].amount == 0) continue;\\n\\n        storagePoolCached.withdrawalValue(\\n          stabilityPoolAddress,\\n          remainingStability.collGained[ii].tokenAddress,\\n          true,\\n          PoolType.Active,\\n          remainingStability.collGained[ii].amount\\n        );\\n      }\\n\\n      // check possible loss\\n      uint gainedCollValue = _getGainedCollValue(remainingStability.collGained);\\n      uint offsetValue = priceFeed.getUSDValue(remainingStability.tokenAddress, remainingStability.debtToOffset);\\n      if (offsetValue > gainedCollValue) {\\n        // Repay loss from reserve pool\\n        (uint repaidGov, uint repaidStable) = reservePool.withdrawValue(\\n          stabilityPoolAddress,\\n          offsetValue - gainedCollValue\\n        );\\n\\n        // add repaid gov token to coll gained array\\n        if (repaidGov > 0) {\\n          if (govTokenCollIndex >= remainingStability.collGained.length) {\\n            // govTokenCollIndex not found in prev loop, add to end of array\\n            TokenAmount[] memory collGained = new TokenAmount[](remainingStability.collGained.length + 1);\\n            for (uint ii = 0; ii < remainingStability.collGained.length; ii++) {\\n              collGained[ii] = remainingStability.collGained[ii];\\n            }\\n            collGained[remainingStability.collGained.length] = TokenAmount({\\n              tokenAddress: address(govToken),\\n              amount: repaidGov\\n            });\\n            remainingStability.collGained = collGained;\\n          } else {\\n            remainingStability.collGained[govTokenCollIndex].amount += repaidGov;\\n          }\\n        }\\n        // add repaid stableCoin to coll gained array\\n        if (repaidStable > 0) {\\n          if (stableCollIndex >= remainingStability.collGained.length) {\\n            // stablecoinIndex not found in prev loop, add to end of array\\n            TokenAmount[] memory collGained = new TokenAmount[](remainingStability.collGained.length + 1);\\n            for (uint ii = 1; ii < remainingStability.collGained.length; ii++) {\\n              collGained[ii] = remainingStability.collGained[ii];\\n            }\\n            collGained[remainingStability.collGained.length] = TokenAmount({\\n              tokenAddress: address(stableDebt),\\n              amount: repaidStable\\n            });\\n            remainingStability.collGained = collGained;\\n          } else {\\n            remainingStability.collGained[stableCollIndex].amount += repaidStable;\\n          }\\n        }\\n      }\\n\\n      // update internal pool stake snapshots\\n      remainingStability.stabilityPool.offset(remainingStability.debtToOffset, remainingStability.collGained);\\n\\n      // Cancel the liquidated debt with the debt in the stability pool\\n      storagePoolCached.subtractValue(\\n        remainingStability.tokenAddress,\\n        false,\\n        PoolType.Active,\\n        remainingStability.debtToOffset\\n      );\\n    }\\n  }\\n\\n  function addStabilityPool(IDebtToken _debtToken) external override {\\n    if (msg.sender != debtTokenManagerAddress) revert Unauthorized();\\n    if (address(stabilityPools[_debtToken]) != address(0)) revert PoolExist();\\n\\n    IStabilityPool stabilityPool = new StabilityPool(address(this), address(_debtToken));\\n\\n    stabilityPools[_debtToken] = stabilityPool;\\n    stabilityPoolsArray.push(stabilityPool);\\n    emit StabilityPoolAdded(address(stabilityPool));\\n  }\\n\\n  function _getGainedCollValue(TokenAmount[] memory collGained) internal view returns (uint gainedValue) {\\n    for (uint i = 0; i < collGained.length; i++) {\\n      gainedValue += priceFeed.getUSDValue(collGained[i].tokenAddress, collGained[i].amount);\\n    }\\n  }\\n\\n  function _requireCallerIsLiquidationOps() internal view {\\n    if (msg.sender != liquidationOperationsAddress) revert NotFromLiquidationOps();\\n  }\\n\\n  function _requireCallerIsReservePool() internal view {\\n    if (msg.sender != address(reservePool)) revert NotFromReservePool();\\n  }\\n}\\n\",\"keccak256\":\"0x25833bde35138eb69ec27f2dc9b8cc13dcb3482e14385484f1898090ae2218fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001f55760003560e01c8063715018a61162000119578063a3f4df7e11620000af578063de97094b116200007a578063de97094b1462000483578063e6945c85146200049a578063e853753414620004b1578063f2fde38b14620004c557600080fd5b8063a3f4df7e14620003fe578063c7f3aee61462000441578063c9c503341462000458578063ddbeb714146200046f57600080fd5b80638da5cb5b11620000f05780638da5cb5b14620003aa5780638eaf786d14620003bc5780639e3c475314620003d35780639e41895814620003ea57600080fd5b8063715018a61462000366578063741bef1a1462000370578063857184d1146200038457600080fd5b806349c69562116200018f5780635dd68acd11620001665780635dd68acd146200030a578063615604a51462000321578063653975f714620003385780636ca94bcb146200034f57600080fd5b806349c6956214620002d25780634c57d35f14620002e95780634f2c6a3d14620002f357600080fd5b8063168a482211620001d0578063168a4822146200027d57806320ee3df814620002965780634374269214620002ad578063483f021914620002c657600080fd5b80630266f04414620001fa578063122540cb146200022b57806312fd57251462000257575b600080fd5b6003546200020e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200020e6200023c36600462002631565b6006602052600090815260409020546001600160a01b031681565b6200026e620002683660046200278e565b620004dc565b604051620002229190620027c6565b6200028762000820565b604051620002229190620028ff565b62000287620002a736600462002631565b62000a04565b620002b762000bef565b60405162000222919062002914565b620002d062000c53565b005b62000287620002e336600462002631565b62000d02565b6200028762000ee7565b620002d06200030436600462002963565b620010ca565b620002d06200031b366004620029bd565b6200113c565b620002876200033236600462002a39565b62001237565b620002d06200034936600462002b22565b6200148a565b6200020e6200036036600462002b5a565b6200164b565b620002d062001676565b6004546200020e906001600160a01b031681565b6200039b6200039536600462002631565b6200168e565b60405190815260200162000222565b6000546001600160a01b03166200020e565b6200039b620003cd36600462002b74565b62001726565b620002d0620003e436600462002bb2565b620017ca565b6005546200020e906001600160a01b031681565b620004326040518060400160405280601481526020017329ba30b134b634ba3ca837b7b626b0b730b3b2b960611b81525081565b60405162000222919062002cea565b6200020e6200045236600462002631565b620020c6565b6200039b6200046936600462002b74565b62002102565b6002546200020e906001600160a01b031681565b620002d06200049436600462002631565b6200215f565b620002d0620004ab36600462002b22565b620022ae565b6001546200020e906001600160a01b031681565b620002d0620004d636600462002631565b620023cd565b6007546060906000906001600160401b03811115620004ff57620004ff62002651565b6040519080825280602002602001820160405280156200057757816020015b620005636040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b8152602001906001900390816200051e5790505b50905060005b6007548110156200081957600084516001600160401b03811115620005a657620005a662002651565b604051908082528060200260200182016040528015620005ed57816020015b6040805180820190915260008082526020820152815260200190600190039081620005c55790505b50905060005b85518110156200066e5760405180604001604052808783815181106200061d576200061d62002d3a565b60200260200101516001600160a01b0316815260200160008152508282815181106200064d576200064d62002d3a565b60200260200101819052508080620006659062002d66565b915050620005f3565b506040518060a001604052806007848154811062000690576200069062002d3a565b600091825260209182902001546001600160a01b0316825260078054929091019185908110620006c457620006c462002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa15801562000713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000739919062002d82565b6001600160a01b03168152602001600784815481106200075d576200075d62002d3a565b6000918252602091829020015460408051633008885760e21b815290516001600160a01b039092169263c022215c926004808401938290030181865afa158015620007ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d2919062002da2565b81526020016000815260200182815250838381518110620007f757620007f762002d3a565b6020026020010181905250508080620008109062002d66565b9150506200057d565b5092915050565b6007546060906001600160401b0381111562000840576200084062002651565b6040519080825280602002602001820160405280156200088757816020015b60408051808201909152600080825260208201528152602001906001900390816200085f5790505b50905060005b60075481101562000a0057604051806040016040528060078381548110620008b957620008b962002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa15801562000908573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200092e919062002d82565b6001600160a01b031681526020016007838154811062000952576200095262002d3a565b6000918252602091829020015460408051633008885760e21b815290516001600160a01b039092169263c022215c926004808401938290030181865afa158015620009a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c7919062002da2565b815250828281518110620009df57620009df62002d3a565b60200260200101819052508080620009f79062002d66565b9150506200088d565b5090565b6007546060906001600160401b0381111562000a245762000a2462002651565b60405190808252806020026020018201604052801562000a6b57816020015b604080518082019091526000808252602082015281526020019060019003908162000a435790505b50905060005b60075481101562000be95760405180604001604052806007838154811062000a9d5762000a9d62002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa15801562000aec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b12919062002d82565b6001600160a01b031681526020016007838154811062000b365762000b3662002d3a565b600091825260209091200154604051639017cf7760e01b81526001600160a01b03878116600483015290911690639017cf7790602401602060405180830381865afa15801562000b8a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb0919062002da2565b81525082828151811062000bc85762000bc862002d3a565b6020026020010181905250808062000be09062002d66565b91505062000a71565b50919050565b6060600780548060200260200160405190810160405280929190818152602001828054801562000c4957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000c2a575b5050505050905090565b3360005b60075481101562000cfe5760006007828154811062000c7a5762000c7a62002d3a565b600091825260209091200154604051630ca8c14b60e41b81526001600160a01b0385811660048301529091169150819063ca8c14b090602401600060405180830381600087803b15801562000cce57600080fd5b505af115801562000ce3573d6000803e3d6000fd5b5050505050808062000cf59062002d66565b91505062000c57565b5050565b6007546060906001600160401b0381111562000d225762000d2262002651565b60405190808252806020026020018201604052801562000d6957816020015b604080518082019091526000808252602082015281526020019060019003908162000d415790505b50905060005b60075481101562000be95760405180604001604052806007838154811062000d9b5762000d9b62002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa15801562000dea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e10919062002d82565b6001600160a01b031681526020016007838154811062000e345762000e3462002d3a565b600091825260209091200154604051636af8caff60e11b81526001600160a01b0387811660048301529091169063d5f195fe90602401602060405180830381865afa15801562000e88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eae919062002da2565b81525082828151811062000ec65762000ec662002d3a565b6020026020010181905250808062000ede9062002d66565b91505062000d6f565b6007546060906001600160401b0381111562000f075762000f0762002651565b60405190808252806020026020018201604052801562000f4e57816020015b604080518082019091526000808252602082015281526020019060019003908162000f265790505b50905060005b60075481101562000a005760405180604001604052806007838154811062000f805762000f8062002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa15801562000fcf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff5919062002d82565b6001600160a01b031681526020016007838154811062001019576200101962002d3a565b600091825260209091200154604051636af8caff60e11b81523360048201526001600160a01b039091169063d5f195fe90602401602060405180830381865afa1580156200106b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001091919062002da2565b815250828281518110620010a957620010a962002d3a565b60200260200101819052508080620010c19062002d66565b91505062000f54565b604051632ee65eeb60e21b81526001600160a01b03858116600483015284811660248301526044820184905282169063bb997bac90606401600060405180830381600087803b1580156200111d57600080fd5b505af115801562001132573d6000803e3d6000fd5b5050505050505050565b6200114662002415565b620011518562002444565b6200115c8462002444565b620011678362002444565b620011728262002444565b6200117d8162002444565b600180546001600160a01b038781166001600160a01b0319928316811790935560048054888316908416811790915560028054888416908516811790915560038054888516908616811790915560058054948816949095168417909455604080519586526020860191909152840192909252606083015260808201527fc35f9b3e8582043c5e3bb10771fdda30a4c91eb4b119d82a4e09bc5bced418929060a00160405180910390a16200123062001676565b5050505050565b606081516001600160401b0381111562001255576200125562002651565b6040519080825280602002602001820160405280156200129c57816020015b6040805180820190915260008082526020820152815260200190600190039081620012745790505b50905060005b8251811015620008195760005b6007548110156200146e57604051806040016040528060078381548110620012db57620012db62002d3a565b600091825260209182902001546040805163fb1b5c7b60e01b815290516001600160a01b039092169263fb1b5c7b926004808401938290030181865afa1580156200132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001350919062002d82565b6001600160a01b031681526020016007838154811062001374576200137462002d3a565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316636c10d23a88888781518110620013b657620013b662002d3a565b60200260200101516040518363ffffffff1660e01b8152600401620013f19291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa1580156200140f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001435919062002da2565b8152508383815181106200144d576200144d62002d3a565b60200260200101819052508080620014659062002d66565b915050620012af565b50806200147b8162002d66565b915050620012a2565b92915050565b3360005b825181101562001646576000838281518110620014af57620014af62002d3a565b602090810291909101810151516001600160a01b03808216600090815260069093526040909220549092501680620014fa5760405163357113b160e11b815260040160405180910390fd5b816001600160a01b031663bb997bac858388878151811062001520576200152062002d3a565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200157e57600080fd5b505af115801562001593573d6000803e3d6000fd5b50505050806001600160a01b0316633a24dea585878681518110620015bc57620015bc62002d3a565b6020026020010151602001516040518363ffffffff1660e01b8152600401620015fa9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b1580156200161557600080fd5b505af11580156200162a573d6000803e3d6000fd5b50505050505080806200163d9062002d66565b9150506200148e565b505050565b600781815481106200165c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6200168062002415565b6200168c600062002491565b565b6001600160a01b0380821660009081526006602052604081205490911680620016ba5750600092915050565b806001600160a01b031663c022215c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200171f919062002da2565b9392505050565b6001600160a01b03808216600090815260066020526040812054909116806200175457600091505062001484565b604051636af8caff60e11b81526001600160a01b03858116600483015282169063d5f195fe906024015b602060405180830381865afa1580156200179c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017c2919062002da2565b949350505050565b620017d4620024e1565b6002546001600160a01b031660005b82518110156200164657600083828151811062001804576200180462002d3a565b6020026020010151905060008160000151905081606001516000036200182c575050620020b1565b81600001516001600160a01b031663fb1b5c7b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200186f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001895919062002d82565b6060830151604051632770a7eb60e21b81526001600160a01b0384811660048301526024820192909252911690639dc29fac90604401600060405180830381600087803b158015620018e657600080fd5b505af1158015620018fb573d6000803e3d6000fd5b505050506000600360009054906101000a90046001600160a01b03166001600160a01b03166361c773cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200197b919062002d82565b90506000600360009054906101000a90046001600160a01b03166001600160a01b03166305268cff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019f9919062002d82565b6080850151519091508060005b86608001515181101562001b9057846001600160a01b03168760800151828151811062001a375762001a3762002d3a565b6020026020010151600001516001600160a01b03160362001a56578092505b836001600160a01b03168760800151828151811062001a795762001a7962002d3a565b6020026020010151600001516001600160a01b03160362001a98578091505b8660800151818151811062001ab15762001ab162002d3a565b6020026020010151602001516000031562001b7b57886001600160a01b031663b403b997878960800151848151811062001aef5762001aef62002d3a565b602002602001015160000151600160008c60800151878151811062001b185762001b1862002d3a565b6020026020010151602001516040518663ffffffff1660e01b815260040162001b4695949392919062002ddf565b600060405180830381600087803b15801562001b6157600080fd5b505af115801562001b76573d6000803e3d6000fd5b505050505b8062001b878162002d66565b91505062001a06565b50600062001ba287608001516200250d565b6004805460208a015160608b0151604051637d3b6e7960e11b81526001600160a01b03928316948101949094526024840152929350600092169063fa76dcf290604401602060405180830381865afa15801562001c03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c29919062002da2565b90508181111562001fca5760035460009081906001600160a01b031663b7068dca8a62001c57878762002e1e565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160408051808303816000875af115801562001ca2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cc8919062002e34565b9092509050811562001e4a57896080015151851062001e125760008a6080015151600162001cf7919062002e59565b6001600160401b0381111562001d115762001d1162002651565b60405190808252806020026020018201604052801562001d5857816020015b604080518082019091526000808252602082015281526020019060019003908162001d305790505b50905060005b8b608001515181101562001dc3578b60800151818151811062001d855762001d8562002d3a565b602002602001015182828151811062001da25762001da262002d3a565b6020026020010181905250808062001dba9062002d66565b91505062001d5e565b506040518060400160405280896001600160a01b0316815260200184815250818c60800151518151811062001dfc5762001dfc62002d3a565b602090810291909101015260808b015262001e4a565b818a60800151868151811062001e2c5762001e2c62002d3a565b602002602001015160200181815162001e46919062002e59565b9052505b801562001fc757896080015151861062001f8f5760008a6080015151600162001e74919062002e59565b6001600160401b0381111562001e8e5762001e8e62002651565b60405190808252806020026020018201604052801562001ed557816020015b604080518082019091526000808252602082015281526020019060019003908162001ead5790505b50905060015b8b608001515181101562001f40578b60800151818151811062001f025762001f0262002d3a565b602002602001015182828151811062001f1f5762001f1f62002d3a565b6020026020010181905250808062001f379062002d66565b91505062001edb565b5060405180604001604052808a6001600160a01b0316815260200183815250818c60800151518151811062001f795762001f7962002d3a565b602090810291909101015260808b015262001fc7565b808a60800151878151811062001fa95762001fa962002d3a565b602002602001015160200181815162001fc3919062002e59565b9052505b50505b8751606089015160808a0151604051631f0dbe1960e11b81526001600160a01b0390931692633e1b7c32926200200592909160040162002e6f565b600060405180830381600087803b1580156200202057600080fd5b505af115801562002035573d6000803e3d6000fd5b50505050602088015160608901516040516304b86aad60e21b81526001600160a01b038d16926312e1aab4926200207492600091829160040162002e8a565b600060405180830381600087803b1580156200208f57600080fd5b505af1158015620020a4573d6000803e3d6000fd5b5050505050505050505050505b80620020bd8162002d66565b915050620017e3565b6001600160a01b0380821660009081526006602052604081205490911680620014845760405163357113b160e11b815260040160405180910390fd5b6001600160a01b03808216600090815260066020526040812054909116806200213057600091505062001484565b604051639017cf7760e01b81526001600160a01b038581166004830152821690639017cf77906024016200177e565b6005546001600160a01b031633146200218a576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038181166000908152600660205260409020541615620021c4576040516318971cbf60e11b815260040160405180910390fd5b60003082604051620021d6906200260d565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200220a573d6000803e3d6000fd5b506001600160a01b03838116600090815260066020908152604080832080549486166001600160a01b031995861681179091556007805460018101825594527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889093018054909416831790935591519081529192507fd8fe0199857a68d6ba583570541120b3da8637aac4e2dffc4af328444216eb25910160405180910390a15050565b3360005b825181101562001646576000838281518110620022d357620022d362002d3a565b602090810291909101810151516001600160a01b038082166000908152600690935260409092205490925016806200231e5760405163357113b160e11b815260040160405180910390fd5b806001600160a01b031663a158e3d18587868151811062002343576200234362002d3a565b6020026020010151602001516040518363ffffffff1660e01b8152600401620023819291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b1580156200239c57600080fd5b505af1158015620023b1573d6000803e3d6000fd5b5050505050508080620023c49062002d66565b915050620022b2565b620023d762002415565b6001600160a01b0381166200240757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620024128162002491565b50565b6000546001600160a01b031633146200168c5760405163118cdaa760e01b8152336004820152602401620023fe565b6001600160a01b0381166200246c5760405163d92e233d60e01b815260040160405180910390fd5b803b600081900362000cfe57604051636f7c43f160e01b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546001600160a01b031633146200168c5760405163328a332b60e11b815260040160405180910390fd5b6000805b825181101562000be95760045483516001600160a01b039091169063fa76dcf29085908490811062002547576200254762002d3a565b60200260200101516000015185848151811062002568576200256862002d3a565b6020026020010151602001516040518363ffffffff1660e01b8152600401620025a69291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015620025c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025ea919062002da2565b620025f6908362002e59565b915080620026048162002d66565b91505062002511565b611e0a8062002ec183390190565b6001600160a01b03811681146200241257600080fd5b6000602082840312156200264457600080fd5b81356200171f816200261b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200268c576200268c62002651565b60405290565b60405160a081016001600160401b03811182821017156200268c576200268c62002651565b604051601f8201601f191681016001600160401b0381118282101715620026e257620026e262002651565b604052919050565b60006001600160401b0382111562002706576200270662002651565b5060051b60200190565b600082601f8301126200272257600080fd5b813560206200273b6200273583620026ea565b620026b7565b82815260059290921b840181019181810190868411156200275b57600080fd5b8286015b848110156200278357803562002775816200261b565b83529183019183016200275f565b509695505050505050565b600060208284031215620027a157600080fd5b81356001600160401b03811115620027b857600080fd5b620017c28482850162002710565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156200289c57898403603f19018652825180516001600160a01b03908116865289820151168986015287810151888601526060808201519086015260809081015160a0918601829052805191860182905289019060c086019084905b808210156200288657835180516001600160a01b03168452602090810151908401526040830192508b840193506001820191506200284d565b50509689019694505091870191600101620027ee565b50919998505050505050505050565b600081518084526020808501945080840160005b83811015620028f457815180516001600160a01b031688526020908101519088015260408701965090820190600101620028bf565b509495945050505050565b6020815260006200171f6020830184620028ab565b6020808252825182820181905260009190848201906040850190845b81811015620029575783516001600160a01b03168352928401929184019160010162002930565b50909695505050505050565b600080600080608085870312156200297a57600080fd5b843562002987816200261b565b9350602085013562002999816200261b565b9250604085013591506060850135620029b2816200261b565b939692955090935050565b600080600080600060a08688031215620029d657600080fd5b8535620029e3816200261b565b94506020860135620029f5816200261b565b9350604086013562002a07816200261b565b9250606086013562002a19816200261b565b9150608086013562002a2b816200261b565b809150509295509295909350565b6000806040838503121562002a4d57600080fd5b823562002a5a816200261b565b915060208301356001600160401b0381111562002a7657600080fd5b62002a848582860162002710565b9150509250929050565b600082601f83011262002aa057600080fd5b8135602062002ab36200273583620026ea565b82815260069290921b8401810191818101908684111562002ad357600080fd5b8286015b8481101562002783576040818903121562002af25760008081fd5b62002afc62002667565b813562002b09816200261b565b8152818501358582015283529183019160400162002ad7565b60006020828403121562002b3557600080fd5b81356001600160401b0381111562002b4c57600080fd5b620017c28482850162002a8e565b60006020828403121562002b6d57600080fd5b5035919050565b6000806040838503121562002b8857600080fd5b823562002b95816200261b565b9150602083013562002ba7816200261b565b809150509250929050565b6000602080838503121562002bc657600080fd5b82356001600160401b038082111562002bde57600080fd5b818501915085601f83011262002bf357600080fd5b813562002c046200273582620026ea565b81815260059190911b8301840190848101908883111562002c2457600080fd5b8585015b8381101562002cdd5780358581111562002c425760008081fd5b860160a0818c03601f190181131562002c5b5760008081fd5b62002c6562002692565b8983013562002c74816200261b565b815260408381013562002c87816200261b565b808c8401525060608085013582840152608091508185013581840152508284013592508883111562002cb95760008081fd5b62002cc98e8c8587010162002a8e565b908201528552505091860191860162002c28565b5098975050505050505050565b600060208083528351808285015260005b8181101562002d195785810183015185820160400152820162002cfb565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162002d7b5762002d7b62002d50565b5060010190565b60006020828403121562002d9557600080fd5b81516200171f816200261b565b60006020828403121562002db557600080fd5b5051919050565b6003811062002ddb57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03868116825285166020820152831515604082015260a0810162002e0e606083018562002dbc565b8260808301529695505050505050565b8181038181111562001484576200148462002d50565b6000806040838503121562002e4857600080fd5b505080516020909101519092909150565b8082018082111562001484576200148462002d50565b828152604060208201526000620017c26040830184620028ab565b6001600160a01b038516815283151560208201526080810162002eb1604083018562002dbc565b8260608301529594505050505056fe6080604052670de0b6b3a76400006005553480156200001d57600080fd5b5060405162001e0a38038062001e0a833981016040819052620000409162000136565b6200004b82620000c8565b6200005681620000c8565b600080546001600160a01b038481166001600160a01b03199283168117909355600180549185169190921681179091556040805192835260208301919091527ff35bd6416beb900f6b41234f27d3e606b30cc84d1c13bed983f659aa93d211c7910160405180910390a150506200016e565b6001600160a01b038116620000f05760405163d92e233d60e01b815260040160405180910390fd5b803b60008190036200011557604051636f7c43f160e01b815260040160405180910390fd5b5050565b80516001600160a01b03811681146200013157600080fd5b919050565b600080604083850312156200014a57600080fd5b620001558362000119565b9150620001656020840162000119565b90509250929050565b611c8c806200017e6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638d63c66511610130578063c350589e116100b8578063e67729e31161007c578063e67729e31461058c578063ec671c8314610596578063f92d343314610280578063fb1b5c7b146105a0578063fc7e286d146105b157600080fd5b8063c350589e14610535578063c89039c514610548578063ca8c14b01461055b578063ce4b5bbe1461056e578063d5f195fe1461057957600080fd5b8063a0c2fd9a116100ff578063a0c2fd9a146104b9578063a158e3d1146104ce578063a3f4df7e146104e1578063a4e59ac81461051a578063c022215c1461052d57600080fd5b80638d63c6651461044d5780638e2f0dcf1461045d5780639017cf771461047057806391fc74b11461049957600080fd5b80635a2fd610116101b3578063794e572411610182578063794e5724146103905780637d8820971461039f57806386da0824146103a85780638b8fbd921461040b5780638caf17611461041457600080fd5b80635a2fd6101461030b5780636c10d23a1461033c57806372fe25aa1461034f578063766718081461035e57600080fd5b80633aabe9e6116101fa5780633aabe9e6146102a35780633e1b7c32146102c35780634870dd9a146102d6578063502afb04146102de5780635733d58f146102fc57600080fd5b806309230ad31461022c578063240926691461026457806328d28b5b146102805780633a24dea51461028e575b600080fd5b61024773f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61027266b1a2bc2ec5000081565b60405190815260200161025b565b6102726611c37937e0800081565b6102a161029c366004611801565b6105d1565b005b6102726102b136600461182b565b600a6020526000908152604090205481565b6102a16102d13660046118b6565b610672565b61027260c881565b6102e7610bb881565b60405163ffffffff909116815260200161025b565b6102726714d1120d7b16000081565b6102726103193660046119ac565b600960209081526000938452604080852082529284528284209052825290205481565b61027261034a3660046119ef565b6107fb565b610272670de0b6b3a764000081565b60065461037890600160801b90046001600160801b031681565b6040516001600160801b03909116815260200161025b565b610272670f43fc2c04ee000081565b61027260025481565b6103e66103b636600461182b565b600360205260009081526040902060018101546002909101546001600160801b0380821691600160801b90041683565b604080519384526001600160801b03928316602085015291169082015260600161025b565b61027260055481565b6102726104223660046119ef565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b610272680ad78ebc5ac620000081565b600054610247906001600160a01b031681565b61027261047e36600461182b565b6001600160a01b031660009081526004602052604090205490565b6102726104a736600461182b565b60086020526000908152604090205481565b6104c1610853565b60405161025b9190611a71565b6102a16104dc366004611801565b6109a1565b61050d6040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b60405161025b9190611a84565b600654610378906001600160801b031681565b600254610272565b610247610543366004611ad2565b610ac0565b600154610247906001600160a01b031681565b6102a161056936600461182b565b610aea565b610272633b9aca0081565b61027261058736600461182b565b610b17565b6102e7620f424081565b6102e76207a12081565b6001546001600160a01b0316610247565b6102726105bf36600461182b565b60046020526000908152604090205481565b6105d9610b6c565b6105e281610b99565b60006105ed83610b17565b90506105f98382610bbd565b816002600082825461060b9190611b01565b909155506000905061061d8383611b01565b90506106298482610dc1565b604080516001600160a01b0386168152602081018590527f84142a6b70b5ba56f1592a7ccb1a34062ed6d36192411e4b1c8a483fbc514be091015b60405180910390a150505050565b61067a610b6c565b600254600081900361068b57505050565b60005b82518110156107865760008382815181106106ab576106ab611b14565b602002602001015190506000805b6007548110156107195782600001516001600160a01b0316600782815481106106e4576106e4611b14565b6000918252602090912001546001600160a01b0316036107075760019150610719565b8061071181611b2a565b9150506106b9565b5080610771578151600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b039092169190911790555b5050808061077e90611b2a565b91505061068e565b50600080610795848685610f99565b915091506107a3828261125f565b84600260008282546107b59190611b43565b90915550506040517f83800eb4589b3539c4f3695bc7e627585de3a9e2e97faecaf7aa20777f0a5b75906107ec9087908790611b56565b60405180910390a15050505050565b6001600160a01b03821660009081526004602052604081205480820361082557600091505061084d565b6001600160a01b03841660009081526003602052604090206108488285836115d0565b925050505b92915050565b60075460609067ffffffffffffffff81111561087157610871611846565b6040519080825280602002602001820160405280156108b657816020015b604080518082019091526000808252602082015281526020019060019003908161088f5790505b50905060005b60075481101561099d57600781815481106108d9576108d9611b14565b9060005260206000200160009054906101000a90046001600160a01b031682828151811061090957610909611b14565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050600860006007838154811061094457610944611b14565b60009182526020808320909101546001600160a01b03168352820192909252604001902054825183908390811061097d5761097d611b14565b60209081029190910181015101528061099581611b2a565b9150506108bc565b5090565b6109a9610b6c565b60006109b483610b17565b90506109c082826116e1565b9150816000036109cf57505050565b6109d98382610bbd565b60015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190611b77565b508160026000828254610a639190611b43565b9091555060009050610a758383611b43565b9050610a818482610dc1565b604080516001600160a01b0386168152602081018590527f12adef626000e26b56a0bf0cf8cc0b688b73acced3fd6b6e6012280cf9369d4f9101610664565b60078181548110610ad057600080fd5b6000918252602090912001546001600160a01b0316905081565b610af2610b6c565b6000610afd82610b17565b9050610b098282610bbd565b610b138282610dc1565b5050565b6001600160a01b038116600090815260046020526040812054808203610b405750600092915050565b6001600160a01b038316600090815260036020526040812090610b6383836116f9565b95945050505050565b6000546001600160a01b03163314610b97576040516355dcd6cd60e11b815260040160405180910390fd5b565b80600003610bba57604051631f2a200560e01b815260040160405180910390fd5b50565b60075460009067ffffffffffffffff811115610bdb57610bdb611846565b604051908082528060200260200182016040528015610c2057816020015b6040805180820190915260008082526020820152815260200190600190039081610bf95790505b50905060005b600754811015610d6757600060078281548110610c4557610c45611b14565b60009182526020822001546001600160a01b03169150610c6586836107fb565b905080600003610c76575050610d55565b6001600160a01b03821660009081526008602052604081208054839290610c9e908490611b43565b909155505060405163a9059cbb60e01b81526001600160a01b0387811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190611b77565b506040518060400160405280836001600160a01b0316815260200182815250848481518110610d4757610d47611b14565b602002602001018190525050505b80610d5f81611b2a565b915050610c26565b506001600160a01b03831660009081526004602052604081205490610d8c8483611b43565b90507f12eab0f8dab7f1dc1d0ee89d82396ed4c5aa51040c604a988f06def357afc14d8582856040516107ec93929190611b99565b6001600160a01b0382166000908152600460205260408120829055819003610e32576001600160a01b03821660008181526003602052604080822060018101839055600201829055517f0a64b8d9b04e735945eca0d69c16d1634fb27a2ef4e8256e1c323bfc540584f39190a25050565b600680546001600160a01b03841660009081526003602052604081206002810180546001600160801b0319166001600160801b0394851690811782559454600160801b9081900490941693840285179055600554600191909101819055905b600754811015610f5d576001600160801b03808416600090815260096020908152604080832093881683529290529081206007805491929184908110610ed957610ed9611b14565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822054938a168252600390529081206007805491929185908110610f2657610f26611b14565b60009182526020808320909101546001600160a01b0316835282019290925260400190205580610f5581611b2a565b915050610e91565b506040516001600160a01b038616907f0a64b8d9b04e735945eca0d69c16d1634fb27a2ef4e8256e1c323bfc540584f390600090a25050505050565b6060600082841115610fad57610fad611bc0565b845167ffffffffffffffff811115610fc757610fc7611846565b60405190808252806020026020018201604052801561100c57816020015b6040805180820190915260008082526020820152815260200190600190039081610fe55790505b50915060005b85518110156111a357600086828151811061102f5761102f611b14565b60200260200101516000015190508084838151811061105057611050611b14565b6020908102919091018101516001600160a01b0392831690529082166000908152600a90915260408120548851670de0b6b3a7640000908a908690811061109957611099611b14565b6020026020010151602001516110af9190611bd6565b6110b99190611b01565b90506110c58682611bed565b8584815181106110d7576110d7611b14565b60200260200101516020018181525050858584815181106110fa576110fa611b14565b6020026020010151602001516111109190611bd6565b61111a9082611b43565b6001600160a01b0383166000908152600a6020526040902055875188908490811061114757611147611b14565b60200260200101516020015160086000846001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111879190611b01565b925050819055505050808061119b90611b2a565b915050611012565b508284036111d557506001546001600160a01b03166000908152600a6020526040812055670de0b6b3a7640000611257565b6001546001600160a01b03166000908152600a6020526040812054611202670de0b6b3a764000087611bd6565b61120c9190611b43565b90506112188482611bed565b611223906001611b01565b9150806112308584611bd6565b61123a9190611b43565b6001546001600160a01b03166000908152600a6020526040902055505b935093915050565b670de0b6b3a764000081111561127757611277611bc0565b6005546006546000906001600160801b0380821691600160801b900416825b86518110156113d45760008782815181106112b3576112b3611b14565b602090810291909101810151516001600160801b03808616600090815260098452604080822092891682529184528181206001600160a01b03841682529093528220548a51919350919088908b908690811061131157611311611b14565b6020026020010151602001516113279190611bd6565b905060006113358284611b01565b6001600160801b038781166000818152600960209081526040808320948d168084529482528083206001600160a01b038b1680855290835292819020869055805192835290820185905281019190915260608101919091529091507fe799d8213ffd47c58af0bad222f3f83a7bacf689130d897017d6c2cb9346e8cb9060800160405180910390a15050505080806113cc90611b2a565b915050611296565b5060006113e986670de0b6b3a7640000611b43565b9050806000036114a7576113fe826001611c0f565b600680546001600160801b03908116600160801b93821684021791829055604051929091041681527fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d9060200160405180910390a1600680546001600160801b0319169055604051600081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a1670de0b6b3a7640000935061157f565b633b9aca00670de0b6b3a76400006114bf8388611bd6565b6114c99190611bed565b101561155f57670de0b6b3a7640000633b9aca006114e78388611bd6565b6114f19190611bd6565b6114fb9190611bed565b9350611508836001611c0f565b600680546001600160801b0319166001600160801b039290921691821790556040519081527f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe9060200160405180910390a161157f565b670de0b6b3a76400006115728287611bd6565b61157c9190611bed565b93505b6000841161158f5761158f611bc0565b60058490556040518481527fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9060200160405180910390a150505050505050565b60028101546001600160a01b038316600081815260208481526040808320546001600160801b03600160801b8704811680865260098552838620919097168086529084528285209585529490925282205491939291849161163091611b43565b6001600160801b038416600090815260096020526040812091925090633b9aca00908261165e866001611c0f565b6001600160801b03168152602080820192909252604090810160009081206001600160a01b038c1682529092529020546116989190611bed565b90506000670de0b6b3a7640000876001015483856116b69190611b01565b6116c0908c611bd6565b6116ca9190611bed565b6116d49190611bed565b9998505050505050505050565b60008183106116f057816116f2565b825b9392505050565b60065460028201546000916001600160801b03600160801b91829004811691909204909116101561172c5750600061084d565b6002820154600654600091829161174f916001600160801b039081169116611c36565b9050806001600160801b03166000036117855760018401546005546117749087611bd6565b61177e9190611bed565b91506117bd565b806001600160801b03166001036117b857633b9aca008460010154600554876117ae9190611bd6565b6117749190611bed565b600091505b6117cb633b9aca0086611bed565b8210156117dd5760009250505061084d565b509392505050565b80356001600160a01b03811681146117fc57600080fd5b919050565b6000806040838503121561181457600080fd5b61181d836117e5565b946020939093013593505050565b60006020828403121561183d57600080fd5b6116f2826117e5565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561187f5761187f611846565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118ae576118ae611846565b604052919050565b60008060408084860312156118ca57600080fd5b8335925060208085013567ffffffffffffffff808211156118ea57600080fd5b818701915087601f8301126118fe57600080fd5b81358181111561191057611910611846565b61191e848260051b01611885565b818152848101925060069190911b83018401908982111561193e57600080fd5b928401925b818410156119855785848b03121561195b5760008081fd5b61196361185c565b61196c856117e5565b8152848601358682015283529285019291840191611943565b8096505050505050509250929050565b80356001600160801b03811681146117fc57600080fd5b6000806000606084860312156119c157600080fd5b6119ca84611995565b92506119d860208501611995565b91506119e6604085016117e5565b90509250925092565b60008060408385031215611a0257600080fd5b611a0b836117e5565b9150611a19602084016117e5565b90509250929050565b600081518084526020808501945080840160005b83811015611a6657815180516001600160a01b031688528301518388015260409096019590820190600101611a36565b509495945050505050565b6020815260006116f26020830184611a22565b600060208083528351808285015260005b81811015611ab157858101830151858201604001528201611a95565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611ae457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561084d5761084d611aeb565b634e487b7160e01b600052603260045260246000fd5b600060018201611b3c57611b3c611aeb565b5060010190565b8181038181111561084d5761084d611aeb565b828152604060208201526000611b6f6040830184611a22565b949350505050565b600060208284031215611b8957600080fd5b815180151581146116f257600080fd5b60018060a01b0384168152826020820152606060408201526000610b636060830184611a22565b634e487b7160e01b600052600160045260246000fd5b808202811582820484141761084d5761084d611aeb565b600082611c0a57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160801b03818116838216019080821115611c2f57611c2f611aeb565b5092915050565b6001600160801b03828116828216039080821115611c2f57611c2f611aeb56fea26469706673582212207e2c77cc868327730d83c5e7a475d0a4770ccc0471f6b7e6fb2ef08f646a163c64736f6c63430008140033a2646970667358221220b14b48c50a0e182edcd11f341a500f107a81288d303c0a42ccd491878c8ba02c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18245,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "liquidationOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18248,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "storagePool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStoragePool)11041"
      },
      {
        "astId": 18251,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "reservePool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IReservePool)10476"
      },
      {
        "astId": 18254,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 18256,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "debtTokenManagerAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 18262,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "stabilityPools",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IDebtToken)10082,t_contract(IStabilityPool)10761)"
      },
      {
        "astId": 18266,
        "contract": "contracts/Mock/MockStabilityPoolManager.sol:MockStabilityPoolManager",
        "label": "stabilityPoolsArray",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_contract(IStabilityPool)10761)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IStabilityPool)10761)dyn_storage": {
        "base": "t_contract(IStabilityPool)10761",
        "encoding": "dynamic_array",
        "label": "contract IStabilityPool[]",
        "numberOfBytes": "32"
      },
      "t_contract(IDebtToken)10082": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IReservePool)10476": {
        "encoding": "inplace",
        "label": "contract IReservePool",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityPool)10761": {
        "encoding": "inplace",
        "label": "contract IStabilityPool",
        "numberOfBytes": "20"
      },
      "t_contract(IStoragePool)11041": {
        "encoding": "inplace",
        "label": "contract IStoragePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IDebtToken)10082,t_contract(IStabilityPool)10761)": {
        "encoding": "mapping",
        "key": "t_contract(IDebtToken)10082",
        "label": "mapping(contract IDebtToken => contract IStabilityPool)",
        "numberOfBytes": "32",
        "value": "t_contract(IStabilityPool)10761"
      }
    }
  }
}