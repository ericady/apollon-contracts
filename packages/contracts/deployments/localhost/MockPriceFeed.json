{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastGoodPrice",
          "type": "uint256"
        }
      ],
      "name": "LastGoodPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IPriceFeed.Status",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "PriceFeedStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "TokenPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdValue",
          "type": "uint256"
        }
      ],
      "name": "getAmountFromUSDValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getUSDValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd482e8147b1b8054ebfc2ba41ce4847ae72fc8b8174e40dd98b8d889afa16f61",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "313505",
    "logsBloom": "0x
    "blockHash": "0x65344be1d720b870bb45a51e6617d14ecf73c22f82ffa2a88fff70c97bfbf647",
    "transactionHash": "0xd482e8147b1b8054ebfc2ba41ce4847ae72fc8b8174e40dd98b8d889afa16f61",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "313505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a1ba766827c404575f799519d1eb71c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastGoodPrice\",\"type\":\"uint256\"}],\"name\":\"LastGoodPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IPriceFeed.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"PriceFeedStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdValue\",\"type\":\"uint256\"}],\"name\":\"getAmountFromUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mock/MockPriceFeed.sol\":\"MockPriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x85f943dcc809f64cc30144f14495c5cdb556371a835f0d6022c7409a7d867fef\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Mock/MockPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '../Interfaces/IPriceFeed.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\n/*\\n * PriceFeed placeholder for testnet and development. The price is simply set manually and saved in a state\\n * variable. The contract does not connect to a live Chainlink price feed.\\n */\\ncontract MockPriceFeed is IPriceFeed {\\n  mapping(address => uint256) private tokenPrices;\\n  uint256 private _price = 1e18; // 1$\\n\\n  // --- Functions ---\\n\\n  // View price getter for simplicity in tests\\n  function getPrice(address _tokenAddress) external view override returns (uint price) {\\n    // todo include priceCache into tests\\n    //    // first try to get the price from the cache\\n    //    for (uint i = 0; i < _priceCache.prices.length; i++) {\\n    //      if (_priceCache.prices[i].tokenAddress != _tokenAddress) continue;\\n    //\\n    //      price = _priceCache.prices[i].amount;\\n    //      if (price != 0) return price;\\n    //    }\\n\\n    uint256 tokenPrice = tokenPrices[_tokenAddress];\\n    if (tokenPrice != 0) return tokenPrice;\\n\\n    return _price;\\n  }\\n\\n  function setTokenPrice(address tokenAddress, uint256 price) external returns (bool) {\\n    tokenPrices[tokenAddress] = price;\\n    return true;\\n  }\\n\\n  function getUSDValue(address _token, uint256 _amount) external view returns (uint usdValue) {\\n    uint price = tokenPrices[_token];\\n    uint8 decimals = IERC20Metadata(_token).decimals();\\n    usdValue = (price * _amount) / 10 ** decimals;\\n  }\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount) {\\n    uint price = tokenPrices[_token];\\n    uint8 decimals = IERC20Metadata(_token).decimals();\\n    amount = (_usdValue * 10 ** decimals) / price;\\n  }\\n}\\n\",\"keccak256\":\"0x98be96e34553547c3d126f582e7e64722facab00a993e5036a958c509d42b60f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060015534801561001c57600080fd5b5061044e8061002c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806341976e0914610051578063431f63c914610077578063a05626441461009a578063fa76dcf2146100ad575b600080fd5b61006461005f366004610267565b6100c0565b6040519081526020015b60405180910390f35b61008a610085366004610289565b6100ef565b604051901515815260200161006e565b6100646100a8366004610289565b610113565b6100646100bb366004610289565b6101b9565b6001600160a01b03811660009081526020819052604081205480156100e55792915050565b5050600154919050565b6001600160a01b038216600090815260208190526040902081905560015b92915050565b6001600160a01b03821660008181526020818152604080832054815163313ce56760e01b81529151939490938593919263313ce5679260048083019391928290030181865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e91906102b3565b90508161019c82600a6103d0565b6101a690866103df565b6101b091906103f6565b95945050505050565b6001600160a01b03821660008181526020818152604080832054815163313ce56760e01b81529151939490938593919263313ce5679260048083019391928290030181865afa158015610210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023491906102b3565b905061024181600a6103d0565b6101a685846103df565b80356001600160a01b038116811461026257600080fd5b919050565b60006020828403121561027957600080fd5b6102828261024b565b9392505050565b6000806040838503121561029c57600080fd5b6102a58361024b565b946020939093013593505050565b6000602082840312156102c557600080fd5b815160ff8116811461028257600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561032757816000190482111561030d5761030d6102d6565b8085161561031a57918102915b93841c93908002906102f1565b509250929050565b60008261033e5750600161010d565b8161034b5750600061010d565b8160018114610361576002811461036b57610387565b600191505061010d565b60ff84111561037c5761037c6102d6565b50506001821b61010d565b5060208310610133831016604e8410600b84101617156103aa575081810a61010d565b6103b483836102ec565b80600019048211156103c8576103c86102d6565b029392505050565b600061028260ff84168361032f565b808202811582820484141761010d5761010d6102d6565b60008261041357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212207cdd9eb0d13cce0915d4201ced4e643193c72977461149c0039da6fd2ef0f74e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806341976e0914610051578063431f63c914610077578063a05626441461009a578063fa76dcf2146100ad575b600080fd5b61006461005f366004610267565b6100c0565b6040519081526020015b60405180910390f35b61008a610085366004610289565b6100ef565b604051901515815260200161006e565b6100646100a8366004610289565b610113565b6100646100bb366004610289565b6101b9565b6001600160a01b03811660009081526020819052604081205480156100e55792915050565b5050600154919050565b6001600160a01b038216600090815260208190526040902081905560015b92915050565b6001600160a01b03821660008181526020818152604080832054815163313ce56760e01b81529151939490938593919263313ce5679260048083019391928290030181865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e91906102b3565b90508161019c82600a6103d0565b6101a690866103df565b6101b091906103f6565b95945050505050565b6001600160a01b03821660008181526020818152604080832054815163313ce56760e01b81529151939490938593919263313ce5679260048083019391928290030181865afa158015610210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023491906102b3565b905061024181600a6103d0565b6101a685846103df565b80356001600160a01b038116811461026257600080fd5b919050565b60006020828403121561027957600080fd5b6102828261024b565b9392505050565b6000806040838503121561029c57600080fd5b6102a58361024b565b946020939093013593505050565b6000602082840312156102c557600080fd5b815160ff8116811461028257600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561032757816000190482111561030d5761030d6102d6565b8085161561031a57918102915b93841c93908002906102f1565b509250929050565b60008261033e5750600161010d565b8161034b5750600061010d565b8160018114610361576002811461036b57610387565b600191505061010d565b60ff84111561037c5761037c6102d6565b50506001821b61010d565b5060208310610133831016604e8410600b84101617156103aa575081810a61010d565b6103b483836102ec565b80600019048211156103c8576103c86102d6565b029392505050565b600061028260ff84168361032f565b808202811582820484141761010d5761010d6102d6565b60008261041357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212207cdd9eb0d13cce0915d4201ced4e643193c72977461149c0039da6fd2ef0f74e64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11117,
        "contract": "contracts/Mock/MockPriceFeed.sol:MockPriceFeed",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11120,
        "contract": "contracts/Mock/MockPriceFeed.sol:MockPriceFeed",
        "label": "_price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}