{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "name": "FeeExceedMaxPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFromBOorTroveMorSP",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolEntryDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_redemptionOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "StoragePoolInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_updatedAmount",
          "type": "uint256"
        }
      ],
      "name": "StoragePoolValueUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_STAKING_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_COIN_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_100pct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInRecoveryMode",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "TCR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "debtTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        }
      ],
      "name": "getTokenTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        }
      ],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_troveManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redemptionOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "subtractValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_fromType",
          "type": "uint8"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_toType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferBetweenTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "troveManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isColl",
          "type": "bool"
        },
        {
          "internalType": "enum IBase.PoolType",
          "name": "_poolType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc0256aac57b0882ad0a87cb1181c03d0dabe793b13b06128592ded59438d469",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1194615",
    "logsBloom": "0x
    "blockHash": "0x514a988ad7a17a490ccc06bac35be91cedf0ce9efc6c3885df78a2e1090ee368",
    "transactionHash": "0xfc0256aac57b0882ad0a87cb1181c03d0dabe793b13b06128592ded59438d469",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xfc0256aac57b0882ad0a87cb1181c03d0dabe793b13b06128592ded59438d469",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x514a988ad7a17a490ccc06bac35be91cedf0ce9efc6c3885df78a2e1090ee368"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "1194615",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cd4b693370de6782d041c6552000a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FeeExceedMaxPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromBOorTroveMorSP\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolEntryDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_redemptionOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"StoragePoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updatedAmount\",\"type\":\"uint256\"}],\"name\":\"StoragePoolValueUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_STAKING_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_COIN_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInRecoveryMode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TCR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"}],\"name\":\"getTokenTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redemptionOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_fromType\",\"type\":\"uint8\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_toType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferBetweenTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isColl\",\"type\":\"bool\"},{\"internalType\":\"enum IBase.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StoragePool.sol\":\"StoragePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract CheckContract {\\n  using Address for address;\\n\\n  error ZeroAddress();\\n  error NotContract();\\n\\n  /**\\n   * Check that the account is an already deployed non-destroyed contract.\\n   * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n   */\\n  function checkContract(address _account) internal view {\\n    if (_account == address(0)) revert ZeroAddress();\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(_account)\\n    }\\n    if (size == 0) revert NotContract();\\n  }\\n}\\n\",\"keccak256\":\"0x482f75ff862c7f4f9bec69557c4756e1a41a037cda5c3c3392bbbf101e1e1385\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n   * given `owner`'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases `owner`'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   *\\n   * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n   * a value in the near future. The deadline argument can be set to uint(-1) to\\n   * create Permits that effectively never expire.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function version() external view returns (string memory);\\n\\n  function permitTypeHash() external view returns (bytes32);\\n\\n  function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x53d56e6e532f4b96025d7fb71a098764919f12ad5b390d698201332a6fc60c9d\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './LiquityMath.sol';\\nimport '../Interfaces/IBase.sol';\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is IBase {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n  uint32 public constant SWAP_FEE_PRECISION = 1e6;\\n  uint32 public constant SWAP_BASE_FEE = 0.003e6; // 0.3%\\n  uint public constant _100pct = 1e18; // 1e18 == 100%\\n  uint public constant MCR = 1.1e18; // 110%, Minimum collateral ratio for individual troves\\n  uint public constant CCR = 1.5e18; // 150%, Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n  uint public constant STABLE_COIN_GAS_COMPENSATION = 200e18; // Amount of stable to be locked in gas pool on opening troves\\n  uint public constant PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n  uint public constant MAX_BORROWING_FEE = 0.05e18; // 5%\\n  uint public constant BORROWING_FEE_FLOOR = 0.005e18; // 0.5%\\n  uint public constant REDEMPTION_FEE_FLOOR = 0.005e18; // 0.5%\\n\\n  // todo update\\n  address public constant GOV_STAKING_ADDRESS = address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);\\n  uint32 public constant GOV_SWAP_FEE = 0.5e6; // 50% of the dynamic swap fee\\n\\n  // Return the coll amount of to be drawn from a trove's collateral and sent as gas compensation.\\n  function _getCollGasCompensation(uint _collAmount) internal pure returns (uint) {\\n    return _collAmount / PERCENT_DIVISOR;\\n  }\\n\\n  function _requireUserAcceptsFee(uint _fee, uint _amount, uint _maxFeePercentage) internal pure {\\n    if (_fee == 0) return;\\n\\n    uint feePercentage = (_fee * DECIMAL_PRECISION) / _amount;\\n    // Fee exceeded provided maximum\\n    if (feePercentage > _maxFeePercentage) revert FeeExceedMaxPercentage();\\n  }\\n}\\n\",\"keccak256\":\"0x81f75af788c029d4b72415e3f5207e2405105aab4af1e800d5181d7c2fe8e057\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LiquityMath {\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + DECIMAL_PRECISION / 2) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a - _b : _b - _a;\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) return (_coll * DECIMAL_PRECISION) / _debt;\\n\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    // if (_debt == 0)\\n    return 2 ** 256 - 1;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function _sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x872236ed655cc901567f0ca00012a28c684ae029948389ba107f498ad5398062\",\"license\":\"MIT\"},\"contracts/Interfaces/IBBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\nimport './IDebtToken.sol';\\nimport './IStabilityPool.sol';\\n\\ninterface IBBase is IBase {\\n  enum Status {\\n    nonExistent,\\n    active,\\n    closedByOwner,\\n    closedByLiquidationInNormalMode,\\n    closedByLiquidationInRecoveryMode\\n  }\\n\\n  struct DebtTokenAmount {\\n    IDebtToken debtToken;\\n    uint netDebt;\\n    uint borrowingFee; // only in case of stable coin\\n  }\\n\\n  struct RemainingStability {\\n    IStabilityPool stabilityPool;\\n    address tokenAddress;\\n    uint remaining;\\n    uint debtToOffset; // debt amount which will be removed from the stability pool to liquidate the trove\\n    TokenAmount[] collGained; // coll which will be sent to the SP as rewards (multiple entries with same token address are possible)\\n  }\\n}\\n\",\"keccak256\":\"0x2b777c348158b33cbf6d0cbcf74a3981eadb257b388a47d110b3fdb60d9d55cb\",\"license\":\"MIT\"},\"contracts/Interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBase {\\n  enum PoolType {\\n    Active, // assets in active troves\\n    Default, // assets from redistributions, which are not yet claimed by the trove owners\\n    GasCompensation // stableCoin from gas compensation\\n  }\\n\\n  error FeeExceedMaxPercentage();\\n\\n  struct MintMeta {\\n    address upperHint;\\n    address lowerHint;\\n    uint maxFeePercentage;\\n  }\\n\\n  struct RAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount; // initial value in trove\\n    uint pendingReward; // gained rewards since deposit\\n    uint gasCompensation; // gas compensation for liquidation\\n    uint toLiquidate; // amount + pendingReward - gasCompensation\\n    uint toRedistribute; // across other open troves\\n    uint toOffset; // by stability pools\\n    uint collSurplus; // coll only, in case of an ICR > MCR liquidation\\n  }\\n\\n  struct CAmount {\\n    address tokenAddress;\\n    bool isColl; // coll or debt token\\n    uint amount;\\n  }\\n\\n  struct TokenAmount {\\n    address tokenAddress;\\n    uint amount;\\n  }\\n}\\n\",\"keccak256\":\"0x90c4c19adba4d2e55d2bee0a15df0137ea3180d96a57cddc6384cad542c520a3\",\"license\":\"MIT\"},\"contracts/Interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '../Dependencies/IERC2612.sol';\\nimport './IBase.sol';\\n\\ninterface IDebtToken is IERC20, IERC20Metadata, IERC2612, IBase {\\n  // --- Custom Errors ---\\n  error NotFromBorrowerOps();\\n  error NotFromBOorTroveMorSPorDebtToken();\\n  error NotFromSPManager();\\n  error NotFromTroveMorSP();\\n  error NotAllowedDirectTransfer();\\n  error InvalidSignature();\\n  error ExpiredDeadline();\\n  error InsufficientBalance();\\n\\n  // --- Functions ---\\n\\n  function isStableCoin() external view returns (bool);\\n\\n  function getPrice() external view returns (uint);\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function sendToPool(address _sender, address _poolAddress, uint256 _amount) external;\\n\\n  function totalSupply() external view override returns (uint256);\\n\\n  function balanceOf(address account) external view override returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool);\\n\\n  function allowance(address owner, address spender) external view override returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n  function domainSeparator() external view override returns (bytes32);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint amount,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override;\\n\\n  function nonces(address owner) external view override returns (uint256);\\n\\n  function name() external view override returns (string memory);\\n\\n  function symbol() external view override returns (string memory);\\n\\n  function decimals() external view override returns (uint8);\\n\\n  function version() external view override returns (string memory);\\n\\n  function permitTypeHash() external view override returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6b2f1825fa748b37ef338f0cd97042da1a676a79e6a30cc90dd372e26fbd93a7\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IPriceFeed is IBase {\\n  enum Status {\\n    working,\\n    oraclesUntrusted\\n  }\\n\\n  // --- Events ---\\n  event LastGoodPriceUpdated(address _token, uint _lastGoodPrice);\\n  event PriceFeedStatusChanged(address _token, Status newStatus);\\n  event TokenPriceChanged(address _token);\\n\\n  // --- Function ---\\n  function getPrice(address _tokenAddress) external view returns (uint price);\\n\\n  function getUSDValue(address _token, uint _amount) external view returns (uint usdValue);\\n\\n  function getAmountFromUSDValue(address _token, uint256 _usdValue) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9d8a68437d1b6eb73f5728bb0415e59b802a6a6fff6b2b4c442fd9cb9b97e041\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IDebtToken.sol';\\nimport './IBase.sol';\\n\\ninterface IStabilityPool is IBase {\\n  // --- Events ---\\n\\n  event StabilityPoolInitialized(address stabilityPoolManagerAddress, address depositTokenAddress);\\n\\n  event StabilityProvided(address user, uint amount);\\n  event StabilityWithdrawn(address user, uint amount);\\n  event StabilityGainsWithdrawn(address user, uint depositLost, TokenAmount[] gainsWithdrawn);\\n\\n  // used as trigger to update the users compounded deposit and current coll gains (there is not user specific event for that)\\n  event StabilityOffset(uint removedDeposit, TokenAmount[] addedGains);\\n\\n  event P_Updated(uint _P);\\n  event S_Updated(address _tokenAddress, uint _S, uint128 _epoch, uint128 _scale);\\n  event EpochUpdated(uint128 _currentEpoch);\\n  event ScaleUpdated(uint128 _currentScale);\\n  event DepositSnapshotUpdated(address indexed _depositor);\\n  // event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n\\n  // --- Errors  ---\\n\\n  error NotFromStabilityPoolManager();\\n  error ZeroAmount();\\n  error NotOneTrove();\\n\\n  // --- Functions ---\\n\\n  function getDepositToken() external view returns (IDebtToken);\\n\\n  function getTotalDeposit() external view returns (uint);\\n\\n  function getDepositorDeposit(address _depositor) external view returns (uint);\\n\\n  function getCompoundedDebtDeposit(address _depositor) external view returns (uint);\\n\\n  function getTotalGainedColl() external view returns (TokenAmount[] memory coll);\\n\\n  function getDepositorCollGain(address _depositor, address _collToken) external view returns (uint);\\n\\n  function getDepositorCollSnapshot(address _depositor, address _collToken) external view returns (uint);\\n\\n  function provideToSP(address user, uint _amount) external;\\n\\n  function withdrawFromSP(address user, uint _amount) external;\\n\\n  function withdrawGains(address user) external;\\n\\n  function offset(uint _debtToOffset, TokenAmount[] memory _collToAdd) external;\\n}\\n\",\"keccak256\":\"0x06a29f5b91ef199ee97ca6da3d02425eeb24045a78c8167e4d44f10aa6c9181c\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBBase.sol';\\n\\ninterface IStabilityPoolManager is IBBase {\\n  // --- Events ---\\n\\n  event StabilityPoolManagerInitiated(\\n    address liquidationOperationsAddress,\\n    address storgePoolAddress,\\n    address reservePoolAddress,\\n    address debtTokenManagerAddress,\\n    address priceFeedAddress\\n  );\\n  event StabilityPoolAdded(address stabilityPoolAddress);\\n\\n  // --- Custom Errors ---\\n  error NotFromLiquidationOps();\\n  error NotFromReservePool();\\n  error PoolNotExist();\\n  error PoolExist();\\n  error Unauthorized();\\n\\n  // --- Functions ---\\n  function getStabilityPool(IDebtToken _debtToken) external view returns (IStabilityPool);\\n\\n  function getRemainingStability(\\n    address[] memory collTokenAddresses\\n  ) external view returns (RemainingStability[] memory);\\n\\n  function getTotalDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getTotalDeposit(address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getDepositorDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorDeposit(address _depositor, address _debtTokenAddress) external view returns (uint amount);\\n\\n  function getCompoundedDeposits() external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCompoundedDeposit(\\n    address _depositor,\\n    address _debtTokenAddress\\n  ) external view returns (uint amount);\\n\\n  function getDepositorCompoundedDeposits(address _depositor) external view returns (TokenAmount[] memory deposits);\\n\\n  function getDepositorCollGains(\\n    address _depositor,\\n    address[] memory collTokenAddresses\\n  ) external view returns (TokenAmount[] memory collGains);\\n\\n  function provideStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawStability(TokenAmount[] memory _debts) external;\\n\\n  function withdrawGains() external;\\n\\n  function offset(RemainingStability[] memory _toOffset) external;\\n\\n  function addStabilityPool(IDebtToken _debtToken) external;\\n}\\n\",\"keccak256\":\"0x2143d797199cdfc6918f43fe576542938ed8dc7ea1a8f616ca27e334f222726b\",\"license\":\"MIT\"},\"contracts/Interfaces/IStoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IBase.sol';\\n\\ninterface IStoragePool is IBase {\\n  // --- Events ---\\n\\n  event StoragePoolInitialized(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  );\\n  event StoragePoolValueUpdated(address _tokenAddress, bool _isColl, PoolType _poolType, uint _updatedAmount);\\n\\n  // --- Custom Errors ---\\n\\n  error NotFromBOorTroveMorSP();\\n  error PoolEntryDoesntExist();\\n\\n  // --- Functions ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view returns (uint);\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external;\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external;\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isCool,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external;\\n\\n  function getEntireSystemColl() external view returns (uint entireSystemColl);\\n\\n  function getEntireSystemDebt() external view returns (uint entireSystemDebt);\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view returns (uint);\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt);\\n}\\n\",\"keccak256\":\"0xb2a3d0cffbdecd29c39ba0ccf2974b29fd359e77db5727b46c4cd2ed197ee8d4\",\"license\":\"MIT\"},\"contracts/StoragePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Dependencies/CheckContract.sol';\\nimport './Dependencies/LiquityBase.sol';\\nimport './Interfaces/IStoragePool.sol';\\nimport './Interfaces/IPriceFeed.sol';\\nimport './Interfaces/IStabilityPoolManager.sol';\\n\\n/*\\n * The Active Pool holds the collateral and debt (but not the token itself) for all active troves.\\n *\\n * When a trove is liquidated, it's coll and debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ncontract StoragePool is LiquityBase, Ownable(msg.sender), CheckContract, IStoragePool {\\n  string public constant NAME = 'StoragePool';\\n\\n  address public borrowerOperationsAddress;\\n  address public troveManagerAddress;\\n  address public redemptionOperationsAddress;\\n  address public liquidationOperationsAddress;\\n  address public stabilityPoolManagerAddress;\\n  IPriceFeed public priceFeed;\\n\\n  struct PoolEntry {\\n    address tokenAddress;\\n    uint256 totalAmount;\\n    mapping(PoolType => uint256) poolTypes;\\n    bool exists;\\n  }\\n  mapping(address => mapping(bool => PoolEntry)) internal poolEntries; // [tokenAddress][isColl] => PoolEntry\\n  address[] public collTokenAddresses;\\n  address[] public debtTokenAddresses;\\n\\n  // --- Contract setters ---\\n\\n  function setAddresses(\\n    address _borrowerOperationsAddress,\\n    address _troveManagerAddress,\\n    address _redemptionOperationsAddress,\\n    address _liquidationOperationsAddress,\\n    address _stabilityPoolManagerAddress,\\n    address _priceFeedAddress\\n  ) external onlyOwner {\\n    checkContract(_borrowerOperationsAddress);\\n    checkContract(_troveManagerAddress);\\n    checkContract(_redemptionOperationsAddress);\\n    checkContract(_liquidationOperationsAddress);\\n    checkContract(_stabilityPoolManagerAddress);\\n    checkContract(_priceFeedAddress);\\n\\n    borrowerOperationsAddress = _borrowerOperationsAddress;\\n    troveManagerAddress = _troveManagerAddress;\\n    redemptionOperationsAddress = _redemptionOperationsAddress;\\n    liquidationOperationsAddress = _liquidationOperationsAddress;\\n    stabilityPoolManagerAddress = _stabilityPoolManagerAddress;\\n    priceFeed = IPriceFeed(_priceFeedAddress);\\n\\n    emit StoragePoolInitialized(\\n      _borrowerOperationsAddress,\\n      _troveManagerAddress,\\n      _redemptionOperationsAddress,\\n      _liquidationOperationsAddress,\\n      _stabilityPoolManagerAddress,\\n      _priceFeedAddress\\n    );\\n\\n    renounceOwnership();\\n  }\\n\\n  // --- Getters for public variables. Required by IPool interface ---\\n\\n  function getValue(address _tokenAddress, bool _isColl, PoolType _poolType) external view override returns (uint) {\\n    return poolEntries[_tokenAddress][_isColl].poolTypes[_poolType];\\n  }\\n\\n  // --- Pool functionality ---\\n\\n  function addValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external override {\\n    _requireCallerIsProtocol();\\n\\n    PoolEntry storage entry = poolEntries[_tokenAddress][_isColl];\\n    if (!entry.exists) {\\n      poolEntries[_tokenAddress][_isColl].exists = true;\\n      poolEntries[_tokenAddress][_isColl].tokenAddress = _tokenAddress;\\n\\n      if (_isColl) collTokenAddresses.push(_tokenAddress);\\n      else debtTokenAddresses.push(_tokenAddress);\\n    }\\n\\n    entry.poolTypes[_poolType] += _amount;\\n    entry.totalAmount += _amount;\\n    emit StoragePoolValueUpdated(_tokenAddress, _isColl, _poolType, entry.poolTypes[_poolType]);\\n  }\\n\\n  function subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) external override {\\n    _requireCallerIsProtocol();\\n    _subtractValue(_tokenAddress, _isColl, _poolType, _amount);\\n  }\\n\\n  function withdrawalValue(\\n    address _receiver,\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _poolType,\\n    uint _amount\\n  ) external override {\\n    _requireCallerIsProtocol();\\n    _subtractValue(_tokenAddress, _isColl, _poolType, _amount);\\n    IERC20(_tokenAddress).transfer(_receiver, _amount);\\n  }\\n\\n  function _subtractValue(address _tokenAddress, bool _isColl, PoolType _poolType, uint _amount) internal {\\n    PoolEntry storage entry = poolEntries[_tokenAddress][_isColl];\\n    if (!entry.exists) revert PoolEntryDoesntExist();\\n\\n    entry.poolTypes[_poolType] -= _amount;\\n    entry.totalAmount -= _amount;\\n    emit StoragePoolValueUpdated(_tokenAddress, _isColl, _poolType, entry.poolTypes[_poolType]);\\n  }\\n\\n  function transferBetweenTypes(\\n    address _tokenAddress,\\n    bool _isColl,\\n    PoolType _fromType,\\n    PoolType _toType,\\n    uint _amount\\n  ) external override {\\n    _requireCallerIsProtocol();\\n\\n    PoolEntry storage entry = poolEntries[_tokenAddress][_isColl];\\n    if (!entry.exists) revert PoolEntryDoesntExist();\\n\\n    entry.poolTypes[_fromType] -= _amount;\\n    emit StoragePoolValueUpdated(_tokenAddress, _isColl, _fromType, entry.poolTypes[_fromType]);\\n\\n    entry.poolTypes[_toType] += _amount;\\n    emit StoragePoolValueUpdated(_tokenAddress, _isColl, _toType, entry.poolTypes[_toType]);\\n  }\\n\\n  function getEntireSystemColl() public view returns (uint entireSystemColl) {\\n    IPriceFeed priceFeedCached = priceFeed;\\n    for (uint i = 0; i < collTokenAddresses.length; i++)\\n      entireSystemColl += priceFeedCached.getUSDValue(\\n        collTokenAddresses[i],\\n        poolEntries[collTokenAddresses[i]][true].totalAmount\\n      );\\n\\n    return entireSystemColl;\\n  }\\n\\n  function getEntireSystemDebt() public view returns (uint entireSystemDebt) {\\n    IPriceFeed priceFeedCached = priceFeed;\\n    for (uint i = 0; i < debtTokenAddresses.length; i++)\\n      entireSystemDebt += priceFeedCached.getUSDValue(\\n        debtTokenAddresses[i],\\n        poolEntries[debtTokenAddresses[i]][false].totalAmount\\n      );\\n\\n    return entireSystemDebt;\\n  }\\n\\n  function getTokenTotalAmount(address _tokenAddress, bool _isColl) external view override returns (uint) {\\n    return poolEntries[_tokenAddress][_isColl].totalAmount;\\n  }\\n\\n  function checkRecoveryMode()\\n    external\\n    view\\n    returns (bool isInRecoveryMode, uint TCR, uint entireSystemColl, uint entireSystemDebt)\\n  {\\n    entireSystemColl = getEntireSystemColl();\\n    entireSystemDebt = getEntireSystemDebt();\\n    TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt);\\n    isInRecoveryMode = TCR < CCR;\\n  }\\n\\n  // --- 'require' functions ---\\n\\n  function _requireCallerIsProtocol() internal view {\\n    if (\\n      msg.sender != borrowerOperationsAddress &&\\n      msg.sender != troveManagerAddress &&\\n      msg.sender != stabilityPoolManagerAddress &&\\n      msg.sender != redemptionOperationsAddress &&\\n      msg.sender != liquidationOperationsAddress\\n    ) revert NotFromBOorTroveMorSP();\\n  }\\n}\\n\",\"keccak256\":\"0x551bf4df0ff80436da8d7c83ea1e777e9cdb7674d8b2d83f1578596c9afb6fba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61142d806100a56000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063795d26c31161011a578063b403b997116100ad578063e67729e31161007c578063e67729e314610466578063e853753414610470578063ec671c8314610483578063f2fde38b1461048d578063f92d34331461027457600080fd5b8063b403b9971461041a578063b7f8cf9b1461042d578063d05f350014610440578063e24404841461045357600080fd5b80638e2f0dcf116100e95780638e2f0dcf146103aa578063a33d8e14146103bd578063a3f4df7e146103d0578063b09f902c1461040757600080fd5b8063795d26c314610379578063887105d3146103815780638d63c665146103895780638da5cb5b1461039957600080fd5b80635733d58f1161019d578063715018a61161016c578063715018a61461032d57806371a9d4181461033557806372fe25aa14610348578063741bef1a14610357578063794e57241461036a57600080fd5b80635733d58f146102e55780635a4d28bb146102f45780635ebdb11a146103075780636cfb6bf91461031a57600080fd5b80632be2615a116101d95780632be2615a1461028257806343a124fa146102955780634870dd9a146102bf578063502afb04146102c757600080fd5b806309230ad31461020b57806312e1aab414610243578063240926691461025857806328d28b5b14610274575b600080fd5b61022673f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61025661025136600461105c565b6104a0565b005b61026666b1a2bc2ec5000081565b60405190815260200161023a565b6102666611c37937e0800081565b600354610226906001600160a01b031681565b61029d6104ba565b604080519415158552602085019390935291830152606082015260800161023a565b61026660c881565b6102d0610bb881565b60405163ffffffff909116815260200161023a565b6102666714d1120d7b16000081565b600254610226906001600160a01b031681565b6102566103153660046110a9565b6104f3565b610256610328366004611107565b6106d1565b6102566107dd565b61022661034336600461117b565b6107f1565b610266670de0b6b3a764000081565b600654610226906001600160a01b031681565b610266670f43fc2c04ee000081565b61026661081b565b61026661094b565b610266680ad78ebc5ac620000081565b6000546001600160a01b0316610226565b600554610226906001600160a01b031681565b6102266103cb36600461117b565b610a77565b6103fa6040518060400160405280600b81526020016a14dd1bdc9859d9541bdbdb60aa1b81525081565b60405161023a9190611194565b6102666104153660046111e2565b610a87565b610256610428366004611219565b610ab7565b600154610226906001600160a01b031681565b61026661044e366004611258565b610b3e565b61025661046136600461105c565b610ba5565b6102d0620f424081565b600454610226906001600160a01b031681565b6102d06207a12081565b61025661049b36600461129d565b610da9565b6104a8610dec565b6104b484848484610e75565b50505050565b6000806000806104c861094b565b91506104d261081b565b90506104de8282610f21565b92506714d1120d7b1600008310935090919293565b6104fb610dec565b6001600160a01b038516600090815260076020908152604080832087151584529091529020600381015460ff16610545576040516363fdfe3960e01b815260040160405180910390fd5b8181600201600086600281111561055e5761055e6112bf565b600281111561056f5761056f6112bf565b8152602001908152602001600020600082825461058c91906112eb565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e8686868460020160008960028111156105cf576105cf6112bf565b60028111156105e0576105e06112bf565b8152602001908152602001600020546040516105ff94939291906112fe565b60405180910390a181816002016000856002811115610620576106206112bf565b6002811115610631576106316112bf565b8152602001908152602001600020600082825461064e9190611346565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e868685846002016000886002811115610691576106916112bf565b60028111156106a2576106a26112bf565b8152602001908152602001600020546040516106c194939291906112fe565b60405180910390a1505050505050565b6106d9610f57565b6106e286610f84565b6106eb85610f84565b6106f484610f84565b6106fd83610f84565b61070682610f84565b61070f81610f84565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f954ea1c03f74511a05013f2fb599edaab4596ae212080d07af723c9a8b1bd0439060c00160405180910390a16107d56107dd565b505050505050565b6107e5610f57565b6107ef6000610fd3565b565b6008818154811061080157600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546000906001600160a01b0316815b60095481101561094657816001600160a01b031663fa76dcf26009838154811061085857610858611359565b9060005260206000200160009054906101000a90046001600160a01b0316600760006009868154811061088d5761088d611359565b6000918252602080832091909101546001600160a01b0390811684528382019490945260409283018220828052905281902060010154905160e085901b6001600160e01b03191681529290911660048301526024820152604401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610928919061136f565b6109329084611346565b92508061093e81611388565b91505061082c565b505090565b6006546000906001600160a01b0316815b60085481101561094657816001600160a01b031663fa76dcf26008838154811061098857610988611359565b9060005260206000200160009054906101000a90046001600160a01b031660076000600886815481106109bd576109bd611359565b6000918252602080832091909101546001600160a01b039081168452838201949094526040928301822060018084529152908290200154905160e085901b6001600160e01b03191681529290911660048301526024820152604401602060405180830381865afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a59919061136f565b610a639084611346565b925080610a6f81611388565b91505061095c565b6009818154811061080157600080fd5b6001600160a01b038216600090815260076020908152604080832084151584529091529020600101545b92915050565b610abf610dec565b610acb84848484610e75565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af1158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d591906113a1565b6001600160a01b03831660009081526007602090815260408083208515158452909152812060029081019082908490811115610b7c57610b7c6112bf565b6002811115610b8d57610b8d6112bf565b81526020019081526020016000205490509392505050565b610bad610dec565b6001600160a01b038416600090815260076020908152604080832086151584529091529020600381015460ff16610cc5576001600160a01b0385166000818152600760209081526040808320881580158552925290912060038101805460ff1916600117905580546001600160a01b031916909217909155610c7957600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038716179055610cc5565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0387161790555b81816002016000856002811115610cde57610cde6112bf565b6002811115610cef57610cef6112bf565b81526020019081526020016000206000828254610d0c9190611346565b9250508190555081816001016000828254610d279190611346565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e858585846002016000886002811115610d6a57610d6a6112bf565b6002811115610d7b57610d7b6112bf565b815260200190815260200160002054604051610d9a94939291906112fe565b60405180910390a15050505050565b610db1610f57565b6001600160a01b038116610de057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610de981610fd3565b50565b6001546001600160a01b03163314801590610e1257506002546001600160a01b03163314155b8015610e2957506005546001600160a01b03163314155b8015610e4057506003546001600160a01b03163314155b8015610e5757506004546001600160a01b03163314155b156107ef5760405163229a92c760e21b815260040160405180910390fd5b6001600160a01b038416600090815260076020908152604080832086151584529091529020600381015460ff16610ebf576040516363fdfe3960e01b815260040160405180910390fd5b81816002016000856002811115610ed857610ed86112bf565b6002811115610ee957610ee96112bf565b81526020019081526020016000206000828254610f0691906112eb565b9250508190555081816001016000828254610d2791906112eb565b60008115610f4d5781610f3c670de0b6b3a7640000856113be565b610f4691906113d5565b9050610ab1565b5060001992915050565b6000546001600160a01b031633146107ef5760405163118cdaa760e01b8152336004820152602401610dd7565b6001600160a01b038116610fab5760405163d92e233d60e01b815260040160405180910390fd5b803b6000819003610fcf57604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461103a57600080fd5b919050565b8015158114610de957600080fd5b80356003811061103a57600080fd5b6000806000806080858703121561107257600080fd5b61107b85611023565b9350602085013561108b8161103f565b92506110996040860161104d565b9396929550929360600135925050565b600080600080600060a086880312156110c157600080fd5b6110ca86611023565b945060208601356110da8161103f565b93506110e86040870161104d565b92506110f66060870161104d565b949793965091946080013592915050565b60008060008060008060c0878903121561112057600080fd5b61112987611023565b955061113760208801611023565b945061114560408801611023565b935061115360608801611023565b925061116160808801611023565b915061116f60a08801611023565b90509295509295509295565b60006020828403121561118d57600080fd5b5035919050565b600060208083528351808285015260005b818110156111c1578581018301518582016040015282016111a5565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156111f557600080fd5b6111fe83611023565b9150602083013561120e8161103f565b809150509250929050565b600080600080600060a0868803121561123157600080fd5b61123a86611023565b945061124860208701611023565b935060408601356110e88161103f565b60008060006060848603121561126d57600080fd5b61127684611023565b925060208401356112868161103f565b91506112946040850161104d565b90509250925092565b6000602082840312156112af57600080fd5b6112b882611023565b9392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ab157610ab16112d5565b6001600160a01b03851681528315156020820152608081016003841061133457634e487b7160e01b600052602160045260246000fd5b60408201939093526060015292915050565b80820180821115610ab157610ab16112d5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561138157600080fd5b5051919050565b60006001820161139a5761139a6112d5565b5060010190565b6000602082840312156113b357600080fd5b81516112b88161103f565b8082028115828204841417610ab157610ab16112d5565b6000826113f257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bb76c74e52960dac499edf876ee3fad3a2e0ce787154472051b4346d31bfdb5b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063795d26c31161011a578063b403b997116100ad578063e67729e31161007c578063e67729e314610466578063e853753414610470578063ec671c8314610483578063f2fde38b1461048d578063f92d34331461027457600080fd5b8063b403b9971461041a578063b7f8cf9b1461042d578063d05f350014610440578063e24404841461045357600080fd5b80638e2f0dcf116100e95780638e2f0dcf146103aa578063a33d8e14146103bd578063a3f4df7e146103d0578063b09f902c1461040757600080fd5b8063795d26c314610379578063887105d3146103815780638d63c665146103895780638da5cb5b1461039957600080fd5b80635733d58f1161019d578063715018a61161016c578063715018a61461032d57806371a9d4181461033557806372fe25aa14610348578063741bef1a14610357578063794e57241461036a57600080fd5b80635733d58f146102e55780635a4d28bb146102f45780635ebdb11a146103075780636cfb6bf91461031a57600080fd5b80632be2615a116101d95780632be2615a1461028257806343a124fa146102955780634870dd9a146102bf578063502afb04146102c757600080fd5b806309230ad31461020b57806312e1aab414610243578063240926691461025857806328d28b5b14610274575b600080fd5b61022673f39fd6e51aad88f6f4ce6ab8827279cfffb9226681565b6040516001600160a01b0390911681526020015b60405180910390f35b61025661025136600461105c565b6104a0565b005b61026666b1a2bc2ec5000081565b60405190815260200161023a565b6102666611c37937e0800081565b600354610226906001600160a01b031681565b61029d6104ba565b604080519415158552602085019390935291830152606082015260800161023a565b61026660c881565b6102d0610bb881565b60405163ffffffff909116815260200161023a565b6102666714d1120d7b16000081565b600254610226906001600160a01b031681565b6102566103153660046110a9565b6104f3565b610256610328366004611107565b6106d1565b6102566107dd565b61022661034336600461117b565b6107f1565b610266670de0b6b3a764000081565b600654610226906001600160a01b031681565b610266670f43fc2c04ee000081565b61026661081b565b61026661094b565b610266680ad78ebc5ac620000081565b6000546001600160a01b0316610226565b600554610226906001600160a01b031681565b6102266103cb36600461117b565b610a77565b6103fa6040518060400160405280600b81526020016a14dd1bdc9859d9541bdbdb60aa1b81525081565b60405161023a9190611194565b6102666104153660046111e2565b610a87565b610256610428366004611219565b610ab7565b600154610226906001600160a01b031681565b61026661044e366004611258565b610b3e565b61025661046136600461105c565b610ba5565b6102d0620f424081565b600454610226906001600160a01b031681565b6102d06207a12081565b61025661049b36600461129d565b610da9565b6104a8610dec565b6104b484848484610e75565b50505050565b6000806000806104c861094b565b91506104d261081b565b90506104de8282610f21565b92506714d1120d7b1600008310935090919293565b6104fb610dec565b6001600160a01b038516600090815260076020908152604080832087151584529091529020600381015460ff16610545576040516363fdfe3960e01b815260040160405180910390fd5b8181600201600086600281111561055e5761055e6112bf565b600281111561056f5761056f6112bf565b8152602001908152602001600020600082825461058c91906112eb565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e8686868460020160008960028111156105cf576105cf6112bf565b60028111156105e0576105e06112bf565b8152602001908152602001600020546040516105ff94939291906112fe565b60405180910390a181816002016000856002811115610620576106206112bf565b6002811115610631576106316112bf565b8152602001908152602001600020600082825461064e9190611346565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e868685846002016000886002811115610691576106916112bf565b60028111156106a2576106a26112bf565b8152602001908152602001600020546040516106c194939291906112fe565b60405180910390a1505050505050565b6106d9610f57565b6106e286610f84565b6106eb85610f84565b6106f484610f84565b6106fd83610f84565b61070682610f84565b61070f81610f84565b600180546001600160a01b038881166001600160a01b0319928316811790935560028054898316908416811790915560038054898416908516811790915560048054898516908616811790915560058054898616908716811790915560068054958916959096168517909555604080519687526020870193909352918501526060840152608083019190915260a08201527f954ea1c03f74511a05013f2fb599edaab4596ae212080d07af723c9a8b1bd0439060c00160405180910390a16107d56107dd565b505050505050565b6107e5610f57565b6107ef6000610fd3565b565b6008818154811061080157600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546000906001600160a01b0316815b60095481101561094657816001600160a01b031663fa76dcf26009838154811061085857610858611359565b9060005260206000200160009054906101000a90046001600160a01b0316600760006009868154811061088d5761088d611359565b6000918252602080832091909101546001600160a01b0390811684528382019490945260409283018220828052905281902060010154905160e085901b6001600160e01b03191681529290911660048301526024820152604401602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610928919061136f565b6109329084611346565b92508061093e81611388565b91505061082c565b505090565b6006546000906001600160a01b0316815b60085481101561094657816001600160a01b031663fa76dcf26008838154811061098857610988611359565b9060005260206000200160009054906101000a90046001600160a01b031660076000600886815481106109bd576109bd611359565b6000918252602080832091909101546001600160a01b039081168452838201949094526040928301822060018084529152908290200154905160e085901b6001600160e01b03191681529290911660048301526024820152604401602060405180830381865afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a59919061136f565b610a639084611346565b925080610a6f81611388565b91505061095c565b6009818154811061080157600080fd5b6001600160a01b038216600090815260076020908152604080832084151584529091529020600101545b92915050565b610abf610dec565b610acb84848484610e75565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af1158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d591906113a1565b6001600160a01b03831660009081526007602090815260408083208515158452909152812060029081019082908490811115610b7c57610b7c6112bf565b6002811115610b8d57610b8d6112bf565b81526020019081526020016000205490509392505050565b610bad610dec565b6001600160a01b038416600090815260076020908152604080832086151584529091529020600381015460ff16610cc5576001600160a01b0385166000818152600760209081526040808320881580158552925290912060038101805460ff1916600117905580546001600160a01b031916909217909155610c7957600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038716179055610cc5565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0387161790555b81816002016000856002811115610cde57610cde6112bf565b6002811115610cef57610cef6112bf565b81526020019081526020016000206000828254610d0c9190611346565b9250508190555081816001016000828254610d279190611346565b925050819055507f9cdc80e7ef9e06e67df996a29f1e4f72fe5b33458cbb0924cb4b5d6c24be215e858585846002016000886002811115610d6a57610d6a6112bf565b6002811115610d7b57610d7b6112bf565b815260200190815260200160002054604051610d9a94939291906112fe565b60405180910390a15050505050565b610db1610f57565b6001600160a01b038116610de057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610de981610fd3565b50565b6001546001600160a01b03163314801590610e1257506002546001600160a01b03163314155b8015610e2957506005546001600160a01b03163314155b8015610e4057506003546001600160a01b03163314155b8015610e5757506004546001600160a01b03163314155b156107ef5760405163229a92c760e21b815260040160405180910390fd5b6001600160a01b038416600090815260076020908152604080832086151584529091529020600381015460ff16610ebf576040516363fdfe3960e01b815260040160405180910390fd5b81816002016000856002811115610ed857610ed86112bf565b6002811115610ee957610ee96112bf565b81526020019081526020016000206000828254610f0691906112eb565b9250508190555081816001016000828254610d2791906112eb565b60008115610f4d5781610f3c670de0b6b3a7640000856113be565b610f4691906113d5565b9050610ab1565b5060001992915050565b6000546001600160a01b031633146107ef5760405163118cdaa760e01b8152336004820152602401610dd7565b6001600160a01b038116610fab5760405163d92e233d60e01b815260040160405180910390fd5b803b6000819003610fcf57604051636f7c43f160e01b815260040160405180910390fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461103a57600080fd5b919050565b8015158114610de957600080fd5b80356003811061103a57600080fd5b6000806000806080858703121561107257600080fd5b61107b85611023565b9350602085013561108b8161103f565b92506110996040860161104d565b9396929550929360600135925050565b600080600080600060a086880312156110c157600080fd5b6110ca86611023565b945060208601356110da8161103f565b93506110e86040870161104d565b92506110f66060870161104d565b949793965091946080013592915050565b60008060008060008060c0878903121561112057600080fd5b61112987611023565b955061113760208801611023565b945061114560408801611023565b935061115360608801611023565b925061116160808801611023565b915061116f60a08801611023565b90509295509295509295565b60006020828403121561118d57600080fd5b5035919050565b600060208083528351808285015260005b818110156111c1578581018301518582016040015282016111a5565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156111f557600080fd5b6111fe83611023565b9150602083013561120e8161103f565b809150509250929050565b600080600080600060a0868803121561123157600080fd5b61123a86611023565b945061124860208701611023565b935060408601356110e88161103f565b60008060006060848603121561126d57600080fd5b61127684611023565b925060208401356112868161103f565b91506112946040850161104d565b90509250925092565b6000602082840312156112af57600080fd5b6112b882611023565b9392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ab157610ab16112d5565b6001600160a01b03851681528315156020820152608081016003841061133457634e487b7160e01b600052602160045260246000fd5b60408201939093526060015292915050565b80820180821115610ab157610ab16112d5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561138157600080fd5b5051919050565b60006001820161139a5761139a6112d5565b5060010190565b6000602082840312156113b357600080fd5b81516112b88161103f565b8082028115828204841417610ab157610ab16112d5565b6000826113f257634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bb76c74e52960dac499edf876ee3fad3a2e0ce787154472051b4346d31bfdb5b64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19609,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 19611,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "troveManagerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 19613,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "redemptionOperationsAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19615,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "liquidationOperationsAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19617,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "stabilityPoolManagerAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 19620,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceFeed)10268"
      },
      {
        "astId": 19639,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "poolEntries",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(PoolEntry)19632_storage))"
      },
      {
        "astId": 19642,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "collTokenAddresses",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19645,
        "contract": "contracts/StoragePool.sol:StoragePool",
        "label": "debtTokenAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPriceFeed)10268": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_enum(PoolType)9568": {
        "encoding": "inplace",
        "label": "enum IBase.PoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_struct(PoolEntry)19632_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => struct StoragePool.PoolEntry))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_struct(PoolEntry)19632_storage)"
      },
      "t_mapping(t_bool,t_struct(PoolEntry)19632_storage)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => struct StoragePool.PoolEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolEntry)19632_storage"
      },
      "t_mapping(t_enum(PoolType)9568,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(PoolType)9568",
        "label": "mapping(enum IBase.PoolType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolEntry)19632_storage": {
        "encoding": "inplace",
        "label": "struct StoragePool.PoolEntry",
        "members": [
          {
            "astId": 19622,
            "contract": "contracts/StoragePool.sol:StoragePool",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19624,
            "contract": "contracts/StoragePool.sol:StoragePool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19629,
            "contract": "contracts/StoragePool.sol:StoragePool",
            "label": "poolTypes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_enum(PoolType)9568,t_uint256)"
          },
          {
            "astId": 19631,
            "contract": "contracts/StoragePool.sol:StoragePool",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}