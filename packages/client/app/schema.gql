type Token {
  address: String! # contract address, used as id
  symbol: String!
  createdAt: String!
  #
  priceUSD: Float!
  priceUSD24hAgo: Float!
  #
  isDebt: Boolean!
  totalSupplyUSD: Float! # minted - burned (only for debt tokens)
  totalSupplyUSD24hAgo: Float!
  #
  isColl: Boolean!
  totalValueLockedUSD: Float! # (only for coll tokens)
  totalValueLockedUSD24hAgo: Float!
}

enum TokenType {
  DEBT
  COLL
}

type TokenAmount {
  token: Token!
  usedAs: TokenType! # there are tokens, which can be used as debt and collateral
  # borrower specific
  troveAmount: Float # minted (as debt), locked (as coll)
  walletAmount: Float
  stabilityAmount: Float # lost deposit (as debt), gained collateral (as coll)
  # global
  totalDepositedStability: Float # (only for debt tokens)
  totalReserve: Float # (only for debt tokens)
  totalReserve24hAgo: Float # (only for debt tokens)
}

type Query {
  # without borrower address troveAmount and walletAmount are always undefined
  # every token is returned, even if it is not used by the borrower (troveAmount, walletAmount = 0)
  # the same token can be returned twice, if it is used as debt and collateral
  getTokens(borrower: String): [TokenAmount!]!
}

type PoolTokenLiquidity {
  token: Token!
  isLiquidity: Boolean! # if false, the token is only used for rewards (not relevant for the swap)
  # only when isLiquidity
  totalLiquidity: Float
  borrowerLiquidity: Float
  #
  borrowerRewards: Float # unclaimed
}

type Pool {
  id: String!
  tokens: [PoolTokenLiquidity!]!
  volume24hUSD: Float!
  volume24hUSD24hAgo: Float!
}

type Query {
  # every pool is returned, even if it is empty
  # without borrower address borrowerLiquidity and borrowerRewards are always undefined
  getPools(borrower: String): [Pool!]!
  getPoolHistoryAdv(poolId: String!): [[Int]]! # [[timestamp, value], [...], ...] todo time range filter needed?
  #
  getCollateralUSDHistory: [Int!]! # 6h interval, from now into the past
  getDebtUSDHistory: [Int!]! # 6h interval, from now into the past
  getCRHistory: [Int!]! # 6h interval, from now into the past
  getReserveUSDHistory: [Int!]! # 6h interval, from now into the past
}
