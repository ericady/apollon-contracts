/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBase {
  export type TokenAmountStruct = {
    tokenAddress: AddressLike;
    amount: BigNumberish;
  };

  export type TokenAmountStructOutput = [
    tokenAddress: string,
    amount: bigint
  ] & { tokenAddress: string; amount: bigint };
}

export declare namespace IBBase {
  export type DebtTokenAmountStruct = {
    debtToken: AddressLike;
    netDebt: BigNumberish;
    borrowingFee: BigNumberish;
  };

  export type DebtTokenAmountStructOutput = [
    debtToken: string,
    netDebt: bigint,
    borrowingFee: bigint
  ] & { debtToken: string; netDebt: bigint; borrowingFee: bigint };
}

export interface BorrowerOperationsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BORROWING_FEE_FLOOR"
      | "CCR"
      | "MCR"
      | "NAME"
      | "PERCENT_DIVISOR"
      | "STABLE_COIN_GAS_COMPENSATION"
      | "_100pct"
      | "addColl"
      | "closeTrove"
      | "collTokenManager"
      | "debtTokenManager"
      | "getCompositeDebt"
      | "increaseDebt"
      | "openTrove"
      | "owner"
      | "priceFeed"
      | "renounceOwnership"
      | "repayDebt"
      | "setAddresses"
      | "storagePool"
      | "transferOwnership"
      | "troveManager"
      | "withdrawColl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerOperationsInitialized"
      | "OwnershipTransferred"
      | "TroveCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addColl",
    values: [IBase.TokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompositeDebt",
    values: [IBBase.DebtTokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [IBase.TokenAmountStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrove",
    values: [IBase.TokenAmountStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [IBase.TokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storagePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawColl",
    values: [IBase.TokenAmountStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addColl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompositeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storagePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawColl",
    data: BytesLike
  ): Result;
}

export namespace BorrowerOperationsInitializedEvent {
  export type InputTuple = [
    _troveManagerAddress: AddressLike,
    _storagePoolAddress: AddressLike,
    _stabilityPoolAddress: AddressLike,
    _priceFeedAddress: AddressLike,
    _debtTokenManagerAddress: AddressLike,
    _collTokenManagerAddress: AddressLike
  ];
  export type OutputTuple = [
    _troveManagerAddress: string,
    _storagePoolAddress: string,
    _stabilityPoolAddress: string,
    _priceFeedAddress: string,
    _debtTokenManagerAddress: string,
    _collTokenManagerAddress: string
  ];
  export interface OutputObject {
    _troveManagerAddress: string;
    _storagePoolAddress: string;
    _stabilityPoolAddress: string;
    _priceFeedAddress: string;
    _debtTokenManagerAddress: string;
    _collTokenManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveCreatedEvent {
  export type InputTuple = [_borrower: AddressLike, arrayIndex: BigNumberish];
  export type OutputTuple = [_borrower: string, arrayIndex: bigint];
  export interface OutputObject {
    _borrower: string;
    arrayIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BorrowerOperations extends BaseContract {
  connect(runner?: ContractRunner | null): BorrowerOperations;
  waitForDeployment(): Promise<this>;

  interface: BorrowerOperationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BORROWING_FEE_FLOOR: TypedContractMethod<[], [bigint], "view">;

  CCR: TypedContractMethod<[], [bigint], "view">;

  MCR: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  PERCENT_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  STABLE_COIN_GAS_COMPENSATION: TypedContractMethod<[], [bigint], "view">;

  _100pct: TypedContractMethod<[], [bigint], "view">;

  addColl: TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  closeTrove: TypedContractMethod<[], [void], "nonpayable">;

  collTokenManager: TypedContractMethod<[], [string], "view">;

  debtTokenManager: TypedContractMethod<[], [string], "view">;

  getCompositeDebt: TypedContractMethod<
    [_debts: IBBase.DebtTokenAmountStruct[]],
    [bigint],
    "view"
  >;

  increaseDebt: TypedContractMethod<
    [_debts: IBase.TokenAmountStruct[], _maxFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  openTrove: TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayDebt: TypedContractMethod<
    [_debts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  setAddresses: TypedContractMethod<
    [
      _troveManagerAddress: AddressLike,
      _storagePoolAddress: AddressLike,
      _stabilityPoolAddress: AddressLike,
      _priceFeedAddress: AddressLike,
      _debtTokenManagerAddress: AddressLike,
      _collTokenManagerAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  storagePool: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  troveManager: TypedContractMethod<[], [string], "view">;

  withdrawColl: TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BORROWING_FEE_FLOOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STABLE_COIN_GAS_COMPENSATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_100pct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addColl"
  ): TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeTrove"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCompositeDebt"
  ): TypedContractMethod<
    [_debts: IBBase.DebtTokenAmountStruct[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseDebt"
  ): TypedContractMethod<
    [_debts: IBase.TokenAmountStruct[], _maxFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openTrove"
  ): TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<
    [_debts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [
      _troveManagerAddress: AddressLike,
      _storagePoolAddress: AddressLike,
      _stabilityPoolAddress: AddressLike,
      _priceFeedAddress: AddressLike,
      _debtTokenManagerAddress: AddressLike,
      _collTokenManagerAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storagePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "troveManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawColl"
  ): TypedContractMethod<
    [_colls: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BorrowerOperationsInitialized"
  ): TypedContractEvent<
    BorrowerOperationsInitializedEvent.InputTuple,
    BorrowerOperationsInitializedEvent.OutputTuple,
    BorrowerOperationsInitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TroveCreated"
  ): TypedContractEvent<
    TroveCreatedEvent.InputTuple,
    TroveCreatedEvent.OutputTuple,
    TroveCreatedEvent.OutputObject
  >;

  filters: {
    "BorrowerOperationsInitialized(address,address,address,address,address,address)": TypedContractEvent<
      BorrowerOperationsInitializedEvent.InputTuple,
      BorrowerOperationsInitializedEvent.OutputTuple,
      BorrowerOperationsInitializedEvent.OutputObject
    >;
    BorrowerOperationsInitialized: TypedContractEvent<
      BorrowerOperationsInitializedEvent.InputTuple,
      BorrowerOperationsInitializedEvent.OutputTuple,
      BorrowerOperationsInitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TroveCreated(address,uint256)": TypedContractEvent<
      TroveCreatedEvent.InputTuple,
      TroveCreatedEvent.OutputTuple,
      TroveCreatedEvent.OutputObject
    >;
    TroveCreated: TypedContractEvent<
      TroveCreatedEvent.InputTuple,
      TroveCreatedEvent.OutputTuple,
      TroveCreatedEvent.OutputObject
    >;
  };
}
