/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  StabilityPoolManager,
  StabilityPoolManagerInterface,
} from "../StabilityPoolManager";

const _abi = [
  {
    inputs: [],
    name: "FeeExceedMaxPercentage",
    type: "error",
  },
  {
    inputs: [],
    name: "NotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "NotFromTroveManager",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolExist",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "stabilityPoolAddress",
        type: "address",
      },
    ],
    name: "StabilityPoolAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "troveManagerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "storgePoolAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "debtTokenManagerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    name: "StabilityPoolManagerInitiated",
    type: "event",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IDebtToken",
        name: "_debtToken",
        type: "address",
      },
    ],
    name: "addStabilityPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "debtTokenManagerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCompoundedDeposits",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct IBase.TokenAmount[]",
        name: "deposits",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "collTokenAddresses",
        type: "address[]",
      },
    ],
    name: "getRemainingStability",
    outputs: [
      {
        components: [
          {
            internalType: "contract IStabilityPool",
            name: "stabilityPool",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "remaining",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "debtToOffset",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IBase.TokenAmount[]",
            name: "collGained",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBBase.RemainingStability[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IDebtToken",
        name: "_debtToken",
        type: "address",
      },
    ],
    name: "getStabilityPool",
    outputs: [
      {
        internalType: "contract IStabilityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStabilityPools",
    outputs: [
      {
        internalType: "contract IStabilityPool[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalDeposits",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct IBase.TokenAmount[]",
        name: "deposits",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IStabilityPool",
            name: "stabilityPool",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "remaining",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "debtToOffset",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IBase.TokenAmount[]",
            name: "collGained",
            type: "tuple[]",
          },
        ],
        internalType: "struct IBBase.RemainingStability[]",
        name: "_toOffset",
        type: "tuple[]",
      },
    ],
    name: "offset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct IBase.TokenAmount[]",
        name: "_debts",
        type: "tuple[]",
      },
    ],
    name: "provideStability",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_troveManagerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeedAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_storagePoolAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_debtTokenManagerAddress",
        type: "address",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IDebtToken",
        name: "",
        type: "address",
      },
    ],
    name: "stabilityPools",
    outputs: [
      {
        internalType: "contract IStabilityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stabilityPoolsArray",
    outputs: [
      {
        internalType: "contract IStabilityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "storagePool",
    outputs: [
      {
        internalType: "contract IStoragePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "troveManagerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGains",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct IBase.TokenAmount[]",
        name: "_debts",
        type: "tuple[]",
      },
    ],
    name: "withdrawStability",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class StabilityPoolManager__factory {
  static readonly abi = _abi;
  static createInterface(): StabilityPoolManagerInterface {
    return new Interface(_abi) as StabilityPoolManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StabilityPoolManager {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as StabilityPoolManager;
  }
}
