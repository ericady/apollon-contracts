/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBase {
  export type CAmountStruct = {
    tokenAddress: AddressLike;
    isColl: boolean;
    amount: BigNumberish;
  };

  export type CAmountStructOutput = [
    tokenAddress: string,
    isColl: boolean,
    amount: bigint
  ] & { tokenAddress: string; isColl: boolean; amount: bigint };

  export type TokenAmountStruct = {
    tokenAddress: AddressLike;
    amount: BigNumberish;
  };

  export type TokenAmountStructOutput = [
    tokenAddress: string,
    amount: bigint
  ] & { tokenAddress: string; amount: bigint };

  export type RAmountStruct = {
    tokenAddress: AddressLike;
    isColl: boolean;
    amount: BigNumberish;
    pendingReward: BigNumberish;
    gasCompensation: BigNumberish;
    toLiquidate: BigNumberish;
    toRedistribute: BigNumberish;
    toOffset: BigNumberish;
  };

  export type RAmountStructOutput = [
    tokenAddress: string,
    isColl: boolean,
    amount: bigint,
    pendingReward: bigint,
    gasCompensation: bigint,
    toLiquidate: bigint,
    toRedistribute: bigint,
    toOffset: bigint
  ] & {
    tokenAddress: string;
    isColl: boolean;
    amount: bigint;
    pendingReward: bigint;
    gasCompensation: bigint;
    toLiquidate: bigint;
    toRedistribute: bigint;
    toOffset: bigint;
  };
}

export declare namespace IBBase {
  export type DebtTokenAmountStruct = {
    debtToken: AddressLike;
    netDebt: BigNumberish;
    borrowingFee: BigNumberish;
  };

  export type DebtTokenAmountStructOutput = [
    debtToken: string,
    netDebt: bigint,
    borrowingFee: bigint
  ] & { debtToken: string; netDebt: bigint; borrowingFee: bigint };
}

export interface TroveManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BETA"
      | "BOOTSTRAP_PERIOD"
      | "BORROWING_FEE_FLOOR"
      | "CCR"
      | "MAX_BORROWING_FEE"
      | "MCR"
      | "MINUTE_DECAY_FACTOR"
      | "NAME"
      | "PERCENT_DIVISOR"
      | "REDEMPTION_FEE_FLOOR"
      | "RESERVE_FEE"
      | "STABLE_COIN_GAS_COMPENSATION"
      | "TroveOwners"
      | "Troves"
      | "_100pct"
      | "addTroveOwnerToArray"
      | "applyPendingRewards"
      | "baseRate"
      | "batchLiquidateTroves"
      | "borrowerOperationsAddress"
      | "calcDecayedBaseRate"
      | "closeTrove"
      | "collTokenManager"
      | "debtTokenManager"
      | "decayBaseRateFromBorrowing"
      | "decreaseTroveColl"
      | "decreaseTroveDebt"
      | "getBaseRate"
      | "getBorrowingFee"
      | "getBorrowingFeeWithDecay"
      | "getBorrowingRate"
      | "getBorrowingRateWithDecay"
      | "getCurrentICR"
      | "getEntireDebtAndColl"
      | "getNominalICR"
      | "getPendingReward"
      | "getTroveColl"
      | "getTroveDebt"
      | "getTroveOwnersCount"
      | "getTroveRepayableDebt"
      | "getTroveStakeValue"
      | "getTroveStakes"
      | "getTroveStatus"
      | "getTroveWithdrawableColl"
      | "increaseTroveColl"
      | "increaseTroveDebt"
      | "lastErrorRedistribution"
      | "lastFeeOperationTime"
      | "liquidate"
      | "liquidatedTokens"
      | "owner"
      | "priceFeed"
      | "redemptionManagerAddress"
      | "removeStake"
      | "renounceOwnership"
      | "rewardSnapshots"
      | "setAddresses"
      | "setTroveStatus"
      | "stabilityPoolManager"
      | "storagePool"
      | "totalCollateralSnapshots"
      | "totalStakes"
      | "totalStakesSnapshot"
      | "transferOwnership"
      | "updateBaseRateFromRedemption"
      | "updateStakeAndTotalStakes"
      | "updateTroveRewardSnapshots"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BaseRateUpdated"
      | "LTermsUpdated"
      | "LastFeeOpTimeUpdated"
      | "LiquidationSummary"
      | "OwnershipTransferred"
      | "SystemSnapshotsUpdated"
      | "TotalStakesUpdated"
      | "TroveAppliedRewards"
      | "TroveClosed"
      | "TroveCollChanged"
      | "TroveIndexUpdated"
      | "TroveManagerInitialized"
      | "TroveSnapshotsUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BETA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BOOTSTRAP_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_BORROWING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINUTE_DECAY_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TroveOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Troves", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTroveOwnerToArray",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyPendingRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchLiquidateTroves",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcDecayedBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decayBaseRateFromBorrowing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveColl",
    values: [AddressLike, IBase.TokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveDebt",
    values: [AddressLike, IBBase.DebtTokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFeeWithDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRateWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentICR",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireDebtAndColl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNominalICR",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveColl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveOwnersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveRepayableDebt",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStakeValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStakes",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveWithdrawableColl",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveColl",
    values: [AddressLike, IBase.TokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveDebt",
    values: [AddressLike, IBBase.DebtTokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastErrorRedistribution",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeOperationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatedTokens",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSnapshots",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTroveStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storagePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralSnapshots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseRateFromRedemption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeAndTotalStakes",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTroveRewardSnapshots",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BETA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BOOTSTRAP_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BORROWING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINUTE_DECAY_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TroveOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Troves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTroveOwnerToArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchLiquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDecayedBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decayBaseRateFromBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireDebtAndColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNominalICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveOwnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveRepayableDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStakeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveWithdrawableColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastErrorRedistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeOperationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storagePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseRateFromRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeAndTotalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTroveRewardSnapshots",
    data: BytesLike
  ): Result;
}

export namespace BaseRateUpdatedEvent {
  export type InputTuple = [_baseRate: BigNumberish];
  export type OutputTuple = [_baseRate: bigint];
  export interface OutputObject {
    _baseRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LTermsUpdatedEvent {
  export type InputTuple = [_liquidatedTokens: IBase.CAmountStruct[]];
  export type OutputTuple = [_liquidatedTokens: IBase.CAmountStructOutput[]];
  export interface OutputObject {
    _liquidatedTokens: IBase.CAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastFeeOpTimeUpdatedEvent {
  export type InputTuple = [_lastFeeOpTime: BigNumberish];
  export type OutputTuple = [_lastFeeOpTime: bigint];
  export interface OutputObject {
    _lastFeeOpTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationSummaryEvent {
  export type InputTuple = [
    liquidatedDebt: IBase.TokenAmountStruct[],
    liquidatedColl: IBase.TokenAmountStruct[],
    totalStableCoinGasCompensation: BigNumberish,
    totalCollGasCompensation: IBase.TokenAmountStruct[]
  ];
  export type OutputTuple = [
    liquidatedDebt: IBase.TokenAmountStructOutput[],
    liquidatedColl: IBase.TokenAmountStructOutput[],
    totalStableCoinGasCompensation: bigint,
    totalCollGasCompensation: IBase.TokenAmountStructOutput[]
  ];
  export interface OutputObject {
    liquidatedDebt: IBase.TokenAmountStructOutput[];
    liquidatedColl: IBase.TokenAmountStructOutput[];
    totalStableCoinGasCompensation: bigint;
    totalCollGasCompensation: IBase.TokenAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemSnapshotsUpdatedEvent {
  export type InputTuple = [
    _totalStakesSnapshot: IBase.TokenAmountStruct[],
    _totalCollateralSnapshot: IBase.TokenAmountStruct[]
  ];
  export type OutputTuple = [
    _totalStakesSnapshot: IBase.TokenAmountStructOutput[],
    _totalCollateralSnapshot: IBase.TokenAmountStructOutput[]
  ];
  export interface OutputObject {
    _totalStakesSnapshot: IBase.TokenAmountStructOutput[];
    _totalCollateralSnapshot: IBase.TokenAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalStakesUpdatedEvent {
  export type InputTuple = [_totalStakes: IBase.TokenAmountStruct[]];
  export type OutputTuple = [_totalStakes: IBase.TokenAmountStructOutput[]];
  export interface OutputObject {
    _totalStakes: IBase.TokenAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveAppliedRewardsEvent {
  export type InputTuple = [
    _borrower: AddressLike,
    _appliedRewards: IBase.CAmountStruct[]
  ];
  export type OutputTuple = [
    _borrower: string,
    _appliedRewards: IBase.CAmountStructOutput[]
  ];
  export interface OutputObject {
    _borrower: string;
    _appliedRewards: IBase.CAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveClosedEvent {
  export type InputTuple = [
    _borrower: AddressLike,
    _closingState: BigNumberish
  ];
  export type OutputTuple = [_borrower: string, _closingState: bigint];
  export interface OutputObject {
    _borrower: string;
    _closingState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveCollChangedEvent {
  export type InputTuple = [
    _borrower: AddressLike,
    _collTokenAddresses: AddressLike[]
  ];
  export type OutputTuple = [_borrower: string, _collTokenAddresses: string[]];
  export interface OutputObject {
    _borrower: string;
    _collTokenAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveIndexUpdatedEvent {
  export type InputTuple = [_borrower: AddressLike, _newIndex: BigNumberish];
  export type OutputTuple = [_borrower: string, _newIndex: bigint];
  export interface OutputObject {
    _borrower: string;
    _newIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveManagerInitializedEvent {
  export type InputTuple = [
    _borrowerOperationsAddress: AddressLike,
    _redemptionOperationsAddress: AddressLike,
    _storagePoolAddress: AddressLike,
    _stabilityPoolAddress: AddressLike,
    _priceFeedAddress: AddressLike,
    _debtTokenManagerAddress: AddressLike,
    _collTokenManagerAddress: AddressLike
  ];
  export type OutputTuple = [
    _borrowerOperationsAddress: string,
    _redemptionOperationsAddress: string,
    _storagePoolAddress: string,
    _stabilityPoolAddress: string,
    _priceFeedAddress: string,
    _debtTokenManagerAddress: string,
    _collTokenManagerAddress: string
  ];
  export interface OutputObject {
    _borrowerOperationsAddress: string;
    _redemptionOperationsAddress: string;
    _storagePoolAddress: string;
    _stabilityPoolAddress: string;
    _priceFeedAddress: string;
    _debtTokenManagerAddress: string;
    _collTokenManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveSnapshotsUpdatedEvent {
  export type InputTuple = [_liquidatedTokens: IBase.CAmountStruct[]];
  export type OutputTuple = [_liquidatedTokens: IBase.CAmountStructOutput[]];
  export interface OutputObject {
    _liquidatedTokens: IBase.CAmountStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TroveManager extends BaseContract {
  connect(runner?: ContractRunner | null): TroveManager;
  waitForDeployment(): Promise<this>;

  interface: TroveManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BETA: TypedContractMethod<[], [bigint], "view">;

  BOOTSTRAP_PERIOD: TypedContractMethod<[], [bigint], "view">;

  BORROWING_FEE_FLOOR: TypedContractMethod<[], [bigint], "view">;

  CCR: TypedContractMethod<[], [bigint], "view">;

  MAX_BORROWING_FEE: TypedContractMethod<[], [bigint], "view">;

  MCR: TypedContractMethod<[], [bigint], "view">;

  MINUTE_DECAY_FACTOR: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  PERCENT_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  REDEMPTION_FEE_FLOOR: TypedContractMethod<[], [bigint], "view">;

  RESERVE_FEE: TypedContractMethod<[], [bigint], "view">;

  STABLE_COIN_GAS_COMPENSATION: TypedContractMethod<[], [bigint], "view">;

  TroveOwners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  Troves: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { status: bigint; arrayIndex: bigint }],
    "view"
  >;

  _100pct: TypedContractMethod<[], [bigint], "view">;

  addTroveOwnerToArray: TypedContractMethod<
    [_borrower: AddressLike],
    [bigint],
    "nonpayable"
  >;

  applyPendingRewards: TypedContractMethod<
    [_borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  baseRate: TypedContractMethod<[], [bigint], "view">;

  batchLiquidateTroves: TypedContractMethod<
    [_troveArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  borrowerOperationsAddress: TypedContractMethod<[], [string], "view">;

  calcDecayedBaseRate: TypedContractMethod<[], [bigint], "view">;

  closeTrove: TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  collTokenManager: TypedContractMethod<[], [string], "view">;

  debtTokenManager: TypedContractMethod<[], [string], "view">;

  decayBaseRateFromBorrowing: TypedContractMethod<[], [void], "nonpayable">;

  decreaseTroveColl: TypedContractMethod<
    [_borrower: AddressLike, _collTokenAmounts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  decreaseTroveDebt: TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAmounts: IBBase.DebtTokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  getBaseRate: TypedContractMethod<[], [bigint], "view">;

  getBorrowingFee: TypedContractMethod<
    [_debtValue: BigNumberish],
    [bigint],
    "view"
  >;

  getBorrowingFeeWithDecay: TypedContractMethod<
    [_debtValue: BigNumberish],
    [bigint],
    "view"
  >;

  getBorrowingRate: TypedContractMethod<[], [bigint], "view">;

  getBorrowingRateWithDecay: TypedContractMethod<[], [bigint], "view">;

  getCurrentICR: TypedContractMethod<
    [_borrower: AddressLike],
    [[bigint, bigint] & { ICR: bigint; currentDebtInUSD: bigint }],
    "view"
  >;

  getEntireDebtAndColl: TypedContractMethod<
    [_borrower: AddressLike],
    [
      [IBase.RAmountStructOutput[], bigint, bigint, bigint] & {
        amounts: IBase.RAmountStructOutput[];
        troveCollInUSD: bigint;
        troveDebtInUSD: bigint;
        troveDebtInUSDWithoutGasCompensation: bigint;
      }
    ],
    "view"
  >;

  getNominalICR: TypedContractMethod<
    [_borrower: AddressLike],
    [bigint],
    "view"
  >;

  getPendingReward: TypedContractMethod<
    [_borrower: AddressLike, _tokenAddress: AddressLike, _isColl: boolean],
    [bigint],
    "view"
  >;

  getTroveColl: TypedContractMethod<
    [_borrower: AddressLike],
    [IBase.TokenAmountStructOutput[]],
    "view"
  >;

  getTroveDebt: TypedContractMethod<
    [_borrower: AddressLike],
    [IBase.TokenAmountStructOutput[]],
    "view"
  >;

  getTroveOwnersCount: TypedContractMethod<[], [bigint], "view">;

  getTroveRepayableDebt: TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getTroveStakeValue: TypedContractMethod<
    [_borrower: AddressLike],
    [bigint],
    "view"
  >;

  getTroveStakes: TypedContractMethod<
    [_borrower: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  getTroveStatus: TypedContractMethod<
    [_borrower: AddressLike],
    [bigint],
    "view"
  >;

  getTroveWithdrawableColl: TypedContractMethod<
    [_borrower: AddressLike, _collTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  increaseTroveColl: TypedContractMethod<
    [_borrower: AddressLike, _collTokenAmounts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  increaseTroveDebt: TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAmounts: IBBase.DebtTokenAmountStruct[]],
    [void],
    "nonpayable"
  >;

  lastErrorRedistribution: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean],
    [bigint],
    "view"
  >;

  lastFeeOperationTime: TypedContractMethod<[], [bigint], "view">;

  liquidate: TypedContractMethod<
    [_borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidatedTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: boolean],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  redemptionManagerAddress: TypedContractMethod<[], [string], "view">;

  removeStake: TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardSnapshots: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: boolean],
    [bigint],
    "view"
  >;

  setAddresses: TypedContractMethod<
    [
      _borrowerOperationsAddress: AddressLike,
      _redemptionManagerAddress: AddressLike,
      _storagePoolAddress: AddressLike,
      _stabilityPoolManagerAddress: AddressLike,
      _priceFeedAddress: AddressLike,
      _debtTokenManagerAddress: AddressLike,
      _collTokenManagerAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setTroveStatus: TypedContractMethod<
    [_borrower: AddressLike, _num: BigNumberish],
    [void],
    "nonpayable"
  >;

  stabilityPoolManager: TypedContractMethod<[], [string], "view">;

  storagePool: TypedContractMethod<[], [string], "view">;

  totalCollateralSnapshots: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalStakes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalStakesSnapshot: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBaseRateFromRedemption: TypedContractMethod<
    [_totalRedeemedStable: BigNumberish, _totalStableCoinSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStakeAndTotalStakes: TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTroveRewardSnapshots: TypedContractMethod<
    [_borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BETA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BOOTSTRAP_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BORROWING_FEE_FLOOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BORROWING_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINUTE_DECAY_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REDEMPTION_FEE_FLOOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESERVE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STABLE_COIN_GAS_COMPENSATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TroveOwners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "Troves"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { status: bigint; arrayIndex: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_100pct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addTroveOwnerToArray"
  ): TypedContractMethod<[_borrower: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "applyPendingRewards"
  ): TypedContractMethod<[_borrower: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchLiquidateTroves"
  ): TypedContractMethod<[_troveArray: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowerOperationsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calcDecayedBaseRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeTrove"
  ): TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decayBaseRateFromBorrowing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decreaseTroveColl"
  ): TypedContractMethod<
    [_borrower: AddressLike, _collTokenAmounts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseTroveDebt"
  ): TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAmounts: IBBase.DebtTokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBaseRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowingFee"
  ): TypedContractMethod<[_debtValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowingFeeWithDecay"
  ): TypedContractMethod<[_debtValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowingRateWithDecay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentICR"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [[bigint, bigint] & { ICR: bigint; currentDebtInUSD: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEntireDebtAndColl"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [
      [IBase.RAmountStructOutput[], bigint, bigint, bigint] & {
        amounts: IBase.RAmountStructOutput[];
        troveCollInUSD: bigint;
        troveDebtInUSD: bigint;
        troveDebtInUSDWithoutGasCompensation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNominalICR"
  ): TypedContractMethod<[_borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingReward"
  ): TypedContractMethod<
    [_borrower: AddressLike, _tokenAddress: AddressLike, _isColl: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveColl"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [IBase.TokenAmountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveDebt"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [IBase.TokenAmountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveOwnersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveRepayableDebt"
  ): TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveStakeValue"
  ): TypedContractMethod<[_borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveStakes"
  ): TypedContractMethod<
    [_borrower: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveStatus"
  ): TypedContractMethod<[_borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveWithdrawableColl"
  ): TypedContractMethod<
    [_borrower: AddressLike, _collTokenAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseTroveColl"
  ): TypedContractMethod<
    [_borrower: AddressLike, _collTokenAmounts: IBase.TokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseTroveDebt"
  ): TypedContractMethod<
    [_borrower: AddressLike, _debtTokenAmounts: IBBase.DebtTokenAmountStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastErrorRedistribution"
  ): TypedContractMethod<[arg0: AddressLike, arg1: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastFeeOperationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[_borrower: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidatedTokens"
  ): TypedContractMethod<[arg0: AddressLike, arg1: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redemptionManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeStake"
  ): TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardSnapshots"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [
      _borrowerOperationsAddress: AddressLike,
      _redemptionManagerAddress: AddressLike,
      _storagePoolAddress: AddressLike,
      _stabilityPoolManagerAddress: AddressLike,
      _priceFeedAddress: AddressLike,
      _debtTokenManagerAddress: AddressLike,
      _collTokenManagerAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTroveStatus"
  ): TypedContractMethod<
    [_borrower: AddressLike, _num: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stabilityPoolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "storagePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCollateralSnapshots"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakesSnapshot"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBaseRateFromRedemption"
  ): TypedContractMethod<
    [_totalRedeemedStable: BigNumberish, _totalStableCoinSupply: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStakeAndTotalStakes"
  ): TypedContractMethod<
    [collTokenAddresses: AddressLike[], _borrower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTroveRewardSnapshots"
  ): TypedContractMethod<[_borrower: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BaseRateUpdated"
  ): TypedContractEvent<
    BaseRateUpdatedEvent.InputTuple,
    BaseRateUpdatedEvent.OutputTuple,
    BaseRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LTermsUpdated"
  ): TypedContractEvent<
    LTermsUpdatedEvent.InputTuple,
    LTermsUpdatedEvent.OutputTuple,
    LTermsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LastFeeOpTimeUpdated"
  ): TypedContractEvent<
    LastFeeOpTimeUpdatedEvent.InputTuple,
    LastFeeOpTimeUpdatedEvent.OutputTuple,
    LastFeeOpTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationSummary"
  ): TypedContractEvent<
    LiquidationSummaryEvent.InputTuple,
    LiquidationSummaryEvent.OutputTuple,
    LiquidationSummaryEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SystemSnapshotsUpdated"
  ): TypedContractEvent<
    SystemSnapshotsUpdatedEvent.InputTuple,
    SystemSnapshotsUpdatedEvent.OutputTuple,
    SystemSnapshotsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TotalStakesUpdated"
  ): TypedContractEvent<
    TotalStakesUpdatedEvent.InputTuple,
    TotalStakesUpdatedEvent.OutputTuple,
    TotalStakesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TroveAppliedRewards"
  ): TypedContractEvent<
    TroveAppliedRewardsEvent.InputTuple,
    TroveAppliedRewardsEvent.OutputTuple,
    TroveAppliedRewardsEvent.OutputObject
  >;
  getEvent(
    key: "TroveClosed"
  ): TypedContractEvent<
    TroveClosedEvent.InputTuple,
    TroveClosedEvent.OutputTuple,
    TroveClosedEvent.OutputObject
  >;
  getEvent(
    key: "TroveCollChanged"
  ): TypedContractEvent<
    TroveCollChangedEvent.InputTuple,
    TroveCollChangedEvent.OutputTuple,
    TroveCollChangedEvent.OutputObject
  >;
  getEvent(
    key: "TroveIndexUpdated"
  ): TypedContractEvent<
    TroveIndexUpdatedEvent.InputTuple,
    TroveIndexUpdatedEvent.OutputTuple,
    TroveIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TroveManagerInitialized"
  ): TypedContractEvent<
    TroveManagerInitializedEvent.InputTuple,
    TroveManagerInitializedEvent.OutputTuple,
    TroveManagerInitializedEvent.OutputObject
  >;
  getEvent(
    key: "TroveSnapshotsUpdated"
  ): TypedContractEvent<
    TroveSnapshotsUpdatedEvent.InputTuple,
    TroveSnapshotsUpdatedEvent.OutputTuple,
    TroveSnapshotsUpdatedEvent.OutputObject
  >;

  filters: {
    "BaseRateUpdated(uint256)": TypedContractEvent<
      BaseRateUpdatedEvent.InputTuple,
      BaseRateUpdatedEvent.OutputTuple,
      BaseRateUpdatedEvent.OutputObject
    >;
    BaseRateUpdated: TypedContractEvent<
      BaseRateUpdatedEvent.InputTuple,
      BaseRateUpdatedEvent.OutputTuple,
      BaseRateUpdatedEvent.OutputObject
    >;

    "LTermsUpdated(tuple[])": TypedContractEvent<
      LTermsUpdatedEvent.InputTuple,
      LTermsUpdatedEvent.OutputTuple,
      LTermsUpdatedEvent.OutputObject
    >;
    LTermsUpdated: TypedContractEvent<
      LTermsUpdatedEvent.InputTuple,
      LTermsUpdatedEvent.OutputTuple,
      LTermsUpdatedEvent.OutputObject
    >;

    "LastFeeOpTimeUpdated(uint256)": TypedContractEvent<
      LastFeeOpTimeUpdatedEvent.InputTuple,
      LastFeeOpTimeUpdatedEvent.OutputTuple,
      LastFeeOpTimeUpdatedEvent.OutputObject
    >;
    LastFeeOpTimeUpdated: TypedContractEvent<
      LastFeeOpTimeUpdatedEvent.InputTuple,
      LastFeeOpTimeUpdatedEvent.OutputTuple,
      LastFeeOpTimeUpdatedEvent.OutputObject
    >;

    "LiquidationSummary(tuple[],tuple[],uint256,tuple[])": TypedContractEvent<
      LiquidationSummaryEvent.InputTuple,
      LiquidationSummaryEvent.OutputTuple,
      LiquidationSummaryEvent.OutputObject
    >;
    LiquidationSummary: TypedContractEvent<
      LiquidationSummaryEvent.InputTuple,
      LiquidationSummaryEvent.OutputTuple,
      LiquidationSummaryEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SystemSnapshotsUpdated(tuple[],tuple[])": TypedContractEvent<
      SystemSnapshotsUpdatedEvent.InputTuple,
      SystemSnapshotsUpdatedEvent.OutputTuple,
      SystemSnapshotsUpdatedEvent.OutputObject
    >;
    SystemSnapshotsUpdated: TypedContractEvent<
      SystemSnapshotsUpdatedEvent.InputTuple,
      SystemSnapshotsUpdatedEvent.OutputTuple,
      SystemSnapshotsUpdatedEvent.OutputObject
    >;

    "TotalStakesUpdated(tuple[])": TypedContractEvent<
      TotalStakesUpdatedEvent.InputTuple,
      TotalStakesUpdatedEvent.OutputTuple,
      TotalStakesUpdatedEvent.OutputObject
    >;
    TotalStakesUpdated: TypedContractEvent<
      TotalStakesUpdatedEvent.InputTuple,
      TotalStakesUpdatedEvent.OutputTuple,
      TotalStakesUpdatedEvent.OutputObject
    >;

    "TroveAppliedRewards(address,tuple[])": TypedContractEvent<
      TroveAppliedRewardsEvent.InputTuple,
      TroveAppliedRewardsEvent.OutputTuple,
      TroveAppliedRewardsEvent.OutputObject
    >;
    TroveAppliedRewards: TypedContractEvent<
      TroveAppliedRewardsEvent.InputTuple,
      TroveAppliedRewardsEvent.OutputTuple,
      TroveAppliedRewardsEvent.OutputObject
    >;

    "TroveClosed(address,uint8)": TypedContractEvent<
      TroveClosedEvent.InputTuple,
      TroveClosedEvent.OutputTuple,
      TroveClosedEvent.OutputObject
    >;
    TroveClosed: TypedContractEvent<
      TroveClosedEvent.InputTuple,
      TroveClosedEvent.OutputTuple,
      TroveClosedEvent.OutputObject
    >;

    "TroveCollChanged(address,address[])": TypedContractEvent<
      TroveCollChangedEvent.InputTuple,
      TroveCollChangedEvent.OutputTuple,
      TroveCollChangedEvent.OutputObject
    >;
    TroveCollChanged: TypedContractEvent<
      TroveCollChangedEvent.InputTuple,
      TroveCollChangedEvent.OutputTuple,
      TroveCollChangedEvent.OutputObject
    >;

    "TroveIndexUpdated(address,uint256)": TypedContractEvent<
      TroveIndexUpdatedEvent.InputTuple,
      TroveIndexUpdatedEvent.OutputTuple,
      TroveIndexUpdatedEvent.OutputObject
    >;
    TroveIndexUpdated: TypedContractEvent<
      TroveIndexUpdatedEvent.InputTuple,
      TroveIndexUpdatedEvent.OutputTuple,
      TroveIndexUpdatedEvent.OutputObject
    >;

    "TroveManagerInitialized(address,address,address,address,address,address,address)": TypedContractEvent<
      TroveManagerInitializedEvent.InputTuple,
      TroveManagerInitializedEvent.OutputTuple,
      TroveManagerInitializedEvent.OutputObject
    >;
    TroveManagerInitialized: TypedContractEvent<
      TroveManagerInitializedEvent.InputTuple,
      TroveManagerInitializedEvent.OutputTuple,
      TroveManagerInitializedEvent.OutputObject
    >;

    "TroveSnapshotsUpdated(tuple[])": TypedContractEvent<
      TroveSnapshotsUpdatedEvent.InputTuple,
      TroveSnapshotsUpdatedEvent.OutputTuple,
      TroveSnapshotsUpdatedEvent.OutputObject
    >;
    TroveSnapshotsUpdated: TypedContractEvent<
      TroveSnapshotsUpdatedEvent.InputTuple,
      TroveSnapshotsUpdatedEvent.OutputTuple,
      TroveSnapshotsUpdatedEvent.OutputObject
    >;
  };
}
