/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "getAmountFromUSDValue"
      | "getPrice"
      | "getUSDValue"
      | "lastGoodPrices"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LastGoodPriceUpdated"
      | "OwnershipTransferred"
      | "PriceFeedStatusChanged"
      | "TokenPriceChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountFromUSDValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastGoodPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountFromUSDValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUSDValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastGoodPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace LastGoodPriceUpdatedEvent {
  export type InputTuple = [_token: AddressLike, _lastGoodPrice: BigNumberish];
  export type OutputTuple = [_token: string, _lastGoodPrice: bigint];
  export interface OutputObject {
    _token: string;
    _lastGoodPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedStatusChangedEvent {
  export type InputTuple = [_token: AddressLike, newStatus: BigNumberish];
  export type OutputTuple = [_token: string, newStatus: bigint];
  export interface OutputObject {
    _token: string;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPriceChangedEvent {
  export type InputTuple = [_token: AddressLike];
  export type OutputTuple = [_token: string];
  export interface OutputObject {
    _token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): PriceFeed;
  waitForDeployment(): Promise<this>;

  interface: PriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  getAmountFromUSDValue: TypedContractMethod<
    [_token: AddressLike, _usdValue: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;

  getUSDValue: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  lastGoodPrices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddresses: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAmountFromUSDValue"
  ): TypedContractMethod<
    [_token: AddressLike, _usdValue: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSDValue"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastGoodPrices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LastGoodPriceUpdated"
  ): TypedContractEvent<
    LastGoodPriceUpdatedEvent.InputTuple,
    LastGoodPriceUpdatedEvent.OutputTuple,
    LastGoodPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedStatusChanged"
  ): TypedContractEvent<
    PriceFeedStatusChangedEvent.InputTuple,
    PriceFeedStatusChangedEvent.OutputTuple,
    PriceFeedStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPriceChanged"
  ): TypedContractEvent<
    TokenPriceChangedEvent.InputTuple,
    TokenPriceChangedEvent.OutputTuple,
    TokenPriceChangedEvent.OutputObject
  >;

  filters: {
    "LastGoodPriceUpdated(address,uint256)": TypedContractEvent<
      LastGoodPriceUpdatedEvent.InputTuple,
      LastGoodPriceUpdatedEvent.OutputTuple,
      LastGoodPriceUpdatedEvent.OutputObject
    >;
    LastGoodPriceUpdated: TypedContractEvent<
      LastGoodPriceUpdatedEvent.InputTuple,
      LastGoodPriceUpdatedEvent.OutputTuple,
      LastGoodPriceUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceFeedStatusChanged(address,uint8)": TypedContractEvent<
      PriceFeedStatusChangedEvent.InputTuple,
      PriceFeedStatusChangedEvent.OutputTuple,
      PriceFeedStatusChangedEvent.OutputObject
    >;
    PriceFeedStatusChanged: TypedContractEvent<
      PriceFeedStatusChangedEvent.InputTuple,
      PriceFeedStatusChangedEvent.OutputTuple,
      PriceFeedStatusChangedEvent.OutputObject
    >;

    "TokenPriceChanged(address)": TypedContractEvent<
      TokenPriceChangedEvent.InputTuple,
      TokenPriceChangedEvent.OutputTuple,
      TokenPriceChangedEvent.OutputObject
    >;
    TokenPriceChanged: TypedContractEvent<
      TokenPriceChangedEvent.InputTuple,
      TokenPriceChangedEvent.OutputTuple,
      TokenPriceChangedEvent.OutputObject
    >;
  };
}
