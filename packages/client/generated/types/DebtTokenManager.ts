/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DebtTokenManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "addDebtToken"
      | "debtTokenAddresses"
      | "debtTokens"
      | "debtTokensArray"
      | "getDebtToken"
      | "getDebtTokenAddresses"
      | "getStableCoin"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "stabilityPoolManager"
      | "stableCoin"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebtTokenAdded"
      | "DebtTokenManagerInitialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addDebtToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokensArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokenAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtTokensArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DebtTokenAddedEvent {
  export type InputTuple = [_debtTokenAddress: AddressLike];
  export type OutputTuple = [_debtTokenAddress: string];
  export interface OutputObject {
    _debtTokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtTokenManagerInitializedEvent {
  export type InputTuple = [_stabilityPoolManagerAddress: AddressLike];
  export type OutputTuple = [_stabilityPoolManagerAddress: string];
  export interface OutputObject {
    _stabilityPoolManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DebtTokenManager extends BaseContract {
  connect(runner?: ContractRunner | null): DebtTokenManager;
  waitForDeployment(): Promise<this>;

  interface: DebtTokenManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  addDebtToken: TypedContractMethod<
    [_debtTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  debtTokenAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  debtTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  debtTokensArray: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDebtToken: TypedContractMethod<[_address: AddressLike], [string], "view">;

  getDebtTokenAddresses: TypedContractMethod<[], [string[]], "view">;

  getStableCoin: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddresses: TypedContractMethod<
    [_stabilityPoolManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stabilityPoolManager: TypedContractMethod<[], [string], "view">;

  stableCoin: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addDebtToken"
  ): TypedContractMethod<
    [_debtTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debtTokenAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "debtTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "debtTokensArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDebtToken"
  ): TypedContractMethod<[_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDebtTokenAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStableCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [_stabilityPoolManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stabilityPoolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stableCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DebtTokenAdded"
  ): TypedContractEvent<
    DebtTokenAddedEvent.InputTuple,
    DebtTokenAddedEvent.OutputTuple,
    DebtTokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "DebtTokenManagerInitialized"
  ): TypedContractEvent<
    DebtTokenManagerInitializedEvent.InputTuple,
    DebtTokenManagerInitializedEvent.OutputTuple,
    DebtTokenManagerInitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DebtTokenAdded(address)": TypedContractEvent<
      DebtTokenAddedEvent.InputTuple,
      DebtTokenAddedEvent.OutputTuple,
      DebtTokenAddedEvent.OutputObject
    >;
    DebtTokenAdded: TypedContractEvent<
      DebtTokenAddedEvent.InputTuple,
      DebtTokenAddedEvent.OutputTuple,
      DebtTokenAddedEvent.OutputObject
    >;

    "DebtTokenManagerInitialized(address)": TypedContractEvent<
      DebtTokenManagerInitializedEvent.InputTuple,
      DebtTokenManagerInitializedEvent.OutputTuple,
      DebtTokenManagerInitializedEvent.OutputObject
    >;
    DebtTokenManagerInitialized: TypedContractEvent<
      DebtTokenManagerInitializedEvent.InputTuple,
      DebtTokenManagerInitializedEvent.OutputTuple,
      DebtTokenManagerInitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
