/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StoragePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BORROWING_FEE_FLOOR"
      | "CCR"
      | "MAX_BORROWING_FEE"
      | "MCR"
      | "NAME"
      | "PERCENT_DIVISOR"
      | "REDEMPTION_FEE_FLOOR"
      | "RESERVE_FEE"
      | "STABLE_COIN_GAS_COMPENSATION"
      | "_100pct"
      | "addValue"
      | "borrowerOperationsAddress"
      | "checkRecoveryMode"
      | "collTokenAddresses"
      | "debtTokenAddresses"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "getTokenTotalAmount"
      | "getValue"
      | "owner"
      | "priceFeed"
      | "redemptionOperationsAddress"
      | "renounceOwnership"
      | "setAddresses"
      | "stabilityPoolManagerAddress"
      | "subtractValue"
      | "transferBetweenTypes"
      | "transferOwnership"
      | "troveManagerAddress"
      | "withdrawalValue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "StoragePoolInitialized"
      | "StoragePoolValueUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_BORROWING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addValue",
    values: [AddressLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collTokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtTokenAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTotalAmount",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getValue",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subtractValue",
    values: [AddressLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBetweenTypes",
    values: [AddressLike, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalValue",
    values: [AddressLike, AddressLike, boolean, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BORROWING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABLE_COIN_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtractValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBetweenTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalValue",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoragePoolInitializedEvent {
  export type InputTuple = [
    _borrowerOperationsAddress: AddressLike,
    _troveManagerAddress: AddressLike,
    _redemptionOperationsAddress: AddressLike,
    _stabilityPoolManagerAddress: AddressLike,
    _priceFeedAddress: AddressLike
  ];
  export type OutputTuple = [
    _borrowerOperationsAddress: string,
    _troveManagerAddress: string,
    _redemptionOperationsAddress: string,
    _stabilityPoolManagerAddress: string,
    _priceFeedAddress: string
  ];
  export interface OutputObject {
    _borrowerOperationsAddress: string;
    _troveManagerAddress: string;
    _redemptionOperationsAddress: string;
    _stabilityPoolManagerAddress: string;
    _priceFeedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoragePoolValueUpdatedEvent {
  export type InputTuple = [
    _tokenAddress: AddressLike,
    _isColl: boolean,
    _poolType: BigNumberish,
    _updatedAmount: BigNumberish
  ];
  export type OutputTuple = [
    _tokenAddress: string,
    _isColl: boolean,
    _poolType: bigint,
    _updatedAmount: bigint
  ];
  export interface OutputObject {
    _tokenAddress: string;
    _isColl: boolean;
    _poolType: bigint;
    _updatedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StoragePool extends BaseContract {
  connect(runner?: ContractRunner | null): StoragePool;
  waitForDeployment(): Promise<this>;

  interface: StoragePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BORROWING_FEE_FLOOR: TypedContractMethod<[], [bigint], "view">;

  CCR: TypedContractMethod<[], [bigint], "view">;

  MAX_BORROWING_FEE: TypedContractMethod<[], [bigint], "view">;

  MCR: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  PERCENT_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  REDEMPTION_FEE_FLOOR: TypedContractMethod<[], [bigint], "view">;

  RESERVE_FEE: TypedContractMethod<[], [bigint], "view">;

  STABLE_COIN_GAS_COMPENSATION: TypedContractMethod<[], [bigint], "view">;

  _100pct: TypedContractMethod<[], [bigint], "view">;

  addValue: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrowerOperationsAddress: TypedContractMethod<[], [string], "view">;

  checkRecoveryMode: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint] & {
        isInRecoveryMode: boolean;
        TCR: bigint;
        entireSystemColl: bigint;
        entireSystemDebt: bigint;
      }
    ],
    "view"
  >;

  collTokenAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  debtTokenAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getEntireSystemColl: TypedContractMethod<[], [bigint], "view">;

  getEntireSystemDebt: TypedContractMethod<[], [bigint], "view">;

  getTokenTotalAmount: TypedContractMethod<
    [_tokenAddress: AddressLike, _isColl: boolean],
    [bigint],
    "view"
  >;

  getValue: TypedContractMethod<
    [_tokenAddress: AddressLike, _isColl: boolean, _poolType: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  redemptionOperationsAddress: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddresses: TypedContractMethod<
    [
      _borrowerOperationsAddress: AddressLike,
      _troveManagerAddress: AddressLike,
      _redemptionOperationsAddress: AddressLike,
      _stabilityPoolManagerAddress: AddressLike,
      _priceFeedAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  stabilityPoolManagerAddress: TypedContractMethod<[], [string], "view">;

  subtractValue: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferBetweenTypes: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _fromType: BigNumberish,
      _toType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  troveManagerAddress: TypedContractMethod<[], [string], "view">;

  withdrawalValue: TypedContractMethod<
    [
      _receiver: AddressLike,
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BORROWING_FEE_FLOOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BORROWING_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENT_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REDEMPTION_FEE_FLOOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESERVE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STABLE_COIN_GAS_COMPENSATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_100pct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addValue"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowerOperationsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkRecoveryMode"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint] & {
        isInRecoveryMode: boolean;
        TCR: bigint;
        entireSystemColl: bigint;
        entireSystemDebt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "collTokenAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "debtTokenAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemColl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenTotalAmount"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _isColl: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValue"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _isColl: boolean, _poolType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redemptionOperationsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [
      _borrowerOperationsAddress: AddressLike,
      _troveManagerAddress: AddressLike,
      _redemptionOperationsAddress: AddressLike,
      _stabilityPoolManagerAddress: AddressLike,
      _priceFeedAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stabilityPoolManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subtractValue"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferBetweenTypes"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _fromType: BigNumberish,
      _toType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "troveManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawalValue"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _tokenAddress: AddressLike,
      _isColl: boolean,
      _poolType: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StoragePoolInitialized"
  ): TypedContractEvent<
    StoragePoolInitializedEvent.InputTuple,
    StoragePoolInitializedEvent.OutputTuple,
    StoragePoolInitializedEvent.OutputObject
  >;
  getEvent(
    key: "StoragePoolValueUpdated"
  ): TypedContractEvent<
    StoragePoolValueUpdatedEvent.InputTuple,
    StoragePoolValueUpdatedEvent.OutputTuple,
    StoragePoolValueUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StoragePoolInitialized(address,address,address,address,address)": TypedContractEvent<
      StoragePoolInitializedEvent.InputTuple,
      StoragePoolInitializedEvent.OutputTuple,
      StoragePoolInitializedEvent.OutputObject
    >;
    StoragePoolInitialized: TypedContractEvent<
      StoragePoolInitializedEvent.InputTuple,
      StoragePoolInitializedEvent.OutputTuple,
      StoragePoolInitializedEvent.OutputObject
    >;

    "StoragePoolValueUpdated(address,bool,uint8,uint256)": TypedContractEvent<
      StoragePoolValueUpdatedEvent.InputTuple,
      StoragePoolValueUpdatedEvent.OutputTuple,
      StoragePoolValueUpdatedEvent.OutputObject
    >;
    StoragePoolValueUpdated: TypedContractEvent<
      StoragePoolValueUpdatedEvent.InputTuple,
      StoragePoolValueUpdatedEvent.OutputTuple,
      StoragePoolValueUpdatedEvent.OutputObject
    >;
  };
}
