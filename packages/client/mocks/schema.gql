type Token {
  address: String! # contract address, used as id
  symbol: String!
  createdAt: String!
  #
  priceUSD: Float!
  priceUSD24hAgo: Float!
  #
  isPoolToken: Boolean!
}

enum LongShortDirection {
  LONG
  SHORT
}

type PositionStatus {
  closedAt: Int
  closingPriceUSD: Float

  direction: LongShortDirection!
  # includes the total applied gas fees
  feeTotalUSD: Float!
  # TODO: The table shows a PNL in jUSD but does it even make sense to show that?
  openingPriceUSD: Float!
}

type DebtTokenMeta {
  token: Token!
  # borrower specific
  walletAmount: Float
  troveMintedAmount: Float
  stabilityLostAmount: Float
  status: PositionStatus

  # global
  totalDepositedStability: Float!
  totalReserve: Float!
  totalReserve24hAgo: Float!
  totalSupplyUSD: Float!
  totalSupplyUSD24hAgo: Float!
}

type CollateralTokenMeta {
  token: Token!
  # borrower specific
  walletAmount: Float
  troveLockedAmount: Float
  stabilityGainedAmount: Float
  # global
  totalValueLockedUSD: Float!
  totalValueLockedUSD24hAgo: Float!
}

type Query {
  # without borrower address troveAmount and walletAmount are always undefined
  # every token is returned, even if it is not used by the borrower (troveAmount, walletAmount = 0)
  # the same token can be returned twice, if it is used as debt and collateral
  getDebtTokens(borrower: String): [DebtTokenMeta!]!
  getCollateralTokens(borrower: String): [CollateralTokenMeta!]!
}

type PoolLiquidity {
  token: Token!
  totalAmount: Float!
  borrowerAmount: Float
}

type PoolReward {
  token: Token!
  amount: Float!
}

type Pool {
  id: String!
  liquidity: [PoolLiquidity!]!
  rewards: [PoolReward!]!
  volume24hUSD: Float!
  volume24hUSD24hAgo: Float!
}

type Query {
  # every pool is returned, even if it is empty
  # without borrower address borrowerLiquidity and borrowerRewards are always undefined
  getPools(borrower: String): [Pool!]!
  getPoolPriceHistory(poolId: String!): [[Int!]!]! # [[timestamp, value], [...], ...] todo time range filter needed?
  #
  getCollateralUSDHistory: [[Int!]!]! # [[timestamp, value], [...], ...]
  getDebtUSDHistory: [[Int!]!]! # [[timestamp, value], [...], ...]
  getCRHistory: [[Int!]!]! # [[timestamp, value], [...], ...] TODO: CR?
  getReserveUSDHistory: [[Int!]!]! # [[timestamp, value], [...], ...]
}

type TokenAmount {
  token: Token!
  amount: Float!
}

enum BorrowerHistoryType {
  DEPOSITED
  WITHDRAWN
  CLAIMED_REWARDS
}

type BorrowerHistory {
  timestamp: Int!
  type: BorrowerHistoryType!
  values: [TokenAmount!]!
  resultInUSD: Float!
}

type Query {
  getBorrowerPoolHistory(poolId: String!, borrower: String!): [BorrowerHistory!]!
  getBorrowerStabilityHistory(borrower: String!): [BorrowerHistory!]!
}
