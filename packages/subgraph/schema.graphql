# SINGLETON FOR SYSTEM INFO
type SystemInfo @entity {
  # "SystemInfo"
  id: String!
  timestamp: BigInt!
  stableCoin: Bytes!
  govToken: Bytes!
  storagePool: Bytes!
  priceFeed: Bytes!
  reservePool: Bytes!
  stabilityPoolManager: Bytes!

  # Chart indexes
  totalValueLockedUSDHistoryIndex: Int!
  totalValueMintedUSDHistoryIndex: Int!
  reservePoolUSDHistoryIndex: Int!
}

# TODO: wasa mapper for swap pools PairCreated event
type Token @entity {
  # contract address
  id: Bytes!
  address: Bytes! # contract address
  symbol: String!
  createdAt: BigInt!
  #
  isPoolToken: Boolean!
}

type DebtTokenMeta @entity {
  # "DebtTokenMeta" + token
  id: String!
  token: Token! @relation(name: "TokenToDebtTokenMeta")
  timestamp: BigInt!

  # global

  # Es geht bei dieser Metric um einen laufenden 30 Tage Durchschnitt, welcher anzeigt wie viel die depositors in dieser Zeit, aufs Jahr hochgerechenet, verdient haben.
  # Das muss auf dem graphen berechnet werden, über das offset event. Alle offsets der letzten 30 Tage immer zusammenfassen und schauen wie groß der Profit (debt token heraus gezogen, coll token bekommen) war.
  # On creation of the entity we must save just the current APY
  stabilityDepositAPY: StabilityDepositAPY! @relation(name: "StabilityDepositAPYToDebtTokenMeta")
  # event: StabilityProvided StabilityWithdrawn  StabilityOffset
  totalDepositedStability: BigInt!
  # Only != 0 on the STABLE token
  totalReserve: BigInt!
  totalReserve30dAverage: TotalReserveAverage
  # event StoragePoolValueUpdated
  totalSupplyUSD: BigInt!
  totalSupplyUSD30dAverage: TotalSupplyAverage!
  # event StoragePoolValueUpdated
}

# aggregator for 30d average, each chunk is 60min
type TotalReserveAverage @entity {
  # "TotalReserveAverage" + token
  id: String!
  index: Int!
  value: BigInt!
}

# A chunk is added once every 60min are over and is deducted at the end of 30d
type TotalReserveAverageChunk @entity {
  # "TotalReserveAverageChunk" + token + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
}

# aggregator for 30d average, each chunk is 60min
type TotalSupplyAverage @entity {
  # "TotalSupplyAverage" + token
  id: String!
  index: Int!
  value: BigInt!
}

# A chunk is added once every 60min are over and is deducted at the end of 30d
type TotalSupplyAverageChunk @entity {
  # "TotalSupplyAverageChunk" + token + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
}

# Aggregator, pushed old events out and lets new in, recalculating the acc value each time
type StabilityDepositAPY @entity {
  # "StabilityDepositAPY" + token
  id: String!
  index: Int!
  profit: BigInt!
  volume: BigInt!
}

# A chunk is added once every 60min are over and is deducted at the end of 30d
type StabilityDepositChunk @entity {
  # "StabilityDepositChunk" + token + index
  id: String!
  timestamp: BigInt!
  profit: BigInt!
  volume: BigInt!
}

# type UserDebtTokenMeta @entity {
#   # "UserDebtTokenMeta" + token + borrower
#   id: String!
#   borrower: Bytes!
#   token: Bytes!

#   walletAmount: BigInt!
#   troveMintedAmount: BigInt!
#   # When user claims rewards set to deposit => track any increase/decrease but claimed stability
#   providedStablitySinceLastCollClaim: BigInt!
#   stabilityCompoundAmount: BigInt!
# }

type CollateralTokenMeta @entity {
  # "CollateralTokenMeta" + token
  id: String!
  token: Token! @relation(name: "TokenToCollateralTokenMeta")
  timestamp: BigInt!

  # global
  totalValueLockedUSD: BigInt!
  totalValueLockedUSD30dAverage: TotalValueLockedAverage!
  # Only != 0 on the GOV token
  totalReserve: BigInt!
  totalReserve30dAverage: TotalReserveAverage
}

# aggregator for 30d average, each chunk is 60min
type TotalValueLockedAverage @entity {
  # "TotalValueLockedAverage" + token
  id: String!
  index: Int!
  value: BigInt!
}

# A chunk is added once every 60min are over and is deducted at the end of 30d
type TotalValueLockedChunk @entity {
  # "TotalValueLockedChunk" + token + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
}

# type UserCollateralTokenMeta @entity {
#   # "UserDebtTokenMeta" + token + borrower
#   id: String!
#   borrower: Bytes!
#   token: Bytes!
#   # borrower specific
#   walletAmount: BigInt!
#   troveLockedAmount: BigInt!

#   # TODO: This call is made from the client to the contract because there is no event for this
#   # stabilityGainedAmount: BigInt!
# }

enum LongShortDirection {
  LONG
  SHORT
}

type SwapEvent @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes!
  timestamp: BigInt!
  #
  token: Token! @relation(name: "TokenToSwapEvent")
  direction: LongShortDirection! # Indicates whether the swap is LONG or SHORT
  size: BigInt! # always positive, applied by direction. The size of the "non-stable" coin involved in the swap
  totalPriceInStable: BigInt! # The total price at the time of the swap, always in stable coin
  # die currentSwapFee wird in dem event als 1e6 angegeben → 1000000 sind 100%, 3000 sind 0.3%
  swapFee: BigInt! # protocol fees, without gas. Long => jUSD / Short => DebtToken
}

type PoolLiquidity @entity {
  # unique Byte combination of tokenA + tokenB
  id: Bytes!
  token: Token! @relation(name: "TokenToPoolLiquidity")
  # TODO: wasa Swap event swapPair.getReserves
  totalAmount: BigInt!
}

# type UserPoolLiquidity @entity {
#   # "UserPoolLiquidity" + main Token + paired Token + borrower
#   id: String!
#   borrower: Bytes!
#   token: Bytes!
#   borrowerAmount: BigInt!
# }

# type PoolReward @entity(immutable: true) {
#   id: Bytes!
#   token: Bytes!
#   amount: BigInt!
# }

# type UserPool @entity {
#   # "UserPool" + TokenA + TokenB + borrower
#   id: String!
#   borrower: Bytes!

#   # Always updated on a user basis
#   userLiquidity: [UserPoolLiquidity!]! @relation(name: "UserPoolLiquidityToPool")
#   # Just pushed once, never updated
#   rewards: [PoolReward!]!
# }

type Pool @entity {
  # `Pool-${token0.toHexString()}-${token1.toHexString()}`
  id: String!
  # SwapPair contract address
  address: Bytes!

  # Percent value applied when opening the first position for this pool. Can be negative and positive.
  # swapFee: BigInt!
  # Just linked once, always updated for all users
  # TODO: wasa update the general data on the Pool singletons
  liquidity: [PoolLiquidity!]! @relation(name: "PoolLiquidityToPool")
  # TODO: die fee in USD bitte ebenfalls im laufenden durchschnitt mitberechen, diese wird dann notwenidg um die APY zu ermitteln
  # TODO: wasa => not sure how to do this yet, lets delay this for now
  liquidityDepositAPY: BigInt!

  # TODO: wasa => We need to aggregate all Deposits/Withdrawals and update every time a new Transaction comes in
  volume30dUSD: PoolVolume30d!
  # once the first PoolEvent of the array is > 24h ago, we can remove it from the array and push it to the 24hAgo field
  volume30dUSD30dAgo: PoolVolume30d!

  # TODO: wasa Proxy Token amount
  totalSupply: BigInt!
}

# Aggregator, pushed old events out and lets new in, recalculating the acc value each time
type PoolVolume30d @entity {
  id: Bytes!
  leadingIndex: Int!
  lastIndex: Int!
  value: BigInt!
  # die fee in USD bitte ebenfalls im laufenden durchschnitt mitberechen, diese wird dann notwenidg um die APY zu ermitteln
  feeUSD: BigInt!
}

# A chunk is added once 5min are over and is deducted at the end of 30d
type PoolVolumeChunk @entity {
  # "PoolVolumeChunk" + TokenA + TokenB + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
}

# TODO: wasa not sure about contract/event limitations of the BorrowerHistory, lets analyze this together first before implementation.
type TokenAmount @entity(immutable: true) {
  id: Bytes!
  token: Token! @relation(name: "TokenToTokenAmount")
  amount: BigInt!
}

enum BorrowerHistoryType {
  DEPOSITED
  WITHDRAWN
  CLAIMED_REWARDS
}

type BorrowerHistory @entity(immutable: true) {
  id: Bytes!
  pool: Bytes!
  borrower: Bytes!
  # Group transactions together in accumulated view
  timestamp: BigInt!
  type: BorrowerHistoryType!
  values: [TokenAmount!]! @relation(name: "TokenAmountToBorrowerHistory")
  # worth of the claimed tokens in USD at the time of the event, only set on CLAIMED_REWARDS
  claimInUSD: BigInt
  # worth of the lost debtToken in USD at the time of the event, only set on CLAIMED_REWARDS
  lostDepositInUSD: BigInt
}

# CHARTS

# TODO: wasa => I would start with this.
# 1min, 10min, 1hour, 6hour, 1day, 1week
# const CandleSizes = [1, 10, 60, 360, 1440, 10080];
# We add to a singleton cande and then save it as soon as the candlesize is reached
type TokenCandleSingleton @entity {
  # "TokenCandleSingleton" + token + candleSize
  id: String!
  token: Token! @relation(name: "TokenToTokenCandle Singleton")
  # last candle + candleSize
  timestamp: BigInt!
  # last candle
  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!
  volume: BigInt!
  candleSize: Int!
}

type TokenCandle @entity(immutable: true) {
  id: Bytes!
  token: Token! @relation(name: "TokenToTokenCandle")
  timestamp: BigInt!
  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!
  volume: BigInt!
  candleSize: Int!
}

#  SMALL BALANCE CHARTS

# current total value locked, each in 1d chunks
type TotalValueLockedUSDHistoryChunk @entity {
  # "TotalValueLockedUSDHistoryChunk" + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
  # interval in seconds. This allows to filter if more/less granularity is needed.
  size: Int!
}

# current total value minted, each in 1d chunks
type TotalValueMintedUSDHistoryChunk @entity {
  # "TotalValueMintedUSDHistoryChunk" + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
  # interval in seconds. This allows to filter if more/less granularity is needed.
  size: Int!
}

# current total value locked by all reserve pools, each in 1d chunks
type ReservePoolUSDHistoryChunk @entity {
  # "ReservePoolUSDHistoryChunk" + index
  id: String!
  timestamp: BigInt!
  value: BigInt!
  # interval in seconds. This allows to filter if more/less granularity is needed.
  size: Int!
}
